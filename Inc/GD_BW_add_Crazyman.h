//#include "Arduino.h"
// The display is SPI, include the library header.
//#include <SPI.h>
//#include <avr/io.h>

#include "main.h"
#include "stm32l4xx_hal.h"

#include "Display_EPD_W21_spi.h"
#include "Display_EPD_W21.h"
#include "Ap_29demo.h"	

//uint8_t Mono_1BPP[2756] =
//   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

uint8_t Mono_1BPP[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFC,0x00,0x00,0x00,0x00,0x0F,0xFF,0x80,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFC,0x00,0x01,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0xFF,0xFF,0xFC,0x00,0x00,
   0x00,0x00,0x0F,0xE0,0x3E,0x00,0x7F,0x00,0x0F,0xE0,0x0E,0x07,0x00,0x1C,0xC0,0x03,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xF0,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x07,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x3F,0xFC,0x3E,0x01,0xFF,0xE0,0x3F,0xFC,0x0E,0x03,0x80,0x38,0xE0,0x03,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xE0,0x00,
   0x00,0x00,0xFF,0xFC,0x3E,0x07,0xFF,0xE0,0xFF,0xFC,0x0E,0x01,0xC0,0x30,0xE0,0x07,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xE0,0x00,
   0x00,0x00,0xFF,0xFC,0x3E,0x07,0xFF,0xE0,0xFF,0xFC,0x0E,0x01,0xC0,0x70,0x60,0x06,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,
   0x00,0x01,0xF8,0x1C,0x3E,0x0F,0xC0,0xE1,0xF8,0x1C,0x00,0x00,0xE0,0xE0,0x70,0x06,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,
   0x00,0x01,0xF0,0x04,0x00,0x0F,0x80,0x21,0xF0,0x04,0x00,0x00,0x70,0xC0,0x70,0x0E,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,
   0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x01,0xF0,0x00,0x00,0x00,0x71,0x80,0x3F,0xFC,0x0C,0x0C,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,
   0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x01,0xF0,0x00,0x00,0x00,0x3B,0x80,0x3F,0xFC,0x0C,0x1C,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,
   0x00,0x01,0xF8,0x18,0x00,0x0F,0xC0,0xC1,0xF8,0x18,0x00,0x00,0x1F,0x00,0x38,0x1C,0x0C,0x1E,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFE,0x00,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x3F,0xFF,0xF0,0x07,0xFF,0x00,0x07,0xFF,0xFE,0x00,0xFF,0xE0,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x00,0x0E,0x00,0x18,0x18,0x0C,0x3E,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xF0,0x00,0x1F,0xE0,0x01,0xFF,0xF0,0x00,0x7F,0xFF,0x80,0x00,0xFF,0x00,0x0F,0xFF,0xF0,0x00,0x1F,0xE0,0x00,
   0x00,0x00,0xFF,0xF8,0x00,0x07,0xFF,0xC0,0xFF,0xF8,0x00,0x00,0x0E,0x00,0x1C,0x18,0x0C,0x37,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xC0,0x00,0x07,0xE0,0x01,0xFF,0xF0,0x00,0x7F,0xFE,0x00,0x00,0x3F,0x00,0x0F,0xFF,0xC0,0x00,0x07,0xE0,0x00,
   0x00,0x00,0x7F,0xF8,0x00,0x03,0xFF,0xC0,0x7F,0xF8,0x0E,0x00,0x1F,0x00,0x1C,0x38,0x0C,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x80,0x00,0x01,0xE0,0x01,0xFF,0xF0,0x00,0xFF,0xFC,0x00,0x00,0x0F,0x00,0x1F,0xFF,0x80,0x00,0x01,0xE0,0x00,
   0x00,0x00,0x1F,0xF8,0x00,0x00,0xFF,0xC0,0x1F,0xF8,0x0E,0x00,0x3B,0x80,0x0C,0x30,0x0C,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x80,0x00,0x00,0x60,0x01,0xFF,0xF0,0x00,0xFF,0xFC,0x00,0x00,0x03,0x00,0x1F,0xFF,0x80,0x00,0x00,0x60,0x00,
   0x00,0x00,0x00,0xF8,0x00,0x00,0x07,0xC0,0x00,0xF8,0x0E,0x00,0x31,0x80,0x0E,0x70,0x0C,0xC1,0x98,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0xF8,0x00,0x00,0x07,0xC0,0x00,0xF8,0x0E,0x00,0x71,0xC0,0x0E,0x70,0x0C,0xC1,0x98,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0xF8,0x00,0x00,0x07,0xC0,0x00,0xF8,0x00,0x00,0xE0,0xE0,0x06,0x60,0x0D,0x80,0xD8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x01,0xC0,0x60,0x07,0xE0,0x0F,0x80,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x01,0x80,0x70,0x03,0xC0,0x0F,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x03,0x80,0x38,0x03,0xC0,0x0F,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFC,0x00,0x00,0x00,0x00,0x1F,0xFF,0x80,0x00,0x00,0x00,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x07,0x00,0x1C,0x03,0xC0,0x0E,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFC,0x00,0x00,0x00,0x00,0x1F,0xFF,0x80,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x00,0x00,0x1F,0xFF,0xC0,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xF0,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0xFF,0xFF,0x80,0x00,0x1C,0x00,0x1F,0xFF,0xF0,0x00,0x03,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFE,0x00,0x3F,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xF0,0x01,0xFC,0x00,0x0F,0xFF,0xFE,0x00,0x3F,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFC,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFC,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFC,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x07,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x0F,0xE0,0x3E,0x00,0x7F,0x00,0x0F,0xE0,0x0E,0x00,0x07,0x00,0x60,0xFE,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x7F,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x3F,0xFC,0x3E,0x01,0xFF,0xE0,0x3F,0xFC,0x0E,0x00,0x07,0x00,0x60,0xFE,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x00,0xFF,0xFC,0x3E,0x07,0xFF,0xE0,0xFF,0xFC,0x0E,0x00,0x07,0x80,0x60,0x38,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x00,0xFF,0xFC,0x3E,0x07,0xFF,0xE0,0xFF,0xFC,0x0E,0x00,0x07,0xC0,0x60,0x38,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x01,0xF8,0x1C,0x3E,0x0F,0xC0,0xE1,0xF8,0x1C,0x00,0x00,0x07,0xC0,0x60,0x38,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x01,0xF0,0x04,0x00,0x0F,0x80,0x21,0xF0,0x04,0x00,0x00,0x06,0xE0,0x60,0x38,0x0C,0x00,0x18,0x00,0x0E,0x07,0x3E,0x0E,0x0F,0x81,0x80,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x01,0xF0,0x00,0x00,0x00,0x06,0x60,0x60,0x38,0x0C,0x0C,0x18,0x00,0x0E,0x07,0x1E,0x0E,0x1F,0xC1,0x80,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x01,0xF0,0x00,0x00,0x00,0x06,0x70,0x60,0x38,0x0C,0x1C,0x18,0x00,0x0E,0x07,0x0F,0x0E,0x18,0xC3,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x01,0xF8,0x18,0x00,0x0F,0xC0,0xC1,0xF8,0x18,0x00,0x00,0x06,0x30,0x60,0x38,0x0C,0x1E,0x18,0x00,0x0E,0x07,0x07,0x8E,0x38,0xC3,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x00,0x06,0x38,0x60,0x38,0x0C,0x3E,0x18,0x00,0x0E,0x07,0x07,0xCE,0x38,0xE6,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0xFF,0xF8,0x00,0x07,0xFF,0xC0,0xFF,0xF8,0x00,0x00,0x06,0x18,0x60,0x38,0x0C,0x37,0x18,0x00,0x0E,0x07,0x03,0xFE,0x38,0xC6,0x7C,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x7F,0xF8,0x00,0x03,0xFF,0xC0,0x7F,0xF8,0x0E,0x00,0x06,0x1C,0x60,0x38,0x0C,0x63,0x18,0x00,0x0F,0xFF,0x03,0xFE,0x18,0xCC,0xFE,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x1F,0xF8,0x00,0x00,0xFF,0xC0,0x1F,0xF8,0x0E,0x00,0x06,0x0C,0x60,0x38,0x0C,0x63,0x18,0x00,0x0F,0xFF,0x07,0xFE,0x1F,0xCC,0xC6,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0xF8,0x00,0x00,0x07,0xC0,0x00,0xF8,0x0E,0x00,0x06,0x0E,0x60,0x38,0x0C,0xC1,0x98,0x00,0x0F,0xFF,0x0F,0x0E,0x0F,0x99,0xC7,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0xF8,0x00,0x00,0x07,0xC0,0x00,0xF8,0x0E,0x00,0x06,0x06,0x60,0x38,0x0C,0xC1,0x98,0x00,0x0E,0x07,0x0E,0x0E,0x00,0x19,0xC7,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0xF8,0x00,0x00,0x07,0xC0,0x00,0xF8,0x00,0x00,0x06,0x07,0x60,0x38,0x0D,0x80,0xD8,0x00,0x0E,0x07,0x0F,0x0E,0x00,0x31,0xC7,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x00,0x06,0x03,0x60,0x38,0x0F,0x80,0xF8,0x00,0x0E,0x07,0x0F,0xFE,0x00,0x70,0xC6,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x00,0x06,0x03,0xE0,0x38,0x0F,0x00,0x78,0x00,0x0E,0x07,0x07,0xFE,0x00,0x60,0xFE,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x00,0x06,0x01,0xE0,0xFE,0x0F,0x00,0x78,0x00,0x0E,0x07,0x03,0xFE,0x00,0xE0,0x7C,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x00,0x06,0x01,0xE0,0xFE,0x0E,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFC,0x00,0x00,0x00,0x00,0x0F,0xFF,0x80,0x00,0x00,
   0x00,0x00,0x0F,0xE0,0x3E,0x00,0x7F,0x00,0x0F,0xE0,0x0E,0x07,0x00,0x1C,0xC0,0x03,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFC,0x00,0x01,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0xFF,0xFF,0xFC,0x00,0x00,
   0x00,0x00,0x3F,0xFC,0x3E,0x01,0xFF,0xE0,0x3F,0xFC,0x0E,0x03,0x80,0x38,0xE0,0x03,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xF0,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x07,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0xFF,0xFC,0x3E,0x07,0xFF,0xE0,0xFF,0xFC,0x0E,0x01,0xC0,0x30,0xE0,0x07,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xE0,0x00,
   0x00,0x00,0xFF,0xFC,0x3E,0x07,0xFF,0xE0,0xFF,0xFC,0x0E,0x01,0xC0,0x70,0x60,0x06,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xE0,0x00,
   0x00,0x01,0xF8,0x1C,0x3E,0x0F,0xC0,0xE1,0xF8,0x1C,0x00,0x00,0xE0,0xE0,0x70,0x06,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,
   0x00,0x01,0xF0,0x04,0x00,0x0F,0x80,0x21,0xF0,0x04,0x00,0x00,0x70,0xC0,0x70,0x0E,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,
   0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x01,0xF0,0x00,0x00,0x00,0x71,0x80,0x3F,0xFC,0x0C,0x0C,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,
   0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x01,0xF0,0x00,0x00,0x00,0x3B,0x80,0x3F,0xFC,0x0C,0x1C,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,
   0x00,0x01,0xF8,0x18,0x00,0x0F,0xC0,0xC1,0xF8,0x18,0x00,0x00,0x1F,0x00,0x38,0x1C,0x0C,0x1E,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x00,0x0E,0x00,0x18,0x18,0x0C,0x3E,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFE,0x00,0xFF,0xE0,0x01,0xFF,0xF0,0x00,0x3F,0xFF,0xF0,0x07,0xFF,0x00,0x07,0xFF,0xFE,0x00,0xFF,0xE0,0x00,
   0x00,0x00,0xFF,0xF8,0x00,0x07,0xFF,0xC0,0xFF,0xF8,0x00,0x00,0x0E,0x00,0x1C,0x18,0x0C,0x37,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xF0,0x00,0x1F,0xE0,0x01,0xFF,0xF0,0x00,0x7F,0xFF,0x80,0x00,0xFF,0x00,0x0F,0xFF,0xF0,0x00,0x1F,0xE0,0x00,
   0x00,0x00,0x7F,0xF8,0x00,0x03,0xFF,0xC0,0x7F,0xF8,0x0E,0x00,0x1F,0x00,0x1C,0x38,0x0C,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xC0,0x00,0x07,0xE0,0x01,0xFF,0xF0,0x00,0x7F,0xFE,0x00,0x00,0x3F,0x00,0x0F,0xFF,0xC0,0x00,0x07,0xE0,0x00,
   0x00,0x00,0x1F,0xF8,0x00,0x00,0xFF,0xC0,0x1F,0xF8,0x0E,0x00,0x3B,0x80,0x0C,0x30,0x0C,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x80,0x00,0x01,0xE0,0x01,0xFF,0xF0,0x00,0xFF,0xFC,0x00,0x00,0x0F,0x00,0x1F,0xFF,0x80,0x00,0x01,0xE0,0x00,
   0x00,0x00,0x00,0xF8,0x00,0x00,0x07,0xC0,0x00,0xF8,0x0E,0x00,0x31,0x80,0x0E,0x70,0x0C,0xC1,0x98,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x80,0x00,0x00,0x60,0x01,0xFF,0xF0,0x00,0xFF,0xFC,0x00,0x00,0x03,0x00,0x1F,0xFF,0x80,0x00,0x00,0x60,0x00,
   0x00,0x00,0x00,0xF8,0x00,0x00,0x07,0xC0,0x00,0xF8,0x0E,0x00,0x71,0xC0,0x0E,0x70,0x0C,0xC1,0x98,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0xF8,0x00,0x00,0x07,0xC0,0x00,0xF8,0x00,0x00,0xE0,0xE0,0x06,0x60,0x0D,0x80,0xD8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x01,0xC0,0x60,0x07,0xE0,0x0F,0x80,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x01,0x80,0x70,0x03,0xC0,0x0F,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x03,0x80,0x38,0x03,0xC0,0x0F,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x07,0x00,0x1C,0x03,0xC0,0x0E,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFC,0x00,0x00,0x00,0x00,0x1F,0xFF,0x80,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFC,0x00,0x00,0x00,0x00,0x1F,0xFF,0x80,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x00,0x00,0x1F,0xFF,0xC0,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xF0,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0xFF,0xFF,0x80,0x00,0x1C,0x00,0x1F,0xFF,0xF0,0x00,0x03,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFE,0x00,0x3F,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xF0,0x01,0xFC,0x00,0x0F,0xFF,0xFE,0x00,0x3F,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFC,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFC,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFC,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x0F,0xE0,0x3E,0x00,0x7F,0x00,0x0F,0xE0,0x0E,0x00,0x07,0x00,0x60,0xFE,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x07,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x3F,0xFC,0x3E,0x01,0xFF,0xE0,0x3F,0xFC,0x0E,0x00,0x07,0x00,0x60,0xFE,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x7F,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0xFF,0xFC,0x3E,0x07,0xFF,0xE0,0xFF,0xFC,0x0E,0x00,0x07,0x80,0x60,0x38,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x00,0xFF,0xFC,0x3E,0x07,0xFF,0xE0,0xFF,0xFC,0x0E,0x00,0x07,0xC0,0x60,0x38,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x01,0xF8,0x1C,0x3E,0x0F,0xC0,0xE1,0xF8,0x1C,0x00,0x00,0x07,0xC0,0x60,0x38,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x01,0xF0,0x04,0x00,0x0F,0x80,0x21,0xF0,0x04,0x00,0x00,0x06,0xE0,0x60,0x38,0x0C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x01,0xF0,0x00,0x00,0x00,0x06,0x60,0x60,0x38,0x0C,0x0C,0x18,0x00,0x00,0x00,0x00,0x01,0xF8,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x01,0xF0,0x00,0x00,0x0F,0x80,0x01,0xF0,0x00,0x00,0x00,0x06,0x70,0x60,0x38,0x0C,0x1C,0x18,0x00,0x00,0x00,0x00,0x07,0xFE,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x01,0xF8,0x18,0x00,0x0F,0xC0,0xC1,0xF8,0x18,0x00,0x00,0x06,0x30,0x60,0x38,0x0C,0x1E,0x18,0x00,0x00,0x00,0x00,0x07,0xFF,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x00,0x06,0x38,0x60,0x38,0x0C,0x3E,0x18,0x00,0x00,0x00,0x00,0x04,0x0F,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x07,0xFF,0x80,0x00,
   0x00,0x00,0xFF,0xF8,0x00,0x07,0xFF,0xC0,0xFF,0xF8,0x00,0x00,0x06,0x18,0x60,0x38,0x0C,0x37,0x18,0x00,0x00,0x00,0x00,0x00,0x07,0x80,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x7F,0xF8,0x00,0x03,0xFF,0xC0,0x7F,0xF8,0x0E,0x00,0x06,0x1C,0x60,0x38,0x0C,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x07,0x80,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x1F,0xF8,0x00,0x00,0xFF,0xC0,0x1F,0xF8,0x0E,0x00,0x06,0x0C,0x60,0x38,0x0C,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x03,0x83,0x80,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0xF8,0x00,0x00,0x07,0xC0,0x00,0xF8,0x0E,0x00,0x06,0x0E,0x60,0x38,0x0C,0xC1,0x98,0x00,0x00,0x00,0x00,0x00,0x03,0x87,0xC0,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0xF8,0x00,0x00,0x07,0xC0,0x00,0xF8,0x0E,0x00,0x06,0x06,0x60,0x38,0x0C,0xC1,0x98,0x00,0x00,0x00,0x00,0x00,0x07,0x8C,0x60,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0xF8,0x00,0x00,0x07,0xC0,0x00,0xF8,0x00,0x00,0x06,0x07,0x60,0x38,0x0D,0x80,0xD8,0x00,0x00,0x00,0x00,0x00,0x07,0x8C,0x60,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x00,0x06,0x03,0x60,0x38,0x0F,0x80,0xF8,0x00,0x00,0x00,0x00,0x04,0x0F,0x0C,0x60,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x00,0x06,0x03,0xE0,0x38,0x0F,0x00,0x78,0x00,0x00,0x00,0x00,0x07,0xFF,0x0C,0x60,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x00,0x06,0x01,0xE0,0xFE,0x0F,0x00,0x78,0x00,0x00,0x00,0x00,0x07,0xFE,0x07,0xC0,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x01,0xFF,0xF8,0x00,0x0F,0xFF,0xC1,0xFF,0xF8,0x00,0x00,0x06,0x01,0xE0,0xFE,0x0E,0x00,0x38,0x00,0x00,0x00,0x00,0x01,0xF8,0x03,0x80,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFC,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,
   0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,
   0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x1F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x1F,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x3F,0xDF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x7F,0x9F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x7F,0x1F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0xFE,0x1F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0D,0x21,0x20,0x4F,0x8F,0x8F,0x9C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0xFC,0x1F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x21,0x26,0x4C,0xD9,0x98,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x01,0xF8,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x21,0x26,0x58,0xD8,0xDA,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x01,0xF0,0x1E,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x21,0x26,0x58,0xD8,0xDF,0x9C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,
   0x00,0x00,0x01,0xE1,0x1C,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x3F,0x29,0x58,0xD8,0xD9,0x9C,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,
   0x00,0x00,0x01,0xE3,0x18,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x21,0x29,0x48,0xD9,0x99,0x9C,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,
   0x00,0x00,0x03,0xF1,0x10,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x30,0xCD,0x8D,0x8D,0x9C,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0xFF,0x3F,0x9F,0xC7,0xE7,0xF3,0x80,0x00,
   0x00,0x00,0x03,0xF8,0x01,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x30,0xC7,0x07,0x0F,0x1C,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFC,0xFF,0x3F,0x9F,0xC7,0xE7,0xF3,0x80,0x00,
   0x00,0x00,0x03,0xFC,0x03,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1D,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFC,0xFF,0x3F,0x9F,0xC7,0xE7,0xF3,0x80,0x00,
   0x00,0x00,0x03,0xFC,0x07,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0xC4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFC,0xFF,0x3F,0x9F,0xC7,0xE7,0xF3,0x80,0x00,
   0x00,0x00,0x03,0xFE,0x0F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x46,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFC,0xFF,0x3F,0x9F,0xC7,0xE7,0xF3,0x80,0x00,
   0x00,0x00,0x03,0xFE,0x0F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFC,0xFF,0x3F,0x9F,0xC7,0xE7,0xF3,0x80,0x00,
   0x00,0x00,0x03,0xFC,0x07,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFC,0xFF,0x3F,0x9F,0xC7,0xE7,0xF3,0x80,0x00,
   0x00,0x00,0x03,0xF8,0x03,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFC,0xFF,0x3F,0x9F,0xC7,0xE7,0xF3,0x80,0x00,
   0x00,0x00,0x03,0xF0,0x01,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0xFF,0x3F,0x9F,0xC7,0xE7,0xF3,0x80,0x00,
   0x00,0x00,0x01,0xE1,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0xFF,0x3F,0x9F,0xC7,0xE7,0xF3,0x80,0x00,
   0x00,0x00,0x01,0xE3,0x18,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,
   0x00,0x00,0x01,0xF1,0x1C,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x31,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,
   0x00,0x00,0x01,0xF8,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0xC2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,
   0x00,0x00,0x01,0xFC,0x1F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0xFE,0x1F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,
   0x00,0x00,0x00,0xFE,0x1F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x7F,0x1F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x7F,0x9F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x3F,0xDF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x0F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x01,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
		
	}; 
//Varables for updating the display
int size_1,address;

//Variables for printing temperature and humidity
int dot_detect;

unsigned char temp_string[7],humi_string[7],temp_min_string[7],temp_max_string[7],humi_min_string[7],humi_max_string[7];

//Variables for epaper display
uint16_t HRES = 104;
uint16_t VRES = 212;

//For display dimentions
#define HEIGHT_PIXELS    (212)
#define WIDTH_PIXELS     (104)
#define WIDTH_MONO_BYTES (13)


//starting address for temp and humi fonts e.g dual temperature temp_1 indicates from which address to print character 1 for dual temperature

#define temp_1 6339
#define temp_2 6338
#define temp_3 6290
#define temp_4 6389
#define temp_5 6340
#define temp_6 6290
#define temp_7 6391
#define temp_8 6290
#define temp_9 6290
#define temp_0 6240
//#define temp_dot 1838
#define temp_dot 6325
#define temp_minus 7089


//starting address for printing min and max temp and humi fonts e.g temp_min_1 indicates from which address to print character 1 for dual temperature
#define temp_min_1 7608
#define temp_min_2 7608
#define temp_min_3 7608
#define temp_min_4 7608
#define temp_min_5 7608
#define temp_min_6 7608
#define temp_min_7 7609
#define temp_min_8 7608
#define temp_min_9 7608
#define temp_min_0 7608
//#define temp_min_dot1 238
#define temp_min_dot_1 7603
#define temp_minus_1 7858

//starting address for temp and humi fonts e.g dual temperature temp_1 indicates from which address to print character 1 for dual temperature

#define temp_single_1 5036
#define temp_single_2 4986
#define temp_single_3 4938
#define temp_single_4 5036
#define temp_single_5 4988
#define temp_single_6 4938
#define temp_single_7 5039
#define temp_single_8 4938
#define temp_single_9 4939
#define temp_single_0 4938
//#define temp_dot 1838
#define temp_single_dot 5018
#define temp_single_minus 6187


//starting address for printing min and max temp and humi fonts e.g temp_min_1 indicates from which address to print character 1 for single temperature
#define temp_single_min_1 2688
#define temp_single_min_2 2688
#define temp_single_min_3 2688
#define temp_single_min_4 2688
#define temp_single_min_5 2688
#define temp_single_min_6 2688
#define temp_single_min_7 2688
#define temp_single_min_8 2688
#define temp_single_min_9 2688
#define temp_single_min_0 2688
//#define temp_min_dot1 238
#define temp_single_min_dot_1 2683
#define temp_single_minus_1 2938



//starting address for printing year fonts e.g year_1 indicates from which address to print character 1
#define year_1 569
#define year_2 569
#define year_3 569
#define year_4 569
#define year_5 569
#define year_6 569
#define year_7 570
#define year_8 569
#define year_9 569
#define year_0 569


//starting address for printing month fonts e.g month_1 indicates from which address to print character 1
#define month_1 576
#define month_2 576
#define month_3 576
#define month_4 576
#define month_5 576
#define month_6 576
#define month_7 577
#define month_8 576
#define month_9 576
#define month_0 576

//starting address for printing date fonts e.g date_1 indicates from which address to print character 1
#define date_1 573
#define date_2 573
#define date_3 573
#define date_4 573
#define date_5 573
#define date_6 573
#define date_7 573
#define date_8 573
#define date_9 573
#define date_0 573

//starting address for printing hour fonts e.g hour_1 indicates from which address to print character 1
#define hour_1 564
#define hour_2 564
#define hour_3 564
#define hour_4 564
#define hour_5 564
#define hour_6 564
#define hour_7 564
#define hour_8 564
#define hour_9 564
#define hour_0 564

//starting address for printing minute fonts e.g minutes_1 indicates from which address to print character 1
#define min_1 561
#define min_2 561
#define min_3 561
#define min_4 561
#define min_5 561
#define min_6 561
#define min_7 561
#define min_8 561
#define min_9 561
#define min_0 561


//address difference from temp_1 address e.g delta_temp indicate how much we have to add in temp_1
//in order to print the value in temperature column, delta_humi  indicate how much we have to add in temp_1
//in order to print the value in humidity column
#define delta_temp_1 0
#define delta_humi -4000


//adress differnce for row location for printing date and time
#define delta_datetime_1 250


//adress differnce for row location for single temperature
#define delta_single_temp_1 0
#define delta_single_humi 0


//difference in address according to row delta_1 indicate column 1 delta_2 indicate column 2 this is for dual temperature current temperature
#define delta_1 0
#define delta_2 55
#define delta_3 110
#define delta_4 0
#define delta_5 168

//difference in address according to row delta_1 indicate column 1 delta_2 indicate column 2 this is for single temperature current temperature
#define delta_single_1 1
#define delta_single_2 58
#define delta_single_3 116
#define delta_single_4 1
#define delta_single_5 176

//difference in address according to row delta_year_1 indicate column 1 delta_year_2 indicate column 2
#define delta_year_1 0
#define delta_year_2 1

//difference in address according to row delta_month_1 indicate column 1 delta_month_2 indicate column 2
#define delta_month_1 0
#define delta_month_2 1

//difference in address according to row delta_date_1 indicate column 1 delta_date_2 indicate column 2
#define delta_date_1 0
#define delta_date_2 1

//difference in address according to row delta_hour_1 indicate column 1 delta_hour_2 indicate column 2
#define delta_hour_1 0
#define delta_hour_2 1

//difference in address according to row delta_minutes_1 indicate column 1 delta_min_2 indicate column 2
#define delta_minutes_1 0
#define delta_minutes_2 1

//difference in address to decide whether we want to print in min temp, max temp, min humi or max humi row for dual temperature
#define delta_min_temp 0
#define delta_max_temp -1350
#define delta_min_humi -3900
#define delta_max_humi -5250

//difference in address according to row delta_min_1 indicate row 1 delta_min_2 indicate row 2 for dual temperature
#define delta_min_1 -1
#define delta_min_2 1
#define delta_min_3 3
#define delta_min_4 -1
#define delta_min_5 6

//difference in address to decide whether we want to print in min temp, max temp, min humi or max humi row for single temperature
#define delta_single_min_temp 0
#define delta_single_max_temp 0
#define delta_single_min_humi 0
#define delta_single_max_humi 0

//difference in address according to row delta_min_1 indicate row 1 delta_min_2 indicate row 2 for single temperature
#define delta_single_min_1 0
#define delta_single_min_2 2
#define delta_single_min_3 4
#define delta_single_min_4 1
#define delta_single_min_5 8
#define delta_single_min_6 27
#define delta_single_min_7 29
#define delta_single_min_8 31
#define delta_single_min_9 28
#define delta_single_min_10 35

//For display function to let it know where to print i.e in temp, humi, min temp, max temp, min humi, max humi
#define dis_t 0
#define dis_h 1
#define dis_min_t 2
#define dis_max_t 3
#define dis_min_h 4
#define dis_max_h 5
#define dis_t_red 6
#define dis_min_t_red 7
#define dis_max_t_red 8
#define dis_min_h_red 9
#define dis_max_h_red 10
#define dis_h_red 11
#define dis_year 12
#define dis_month 13
#define dis_date 14
#define dis_hour 15
#define dis_min 16
#define dis_singlet 17
#define dis_singleh 18
#define dis_min_singlet 19
#define dis_max_singlet 20
#define dis_min_singleh 21
#define dis_max_singleh 22

//For epaper display
#define EPD_READY   28
#define EPD_RESET   27
#define EPD_DC      26
#define EPD_CS      25

//#define ePaper_RST_0  (digitalWrite(EPD_RESET, LOW))
//#define ePaper_RST_1  (digitalWrite(EPD_RESET, HIGH))
//#define ePaper_CS_0   (digitalWrite(EPD_CS, LOW))
//#define ePaper_CS_1   (digitalWrite(EPD_CS, HIGH))
//#define ePaper_DC_0   (digitalWrite(EPD_DC, LOW))
//#define ePaper_DC_1   (digitalWrite(EPD_DC, HIGH))

#define ePaper_RST_0 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_RESET)
#define ePaper_RST_1 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_SET)
#define ePaper_CS_0  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET)
#define ePaper_CS_1  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET)
#define ePaper_DC_0  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_RESET)
#define ePaper_DC_1  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_SET)


#define Red_1BPP Mono_1BPP 



int double_to_string(double value,char *string_1); 

void display_status();

//void update_display_black(const uint16_t *black_address,const uint8_t *black_value,int size_black);
//void update_display_red(const uint16_t *red_address,const uint8_t *red_value,int size_red);
void empty_array();
void batt_empty();
void batt_80();
void batt_60();
void batt_full();
void id();
void demo();
void min_max();
void degree_f();
void degree_single_f();
void degree_f_1();
void degree_f_red();
void degree_c();
void degree_single_c();
void degree_c_1();
void degree_c_red();
void percentage_symbol();
void percentage_symbol_1();
void percentage_symbol_red();

void wifi_symbol_3();
void wifi_symbol_2();
void wifi_symbol_1();
void RF_symbol();
void constant();
void update_display_black(const uint16_t *black_address,const uint8_t *black_value,int size_black,int offset);
void update_display_red(const uint16_t *red_address,const uint8_t *red_value,int size_red,int offset);

void one(int offset,int delta,int torh);
void two(int offset,int delta,int torh);
void three(int offset,int delta,int torh);
void four(int offset,int delta,int torh);
void five(int offset,int delta,int torh);
void six(int offset,int delta,int torh);
void seven(int offset,int delta,int torh);
void eight(int offset,int delta,int torh);
void nine(int offset,int delta,int torh);
void zero(int offset,int delta,int torh);
void minus(int offset,int delta,int torh);
void dot(int offset,int delta,int torh);

void single_one(int offset,int delta,int torh);
void single_two(int offset,int delta,int torh);
void single_three(int offset,int delta,int torh);
void single_four(int offset,int delta,int torh);
void single_five(int offset,int delta,int torh);
void single_six(int offset,int delta,int torh);
void single_seven(int offset,int delta,int torh);
void single_eight(int offset,int delta,int torh);
void single_nine(int offset,int delta,int torh);
void single_zero(int offset,int delta,int torh);
void single_minus(int offset,int delta,int torh);
void single_dot(int offset,int delta,int torh);

void year_one(int offset,int delta,int torh);
void year_two(int offset,int delta,int torh);
void year_three(int offset,int delta,int torh);
void year_four(int offset,int delta,int torh);
void year_five(int offset,int delta,int torh);
void year_six(int offset,int delta,int torh);
void year_seven(int offset,int delta,int torh);
void year_eight(int offset,int delta,int torh);
void year_nine(int offset,int delta,int torh);
void year_zero(int offset,int delta,int torh);

void month_one(int offset,int delta,int torh);
void month_two(int offset,int delta,int torh);
void month_three(int offset,int delta,int torh);
void month_four(int offset,int delta,int torh);
void month_five(int offset,int delta,int torh);
void month_six(int offset,int delta,int torh);
void month_seven(int offset,int delta,int torh);
void month_eight(int offset,int delta,int torh);
void month_nine(int offset,int delta,int torh);
void month_zero(int offset,int delta,int torh);

void date_one(int offset,int delta,int torh);
void date_two(int offset,int delta,int torh);
void date_three(int offset,int delta,int torh);
void date_four(int offset,int delta,int torh);
void date_five(int offset,int delta,int torh);
void date_six(int offset,int delta,int torh);
void date_seven(int offset,int delta,int torh);
void date_eight(int offset,int delta,int torh);
void date_nine(int offset,int delta,int torh);
void date_zero(int offset,int delta,int torh);

void hour_one(int offset,int delta,int torh);
void hour_two(int offset,int delta,int torh);
void hour_three(int offset,int delta,int torh);
void hour_four(int offset,int delta,int torh);
void hour_five(int offset,int delta,int torh);
void hour_six(int offset,int delta,int torh);
void hour_seven(int offset,int delta,int torh);
void hour_eight(int offset,int delta,int torh);
void hour_nine(int offset,int delta,int torh);
void hour_zero(int offset,int delta,int torh);

void min_one(int offset,int delta,int torh);
void min_two(int offset,int delta,int torh);
void min_three(int offset,int delta,int torh);
void min_four(int offset,int delta,int torh);
void min_five(int offset,int delta,int torh);
void min_six(int offset,int delta,int torh);
void min_seven(int offset,int delta,int torh);
void min_eight(int offset,int delta,int torh);
void min_nine(int offset,int delta,int torh);
void min_zero(int offset,int delta,int torh);


void one_red(int offset,int delta,int torh);
void two_red(int offset,int delta,int torh);
void three_red(int offset,int delta,int torh);
void four_red(int offset,int delta,int torh);
void five_red(int offset,int delta,int torh);
void six_red(int offset,int delta,int torh);
void seven_red(int offset,int delta,int torh);
void eight_red(int offset,int delta,int torh);
void nine_red(int offset,int delta,int torh);
void zero_red(int offset,int delta,int torh);
void minus_red(int offset,int delta,int torh);
void dot_red(int offset,int delta,int torh);

void temp_min_one(int offset,int delta,int torh);
void temp_min_two(int offset,int delta,int torh);
void temp_min_three(int offset,int delta,int torh);
void temp_min_four(int offset,int delta,int torh);
void temp_min_five(int offset,int delta,int torh);
void temp_min_six(int offset,int delta,int torh);
void temp_min_seven(int offset,int delta,int torh);
void temp_min_eight(int offset,int delta,int torh);
void temp_min_nine(int offset,int delta,int torh);
void temp_min_zero(int offset,int delta,int torh);
void temp_min_minus(int offset,int delta,int torh);
void temp_min_dot(int offset,int delta,int torh);

void single_temp_min_one(int offset,int delta,int torh);
void single_temp_min_two(int offset,int delta,int torh);
void single_temp_min_three(int offset,int delta,int torh);
void single_temp_min_four(int offset,int delta,int torh);
void single_temp_min_five(int offset,int delta,int torh);
void single_temp_min_six(int offset,int delta,int torh);
void single_temp_min_seven(int offset,int delta,int torh);
void single_temp_min_eight(int offset,int delta,int torh);
void single_temp_min_nine(int offset,int delta,int torh);
void single_temp_min_zero(int offset,int delta,int torh);
void single_temp_min_minus(int offset,int delta,int torh);
void single_temp_min_dot(int offset,int delta,int torh);

void temp_min_one_red(int offset,int delta,int torh);
void temp_min_two_red(int offset,int delta,int torh);
void temp_min_three_red(int offset,int delta,int torh);
void temp_min_four_red(int offset,int delta,int torh);
void temp_min_five_red(int offset,int delta,int torh);
void temp_min_six_red(int offset,int delta,int torh);
void temp_min_seven_red(int offset,int delta,int torh);
void temp_min_eight_red(int offset,int delta,int torh);
void temp_min_nine_red(int offset,int delta,int torh);
void temp_min_zero_red(int offset,int delta,int torh);
void temp_min_minus_red(int offset,int delta,int torh);
void temp_min_dot_red(int offset,int delta,int torh);

void degree_symbol();
void f_symbol();
void min_max_num();

//For displaying temp, humi, min/max temp, min/max humi
void display_temp(double yo_10);
void display_humi(double yo_11);
void display_epaper(int category,int x_1,char value);
void display_min_temp(double yo_12);
void display_max_temp(double yo_13);
void display_min_humi(double yo_14);
void display_max_humi(double yo_15);
void display_temp_red(double yo_16);
void display_min_temp_red(double yo_17);
void display_max_temp_red(double yo_13);
void display_min_humi_red(double yo_14);
void display_max_humi_red(double yo_15);
void display_humi_red(double yo_11);

void display_singletemp(double yo_18);
void display_singlehumi(double yo_19);
void display_min_singletemp(double yo_20);
void display_max_singletemp(double yo_21);
void display_min_singlehumi(double yo_22);
void display_max_singlehumi(double yo_23);


const uint16_t  constant_address[]  ={812,815,816,817,828,829,830,831,832,833,834,835,836,837,838,839,840,862,866,867,878,879,880,881,882,883,884,885,886,887,888,889,890,916,917,928,929,930,931,932,933,934,935,936,937,938,939,940,966,967,978,979,980,981,982,983,984,985,986,987,988,989,990,1016,1017,1020,1021,1024,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1062,1066,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1090,1112,1115,1116,1117,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1166,1179,1180,1181,1185,1186,1187,1190,1216,1229,1230,1231,1235,1236,1237,1240,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9616,9617,9618,9619,9620,9621,9622,9623,9624,9625,9626,9627,9628,9629,9630,9631,9632,9633,9634,9635,9636,9637,9638,9639,9640,9641,9642,9643,9644,9645,9646,9647,9648,9651,9652,9653,9654,9655,9656,9657,9658,9659,9660,9661,9662,9663,9664,9665,9666,9667,9668,9669,9670,9671,9672,9673,9674,9675,9676,9677,9678,9679,9680,9681,9682,9683,9684,9685,9686,9687,9688,9689,9690,9691,9692,9693,9694,9695,9696,9697,9698,9701,9702,9703,9704,9705,9706,9707,9708,9709,9710,9711,9712,9713,9714,9715,9716,9717,9718,9719,9720,9721,9722,9723,9724,9725,9726,9727,9728,9729,9730,9731,9732,9733,9734,9735,9736,9737,9738,9739,9740,9741,9742,9743,9744,9745,9746,9747,9748,10003,10053,10103,10153,10203,10253,10302,10303,10304,10353,10354,10403,10404,10453,10503,10553,10603,10653,10703,10753,10754,10803,10804,10852,10853,10854,10903,10953,11003,11053,11103,11153,11203};
const uint8_t constant_value[]  ={56,3,199,224,99,15,128,241,240,124,248,227,7,135,207,207,224,56,230,48,99,24,192,57,28,192,142,115,1,204,12,96,96,230,48,99,48,96,56,12,224,6,59,1,206,12,96,96,230,112,99,48,96,57,252,252,254,31,1,207,204,224,96,231,224,1,224,30,99,48,96,57,140,28,198,63,1,193,207,192,96,56,230,103,48,96,57,140,12,198,115,1,192,204,96,56,3,243,240,59,48,96,252,240,248,120,99,7,239,135,224,96,224,24,192,56,115,1,192,96,224,15,128,56,63,1,192,96,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240,4,12,20,36,68,196,1,132,32,196,64,100,128,37,22,12,12,30,55,100,128,196,192,1,132,96,132,68,36,20,12,12,4};

const uint16_t  constant_dualchannel_address[]  ={2361,2362,2363,2364,2365,2366,2410,2411,2412,2413,2414,2415,2416,2460,2461,2462,2463,2464,2465,2466,2510,2511,2512,2513,2514,2515,2516,2561,2562,2563,2564,2565,2566,2611,2612,2613,2614,2615,2616,2662,2663,2664,2665,2666,2711,2712,2713,2714,2715,2716,2761,2762,2763,2764,2765,2766,2810,2811,2812,2813,2814,2815,2816,2860,2861,2862,2863,2864,2865,2866,2910,2911,2912,2913,2914,2915,2916,2961,2962,2963,2964,2965,2966,3662,3663,3664,3665,3666,3710,3711,3712,3713,3714,3715,3716,3760,3761,3762,3763,3764,3765,3766,3810,3811,3812,3813,3814,3815,3816,3862,3863,3864,3865,3866,3912,3913,3914,3915,3916,3962,3963,3964,3965,3966,3994,3995,3996,3997,4012,4013,4014,4015,4016,4044,4045,4046,4047,4062,4063,4064,4065,4066,4094,4095,4096,4097,4110,4111,4112,4113,4114,4115,4116,4144,4145,4146,4147,4160,4161,4162,4163,4164,4165,4166,4194,4195,4196,4197,4210,4211,4212,4213,4214,4215,4216,4244,4245,4246,4247,4262,4263,4264,4265,4266,4294,4295,4296,4297,4344,4345,4346,4347,4394,4395,4396,4397,6261,6262,6263,6264,6265,6266,6310,6311,6312,6313,6314,6315,6316,6360,6361,6362,6363,6364,6365,6366,6410,6411,6412,6413,6414,6415,6416,6461,6462,6463,6464,6465,6466,6511,6512,6513,6514,6515,6516,6562,6563,6564,6565,6566,6611,6612,6613,6614,6615,6616,6661,6662,6663,6664,6665,6666,6710,6711,6712,6713,6714,6715,6716,6760,6761,6762,6763,6764,6765,6766,6810,6811,6812,6813,6814,6815,6816,6861,6862,6863,6864,6865,6866,7562,7563,7564,7565,7566,7610,7611,7612,7613,7614,7615,7616,7660,7661,7662,7663,7664,7665,7666,7710,7711,7712,7713,7714,7715,7716,7762,7763,7764,7765,7766,7812,7813,7814,7815,7816,7862,7863,7864,7865,7866,7912,7913,7914,7915,7916,7944,7945,7946,7947,7962,7963,7964,7965,7966,7994,7995,7996,7997,8010,8011,8012,8013,8014,8015,8016,8044,8045,8046,8047,8060,8061,8062,8063,8064,8065,8066,8094,8095,8096,8097,8110,8111,8112,8113,8114,8115,8116,8144,8145,8146,8147,8162,8163,8164,8165,8166,8194,8195,8196,8197,8244,8245,8246,8247,8294,8295,8296,8297,8344,8345,8346,8347};
const uint8_t constant_dualchannel_value[]  ={14,7,120,28,112,28,3,143,15,56,28,112,28,3,135,158,60,28,112,28,3,131,156,31,248,115,156,3,248,31,248,115,156,1,248,30,56,119,220,240,14,112,119,220,1,248,14,112,126,252,1,248,15,224,126,252,3,131,188,7,224,124,124,3,135,158,7,224,124,124,3,143,14,3,192,120,60,14,15,3,192,120,60,224,227,252,112,28,3,128,240,227,252,112,28,3,128,240,224,240,112,28,3,128,248,224,240,115,156,248,224,240,115,156,252,224,240,119,220,236,224,240,119,220,254,7,28,252,238,224,240,126,252,28,7,28,134,230,224,240,126,252,56,7,28,7,3,128,227,224,240,124,124,112,7,28,3,3,128,227,224,240,124,124,224,7,252,3,3,128,225,227,252,120,60,224,7,28,3,225,227,252,120,60,192,7,28,7,228,7,28,134,124,7,28,252,14,7,120,28,112,28,3,143,15,56,28,112,28,3,135,158,60,28,112,28,3,131,156,31,248,115,156,3,248,31,248,115,156,1,248,30,56,119,220,240,14,112,119,220,1,248,14,112,126,252,1,248,15,224,126,252,3,131,188,7,224,124,124,3,135,158,7,224,124,124,3,143,14,3,192,120,60,14,15,3,192,120,60,224,227,252,112,28,3,128,240,227,252,112,28,3,128,240,224,240,112,28,3,128,248,224,240,115,156,248,224,240,115,156,252,224,240,119,220,236,224,240,119,220,238,224,240,126,252,252,7,28,252,230,224,240,126,252,48,7,28,134,3,128,227,224,240,124,124,48,7,28,7,3,128,227,224,240,124,124,48,7,28,3,3,128,225,227,252,120,60,48,7,252,3,225,227,252,120,60,48,7,28,3,48,7,28,7,60,7,28,134,48,7,28,252};

const uint16_t  constant_singlechannelCH1_address[]  ={2613,2614,2615,2616,2617,2618,2641,2642,2643,2644,2645,2662,2663,2664,2665,2666,2667,2668,2690,2691,2692,2693,2694,2695,2712,2713,2714,2715,2716,2717,2718,2740,2741,2742,2743,2744,2745,2762,2763,2764,2765,2766,2767,2768,2790,2791,2792,2793,2794,2795,2813,2814,2815,2816,2817,2818,2841,2842,2843,2844,2845,2863,2864,2865,2866,2867,2868,2891,2892,2893,2894,2895,2914,2915,2916,2917,2918,2941,2942,2943,2944,2945,2963,2964,2965,2966,2967,2968,2991,2992,2993,2994,2995,3013,3014,3015,3016,3017,3018,3041,3042,3043,3044,3045,3062,3063,3064,3065,3066,3067,3068,3090,3091,3092,3093,3094,3095,3112,3113,3114,3115,3116,3117,3118,3140,3141,3142,3143,3144,3145,3162,3163,3164,3165,3166,3167,3168,3190,3191,3192,3193,3194,3195,3213,3214,3215,3216,3217,3218,3241,3242,3243,3244,3245,7292,7293,7294,7295,7296,7297,7342,7343,7344,7345,7346,7347,7392,7393,7394,7395,7396,7397,7442,7443,7444,7445,7446,7447,7492,7493,7494,7495,7496,7497,7542,7543,7544,7545,7546,7547,7592,7593,7594,7595,7596,7597,7642,7643,7644,7645,7646,7647,7692,7693,7694,7695,7696,7697,7742,7743,7744,7745,7746,7747,7792,7793,7794,7795,7796,7797,7842,7843,7844,7845,7846,7847,7892,7893,7894,7895,7896,7897};
const uint8_t constant_singlechannelCH1_value[]  ={14,7,120,28,112,28,56,56,255,28,7,3,143,15,56,28,112,28,224,60,56,255,28,7,3,135,158,60,28,112,28,224,60,56,60,28,7,3,131,156,31,248,115,156,224,62,56,60,28,231,3,248,31,248,115,156,62,56,60,28,231,1,248,30,56,119,220,63,56,60,29,247,240,14,112,119,220,59,56,60,29,247,1,248,14,112,126,252,59,184,60,31,191,1,248,15,224,126,252,57,184,60,31,191,3,131,188,7,224,124,124,224,56,248,60,31,31,3,135,158,7,224,124,124,224,56,248,60,31,31,3,143,14,3,192,120,60,224,56,120,255,30,15,14,15,3,192,120,60,56,120,255,30,15,15,240,1,193,193,240,15,240,1,193,199,252,3,192,1,193,198,30,3,192,1,193,196,14,3,192,1,193,192,15,3,192,1,193,192,7,3,192,1,255,192,7,3,192,1,255,192,7,3,192,1,193,192,15,3,240,1,193,196,14,3,240,1,193,198,30,3,192,1,193,199,252,3,128,1,193,195,240};	

const uint16_t  constant_singlechannelCH2_address[]  ={2613,2614,2615,2616,2617,2618,2641,2642,2643,2644,2645,2662,2663,2664,2665,2666,2667,2668,2690,2691,2692,2693,2694,2695,2712,2713,2714,2715,2716,2717,2718,2740,2741,2742,2743,2744,2745,2762,2763,2764,2765,2766,2767,2768,2790,2791,2792,2793,2794,2795,2813,2814,2815,2816,2817,2818,2841,2842,2843,2844,2845,2863,2864,2865,2866,2867,2868,2891,2892,2893,2894,2895,2914,2915,2916,2917,2918,2941,2942,2943,2944,2945,2963,2964,2965,2966,2967,2968,2991,2992,2993,2994,2995,3013,3014,3015,3016,3017,3018,3041,3042,3043,3044,3045,3062,3063,3064,3065,3066,3067,3068,3090,3091,3092,3093,3094,3095,3112,3113,3114,3115,3116,3117,3118,3140,3141,3142,3143,3144,3145,3162,3163,3164,3165,3166,3167,3168,3190,3191,3192,3193,3194,3195,3213,3214,3215,3216,3217,3218,3241,3242,3243,3244,3245,7292,7293,7294,7295,7296,7297,7342,7343,7344,7345,7346,7347,7393,7394,7395,7396,7397,7442,7443,7444,7445,7446,7447,7492,7493,7494,7495,7496,7497,7542,7543,7544,7545,7546,7547,7592,7594,7595,7596,7597,7642,7644,7645,7646,7647,7692,7694,7695,7696,7697,7742,7743,7744,7745,7746,7747,7792,7793,7794,7795,7796,7797,7842,7843,7844,7845,7846,7847,7892,7893,7894,7895,7896,7897};
const uint8_t constant_singlechannelCH2_value[]  ={14,7,120,28,112,28,56,56,255,28,7,3,143,15,56,28,112,28,224,60,56,255,28,7,3,135,158,60,28,112,28,224,60,56,60,28,7,3,131,156,31,248,115,156,224,62,56,60,28,231,3,248,31,248,115,156,62,56,60,28,231,1,248,30,56,119,220,63,56,60,29,247,240,14,112,119,220,59,56,60,29,247,1,248,14,112,126,252,59,184,60,31,191,1,248,15,224,126,252,57,184,60,31,191,3,131,188,7,224,124,124,224,56,248,60,31,31,3,135,158,7,224,124,124,224,56,248,60,31,31,3,143,14,3,192,120,60,224,56,120,255,30,15,14,15,3,192,120,60,56,120,255,30,15,31,248,1,193,193,240,31,248,1,193,199,252,240,1,193,198,30,1,224,1,193,196,14,3,192,1,193,192,15,7,128,1,193,192,7,15,1,255,192,7,14,1,255,192,7,14,1,193,192,15,14,8,1,193,196,14,15,24,1,193,198,30,7,248,1,193,199,252,3,240,1,193,195,240};	
	
const uint16_t  const_dataonapp_address[]  ={812,815,816,817,828,829,830,831,832,833,834,835,836,837,838,839,840,862,866,867,878,879,880,881,882,883,884,885,886,887,888,889,890,916,917,928,929,930,931,932,933,934,935,936,937,938,939,940,966,967,978,979,980,981,982,983,984,985,986,987,988,989,990,1016,1017,1020,1021,1024,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1062,1066,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1090,1112,1115,1116,1117,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1166,1179,1180,1181,1185,1186,1187,1190,1216,1229,1230,1231,1235,1236,1237,1240,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9616,9617,9618,9619,9620,9621,9622,9623,9624,9625,9626,9627,9628,9629,9630,9631,9632,9633,9634,9635,9636,9637,9638,9639,9640,9641,9642,9643,9644,9645,9646,9647,9648,9651,9652,9653,9654,9655,9656,9657,9658,9659,9660,9661,9662,9663,9664,9665,9666,9667,9668,9669,9670,9671,9672,9673,9674,9675,9676,9677,9678,9679,9680,9681,9682,9683,9684,9685,9686,9687,9688,9689,9690,9691,9692,9693,9694,9695,9696,9697,9698,9701,9702,9703,9704,9705,9706,9707,9708,9709,9710,9711,9712,9713,9714,9715,9716,9717,9718,9719,9720,9721,9722,9723,9724,9725,9726,9727,9728,9729,9730,9731,9732,9733,9734,9735,9736,9737,9738,9739,9740,9741,9742,9743,9744,9745,9746,9747,9748,10003,10053,10054,10102,10103,10104,10152,10153,10154,10202,10203,10204,10252,10253,10254,10302,10303,10304,10352,10353,10354,10402,10403,10404,10452,10453,10454,10502,10503,10504,10552,10553,10554,10602,10603,10604,10652,10653,10654,10702,10703,10704,10752,10753,10754,10802,10803,10804,10852,10853,10854,10902,10903,10904,10952,10953,10954,11002,11003,11004,11052,11053,11054,11102,11103,11104,11152,11153,11154,11202,11203,11204,11252,11253,11254,11303,11304,11353};
const uint8_t const_dataonapp_value[]  ={56,3,199,224,99,15,128,241,240,124,248,227,7,135,207,207,224,56,230,48,99,24,192,57,28,192,142,115,1,204,12,96,96,230,48,99,48,96,56,12,224,6,59,1,206,12,96,96,230,112,99,48,96,57,252,252,254,31,1,207,204,224,96,231,224,1,224,30,99,48,96,57,140,28,198,63,1,193,207,192,96,56,230,103,48,96,57,140,12,198,115,1,192,204,96,56,3,243,240,59,48,96,252,240,248,120,99,7,239,135,224,96,224,24,192,56,115,1,192,96,224,15,128,56,63,1,192,96,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240,30,127,192,1,255,224,1,251,240,3,243,240,3,227,248,7,195,248,7,131,248,7,147,184,7,19,60,7,146,124,7,192,124,7,224,252,7,225,252,7,225,252,7,224,252,7,192,252,7,146,124,7,19,60,7,147,184,7,131,248,7,195,248,3,227,248,3,243,240,1,251,240,1,255,224,127,192,31};
	
const uint16_t BLE_HID_address[] = {10023,10024,10072,10073,10074,10122,10123,10124,10172,10173,10174,10222,10223,10224,10272,10273,10274,10322,10323,10324,10372,10373,10374,10422,10423,10424,10472,10473,10474,10475,10522,10523,10524,10525,10572,10573,10574,10575,10622,10623,10624,10625,10672,10673,10674,10675,10722,10723,10724,10725,10772,10773,10774,10775,10822,10823,10824,10825,10872,10873,10874,10875,10922,10923,10924,10925,10972,10973,10974,10975,11022,11023,11024,11025,11072,11073,11074,11075,11122,11123,11124,11125,11172,11173,11174,11175,11222,11223,11224,11272,11273,11274,11322,11323,11324,11372,11373,11374,11422,11423,11424,11472,11473,11474,11522,11523,11524,11573,11574,11623};
const uint8_t BLE_HID_value[] = {31,128,1,255,240,3,255,252,7,255,254,31,255,254,31,249,254,31,241,255,31,241,255,31,225,255,63,145,255,192,63,145,255,192,63,113,239,192,63,145,207,192,63,145,223,192,63,225,127,192,63,224,127,192,63,240,255,192,63,224,255,192,63,224,127,192,63,145,159,192,63,177,223,192,63,177,207,192,63,145,255,192,63,193,255,192,31,225,255,31,241,255,31,241,255,31,255,254,7,255,254,7,255,252,3,255,248,255,240,14};
		
const uint16_t  RF_symbol_address[]  ={10227,10271,10272,10273,10274,10275,10276,10277,10321,10322,10323,10324,10325,10326,10327,10371,10372,10373,10374,10375,10376,10377,10421,10422,10423,10424,10425,10426,10427,10471,10472,10473,10474,10475,10476,10477,10478,10521,10522,10523,10524,10525,10526,10527,10528,10572,10573,10574,10575,10576,10577,10578,10622,10623,10624,10625,10626,10627,10628,10677,10678,10727,10728,10777,10778,10827,10828,10877,10926,10927,10976,10977,11026,11027,11076,11126,11127,11176,11177,11226,11227,11276,11326,11376,11377,11378,11427};
const uint8_t RF_symbol_value[]  ={28,13,33,32,79,143,143,156,3,33,38,76,217,152,28,2,33,38,88,216,218,28,4,33,38,88,216,223,156,8,63,41,88,216,217,156,96,15,33,41,72,217,153,156,48,33,48,205,141,141,156,24,33,48,199,7,15,28,8,29,132,28,196,28,70,28,96,62,34,62,34,62,34,28,33,49,128,16,194,8,62,12,6,3,128,192,255};

const uint16_t  wifi_symbol_3_address[]  ={10174,10175,10224,10225,10274,10275,10324,10325,10374,10375,10424,10425,10474,10475,10524,10525,10573,10574,10575,10576,10623,10624,10625,10626,10674,10675,10724,10725,10773,10774,10775,10776,10823,10824,10825,10826,10873,10876,10923,10926,10972,10973,10974,10975,10976,10977,11022,11023,11024,11025,11026,11027,11072,11073,11074,11075,11076,11077,11122,11123,11124,11125,11126,11127,11172,11173,11174,11175,11176,11177,11222,11223,11226,11227,11273,11276,11323,11324,11325,11326,11373,11374,11375,11376,11423,11424,11425,11426,11473,11474,11475,11476,11524,11525};
const uint8_t wifi_symbol_3_value[]  ={3,192,7,224,7,224,15,240,7,224,7,224,3,192,192,3,1,224,7,128,1,240,15,128,255,255,127,254,56,63,252,28,60,7,224,60,62,124,31,248,4,15,224,7,240,32,15,7,254,127,224,240,15,129,255,255,129,240,7,192,127,254,3,224,3,224,15,240,7,192,1,248,31,128,254,127,127,128,1,254,31,254,127,248,7,255,255,224,1,255,255,128,31,248};	

const uint16_t  wifi_symbol_2_address[]  ={10174,10175,10224,10225,10274,10275,10324,10325,10374,10375,10424,10425,10474,10475,10524,10525,10573,10574,10575,10576,10623,10624,10625,10626,10674,10675,10724,10725,10773,10774,10775,10776,10823,10824,10825,10826,10873,10876,10923,10926,10973,10974,10975,10976,11023,11024,11025,11026,11073,11074,11075,11076,11124,11125,11174,11175};
const uint8_t wifi_symbol_2_value[]  ={3,192,7,224,7,224,15,240,7,224,7,224,3,192,192,3,1,224,7,128,1,240,15,128,255,255,127,254,56,63,252,28,60,7,224,60,62,124,31,248,15,224,7,240,7,254,127,224,1,255,255,128,127,254,15,240};	

const uint16_t  wifi_symbol_1_address[]  ={10174,10175,10224,10225,10274,10275,10324,10325,10374,10375,10424,10425,10474,10475,10524,10525,10573,10574,10575,10576,10623,10624,10625,10626,10674,10675,10724,10725,10774,10775,10824,10825};
const uint8_t wifi_symbol_1_value[]  ={3,192,7,224,7,224,15,240,7,224,7,224,3,192,192,3,1,224,7,128,1,240,15,128,255,255,127,254,63,252,7,224};	

	
const uint16_t  batt_full_address[]  ={10291,10292,10293,10294,10295,10296,10297,10298,10341,10342,10343,10344,10345,10346,10347,10348,10391,10392,10393,10394,10395,10396,10397,10398,10441,10447,10448,10491,10497,10498,10541,10547,10548,10591,10592,10593,10594,10595,10596,10597,10598,10640,10641,10642,10643,10644,10645,10646,10647,10648,10690,10691,10692,10693,10694,10695,10696,10697,10698,10740,10741,10742,10743,10744,10745,10746,10747,10748,10790,10791,10792,10793,10794,10795,10796,10797,10798,10840,10841,10842,10843,10844,10845,10846,10847,10848,10890,10891,10892,10893,10894,10895,10896,10897,10898,10940,10941,10942,10943,10944,10945,10946,10947,10948,10991,10992,10993,10994,10995,10996,10997,10998,11041,11042,11043,11044,11045,11046,11047,11048,11091,11097,11098,11141,11147,11148,11191,11197,11198,11241,11242,11243,11244,11245,11246,11247,11248,11291,11292,11293,11294,11295,11296,11297,11298};
const uint8_t batt_full_value[]  ={63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128,60,3,128,60,3,128,60,3,128,60,127,63,159,207,231,243,128,7,252,127,63,159,207,231,243,128,7,252,127,63,159,207,231,243,128,7,252,127,63,159,207,231,243,128,7,252,127,63,159,207,231,243,128,7,252,127,63,159,207,231,243,128,7,252,127,63,159,207,231,243,128,7,252,127,63,159,207,231,243,128,60,127,63,159,207,231,243,128,60,127,63,159,207,231,243,128,60,3,128,60,3,128,60,3,128,63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128};

const uint16_t  batt_80_address[]  ={10291,10292,10293,10294,10295,10296,10297,10298,10341,10342,10343,10344,10345,10346,10347,10348,10391,10392,10393,10394,10395,10396,10397,10398,10441,10447,10448,10491,10497,10498,10541,10547,10548,10591,10593,10594,10595,10596,10597,10598,10640,10641,10643,10644,10645,10646,10647,10648,10690,10691,10693,10694,10695,10696,10697,10698,10740,10741,10743,10744,10745,10746,10747,10748,10790,10791,10793,10794,10795,10796,10797,10798,10840,10841,10843,10844,10845,10846,10847,10848,10890,10891,10893,10894,10895,10896,10897,10898,10940,10941,10943,10944,10945,10946,10947,10948,10991,10993,10994,10995,10996,10997,10998,11041,11043,11044,11045,11046,11047,11048,11091,11097,11098,11141,11147,11148,11191,11197,11198,11241,11242,11243,11244,11245,11246,11247,11248,11291,11292,11293,11294,11295,11296,11297,11298};
const uint8_t batt_80_value[]  ={63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128,60,3,128,60,3,128,60,3,128,60,63,159,207,231,243,128,7,252,63,159,207,231,243,128,7,252,63,159,207,231,243,128,7,252,63,159,207,231,243,128,7,252,63,159,207,231,243,128,7,252,63,159,207,231,243,128,7,252,63,159,207,231,243,128,7,252,63,159,207,231,243,128,60,63,159,207,231,243,128,60,63,159,207,231,243,128,60,3,128,60,3,128,60,3,128,63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128};

const uint16_t  batt_60_address[]  ={10291,10292,10293,10294,10295,10296,10297,10298,10341,10342,10343,10344,10345,10346,10347,10348,10391,10392,10393,10394,10395,10396,10397,10398,10441,10447,10448,10491,10497,10498,10541,10547,10548,10591,10594,10595,10596,10597,10598,10640,10641,10644,10645,10646,10647,10648,10690,10691,10694,10695,10696,10697,10698,10740,10741,10744,10745,10746,10747,10748,10790,10791,10794,10795,10796,10797,10798,10840,10841,10844,10845,10846,10847,10848,10890,10891,10894,10895,10896,10897,10898,10940,10941,10944,10945,10946,10947,10948,10991,10994,10995,10996,10997,10998,11041,11044,11045,11046,11047,11048,11091,11097,11098,11141,11147,11148,11191,11197,11198,11241,11242,11243,11244,11245,11246,11247,11248,11291,11292,11293,11294,11295,11296,11297,11298};
const uint8_t batt_60_value[]  ={63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128,60,3,128,60,3,128,60,3,128,60,31,207,231,243,128,7,252,31,207,231,243,128,7,252,31,207,231,243,128,7,252,31,207,231,243,128,7,252,31,207,231,243,128,7,252,31,207,231,243,128,7,252,31,207,231,243,128,7,252,31,207,231,243,128,60,31,207,231,243,128,60,31,207,231,243,128,60,3,128,60,3,128,60,3,128,63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128};

const uint16_t  batt_40_address[]  ={10291,10292,10293,10294,10295,10296,10297,10298,10341,10342,10343,10344,10345,10346,10347,10348,10391,10392,10393,10394,10395,10396,10397,10398,10441,10447,10448,10491,10497,10498,10541,10547,10548,10591,10595,10596,10597,10598,10640,10641,10645,10646,10647,10648,10690,10691,10695,10696,10697,10698,10740,10741,10745,10746,10747,10748,10790,10791,10795,10796,10797,10798,10840,10841,10845,10846,10847,10848,10890,10891,10895,10896,10897,10898,10940,10941,10945,10946,10947,10948,10991,10995,10996,10997,10998,11041,11045,11046,11047,11048,11091,11097,11098,11141,11147,11148,11191,11197,11198,11241,11242,11243,11244,11245,11246,11247,11248,11291,11292,11293,11294,11295,11296,11297,11298};
const uint8_t batt_40_value[]  ={63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128,60,3,128,60,3,128,60,3,128,60,15,231,243,128,7,252,15,231,243,128,7,252,15,231,243,128,7,252,15,231,243,128,7,252,15,231,243,128,7,252,15,231,243,128,7,252,15,231,243,128,7,252,15,231,243,128,60,15,231,243,128,60,15,231,243,128,60,3,128,60,3,128,60,3,128,63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128};

const uint16_t batt_empty_address[]   = {10291,10292,10293,10294,10295,10296,10297,10298,10341,10342,10343,10344,10345,10346,10347,10348,10391,10392,10393,10394,10395,10396,10397,10398,10441,10447,10448,10491,10497,10498,10541,10547,10548,10591,10596,10597,10598,10640,10641,10646,10647,10648,10690,10691,10696,10697,10698,10740,10741,10746,10747,10748,10790,10791,10796,10797,10798,10840,10841,10846,10847,10848,10890,10891,10896,10897,10898,10940,10941,10946,10947,10948,10991,10996,10997,10998,11041,11046,11047,11048,11091,11097,11098,11141,11147,11148,11191,11197,11198,11241,11242,11243,11244,11245,11246,11247,11248,11291,11292,11293,11294,11295,11296,11297,11298};
const uint8_t batt_empty_value[]   = {63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128,60,3,128,60,3,128,60,3,128,60,7,243,128,7,252,7,243,128,7,252,7,243,128,7,252,7,243,128,7,252,7,243,128,7,252,7,243,128,7,252,7,243,128,7,252,7,243,128,60,7,243,128,60,7,243,128,60,3,128,60,3,128,60,3,128,63,255,255,255,255,255,255,128,63,255,255,255,255,255,255,128};

const uint16_t  id_address[]  ={209,222,234,235,247,248,260,261,312,313,325,326,338,339,351,352,364,365,377,378,416,417,429,430,442,443,455,456,468,469,481,482,520,521,533,534,546,547,559,560,572,573,585,586,624,625,637,638,650,651,663,664,676,677,689,690,729,742,754,755,767,768,780,781,832,833,845,846,858,859,871,872,884,885,897,898,936,937,949,950,962,963,975,976,988,989,1001,1002,1041,1054,1066,1067,1079,1080,1092,1093,1144,1145,1157,1158,1196,1197,1209,1210,1222,1223,1235,1236,1248,1249,1261,1262,1274,1275,1313,1314,1326,1327,1339,1340,1352,1353};
const uint8_t id_value[]  ={16,16,15,240,15,240,4,16,6,224,15,240,9,16,9,16,8,16,12,48,7,16,15,144,8,208,8,112,8,48,12,16,8,224,9,240,9,16,13,16,7,240,3,224,8,224,9,240,9,16,13,16,7,240,3,224,16,16,15,240,15,240,4,16,8,224,9,240,9,16,9,16,15,16,15,48,6,224,15,240,9,16,9,16,8,16,12,48,16,16,15,240,15,240,4,16,3,48,3,48,7,224,7,224,8,16,8,16,8,16,15,240,15,240,8,16,15,240,15,240,8,16};

const uint16_t  demo_address[]  ={1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1801,1802,1804,1806,1807,1808,1810,1811,1812,1813,1814,1815,1851,1852,1854,1856,1857,1858,1860,1861,1862,1863,1864,1865,1901,1902,1904,1905,1906,1907,1908,1909,1911,1912,1913,1914,1915,1951,1952,1954,1955,1956,1957,1958,1959,1961,1962,1963,1964,1965,2002,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2052,2055,2057,2058,2059,2060,2061,2062,2063,2064,2065,2102,2105,2107,2108,2109,2110,2111,2112,2113,2114,2115,2151,2152,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2201,2202,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2251,2252,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2951,2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2965,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3015,3051,3052,3053,3054,3055,3056,3057,3058,3059,3061,3062,3063,3064,3065,3101,3102,3104,3106,3107,3108,3111,3112,3113,3114,3115,3151,3152,3154,3156,3157,3158,3161,3162,3163,3164,3165,3201,3202,3204,3205,3206,3207,3208,3209,3211,3212,3213,3214,3215,3251,3252,3254,3255,3256,3257,3258,3259,3261,3262,3263,3264,3265,3302,3304,3305,3306,3307,3308,3309,3310,3311,3312,3313,3314,3315,3352,3355,3357,3358,3359,3360,3361,3362,3363,3364,3365,3402,3405,3407,3408,3409,3410,3411,3412,3413,3414,3415,3451,3452,3454,3455,3456,3457,3458,3459,3461,3462,3463,3464,3465,3501,3502,3504,3505,3506,3507,3508,3509,3511,3512,3513,3514,3515,3551,3552,3554,3555,3556,3557,3558,3559,3561,3562,3563,3564,3565,5952,5953,5954,5955,5956,5957,5958,5959,5960,5961,5962,5963,5964,5965,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6012,6013,6014,6015,6051,6052,6053,6054,6055,6056,6057,6058,6059,6060,6061,6062,6063,6064,6065,6101,6102,6103,6104,6105,6106,6107,6108,6109,6110,6111,6112,6113,6114,6115,6151,6152,6154,6156,6157,6158,6161,6162,6163,6164,6165,6201,6202,6204,6206,6207,6208,6211,6212,6213,6214,6215,6251,6252,6253,6254,6255,6256,6257,6258,6259,6261,6262,6263,6264,6265,6301,6302,6303,6304,6305,6306,6307,6308,6309,6311,6312,6313,6314,6315,6352,6353,6354,6355,6356,6357,6358,6359,6360,6361,6362,6363,6364,6365,6402,6403,6405,6407,6408,6409,6410,6411,6412,6413,6414,6415,6452,6453,6455,6457,6458,6459,6460,6461,6462,6463,6464,6465,6501,6502,6503,6504,6505,6506,6507,6508,6509,6510,6511,6512,6513,6514,6515,6551,6552,6553,6554,6555,6556,6557,6558,6559,6560,6561,6562,6563,6564,6565,6601,6602,6603,6604,6605,6606,6607,6608,6609,6610,6611,6612,6613,6614,6615,7252,7253,7254,7255,7256,7257,7258,7259,7260,7261,7262,7263,7264,7265,7302,7303,7304,7305,7306,7307,7308,7309,7310,7311,7312,7313,7314,7315,7351,7352,7353,7354,7355,7356,7357,7358,7359,7360,7361,7362,7363,7364,7365,7401,7402,7403,7404,7405,7406,7407,7408,7409,7411,7412,7413,7414,7415,7451,7452,7454,7456,7457,7458,7461,7462,7463,7464,7465,7501,7502,7504,7506,7507,7508,7511,7512,7513,7514,7515,7551,7552,7553,7554,7555,7556,7557,7558,7559,7561,7562,7563,7564,7565,7601,7602,7603,7604,7605,7606,7607,7608,7609,7611,7612,7613,7614,7615,7652,7653,7654,7655,7656,7657,7658,7659,7660,7661,7662,7663,7664,7665,7702,7703,7705,7707,7708,7709,7710,7711,7712,7713,7714,7715,7752,7753,7755,7757,7758,7759,7760,7761,7762,7763,7764,7765,7801,7802,7803,7804,7805,7806,7807,7808,7809,7811,7812,7813,7814,7815,7851,7852,7853,7854,7855,7856,7857,7858,7859,7861,7862,7863,7864,7865,7901,7902,7903,7904,7905,7906,7907,7908,7909,7911,7912,7913,7914,7915,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9616,9617,9618,9619,9620,9621,9622,9623,9624,9625,9626,9627,9628,9629,9630,9631,9632,9633,9634,9635,9636,9637,9638,9639,9640,9641,9642,9643,9644,9645,9646,9647,9648,9651,9652,9653,9654,9655,9656,9657,9658,9659,9660,9661,9662,9663,9664,9665,9666,9667,9668,9669,9670,9671,9672,9673,9674,9675,9676,9677,9678,9679,9680,9681,9682,9683,9684,9685,9686,9687,9688,9689,9690,9691,9692,9693,9694,9695,9696,9697,9698,9701,9702,9703,9704,9705,9706,9707,9708,9709,9710,9711,9712,9713,9714,9715,9716,9717,9718,9719,9720,9721,9722,9723,9724,9725,9726,9727,9728,9729,9730,9731,9732,9733,9734,9735,9736,9737,9738,9739,9740,9741,9742,9743,9744,9745,9746,9747,9748,10003,10004,10053,10054,10055,10103,10104,10105,10153,10154,10155,10203,10204,10205,10253,10254,10255,10303,10304,10305,10352,10353,10354,10355,10402,10403,10404,10405,10452,10453,10454,10455,10502,10503,10504,10505,10552,10553,10554,10555,10602,10603,10604,10605,10652,10653,10654,10655,10702,10703,10704,10705,10752,10753,10754,10755,10802,10803,10804,10805,10852,10853,10854,10855,10902,10903,10904,10905,10952,10953,10954,10955,11002,11003,11004,11005,11052,11053,11054,11055,11102,11103,11104,11105,11152,11153,11154,11155,11202,11203,11204,11205,11253,11254,11255,11303,11304,11305,11353,11354,11355,11403,11404,11405,11453,11454,11455,11503,11504,11553,11554};
const uint8_t demo_value[]  ={126,14,3,240,15,192,63,3,140,6,192,17,128,96,1,255,14,15,248,63,224,255,131,134,12,96,49,128,96,3,255,14,31,248,127,225,255,131,134,12,96,49,128,96,3,193,14,30,8,120,33,224,128,3,24,32,33,128,96,7,128,60,240,3,192,1,176,63,225,140,96,7,192,62,248,3,224,1,240,63,225,140,96,3,255,31,248,127,225,255,128,224,16,65,158,96,3,255,31,248,127,225,255,128,224,24,193,146,96,255,7,248,31,224,127,131,129,224,24,193,179,96,7,56,224,3,131,129,176,8,129,161,96,7,56,224,3,131,131,24,13,129,161,224,3,255,31,248,127,225,255,128,6,8,13,129,193,224,3,255,31,248,127,225,255,128,6,12,7,1,192,224,3,255,31,248,127,225,255,128,12,6,7,1,192,224,126,14,3,240,15,192,63,3,128,96,35,241,128,96,1,255,14,15,248,63,224,255,131,128,112,35,241,128,96,3,255,14,31,248,127,225,255,131,128,112,32,193,128,96,3,193,14,30,8,120,33,224,128,88,32,193,128,96,7,128,60,240,3,192,72,32,193,140,96,7,192,62,248,3,224,76,32,193,140,96,3,255,31,248,127,225,255,128,68,32,193,158,96,3,255,31,248,127,225,255,128,70,32,193,146,96,255,7,248,31,224,127,131,128,66,32,193,179,96,7,56,224,3,131,128,67,32,193,161,96,7,56,224,3,131,128,65,32,193,161,224,3,255,31,248,127,225,255,128,65,160,193,193,224,3,255,31,248,127,225,255,128,64,227,241,192,224,3,255,31,248,127,225,255,128,64,227,241,192,224,63,7,1,248,7,224,31,129,198,3,96,8,192,48,255,135,7,252,31,240,127,193,195,6,48,24,192,48,1,255,135,15,252,63,240,255,193,195,6,48,24,192,48,1,224,135,15,4,60,16,240,64,1,140,16,16,192,48,3,192,30,120,1,224,216,31,240,198,48,3,224,31,124,1,240,248,31,240,198,48,1,255,128,15,252,63,240,255,192,112,8,32,207,48,1,255,128,15,252,63,240,255,192,112,12,96,201,48,127,128,3,252,15,240,63,193,192,240,12,96,217,176,3,128,28,112,1,193,192,216,4,64,208,176,3,128,28,112,1,193,193,140,6,192,208,240,1,255,128,15,252,63,240,255,192,3,4,6,192,224,240,1,255,128,15,252,63,240,255,192,3,6,3,128,224,112,1,255,128,15,252,63,240,255,192,6,3,3,128,224,112,63,7,1,248,7,224,31,129,192,48,17,248,192,48,255,135,7,252,31,240,127,193,192,56,17,248,192,48,1,255,135,15,252,63,240,255,193,192,56,16,96,192,48,1,224,135,15,4,60,16,240,64,44,16,96,192,48,3,192,30,120,1,224,36,16,96,198,48,3,224,31,124,1,240,38,16,96,198,48,1,255,128,15,252,63,240,255,192,34,16,96,207,48,1,255,128,15,252,63,240,255,192,35,16,96,201,48,127,128,3,252,15,240,63,193,192,33,16,96,217,176,3,128,28,112,1,193,192,33,144,96,208,176,3,128,28,112,1,193,192,32,144,96,208,240,1,255,128,15,252,63,240,255,192,32,208,96,224,240,1,255,128,15,252,63,240,255,192,32,113,248,224,112,1,255,128,15,252,63,240,255,192,32,113,248,224,112,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240,31,255,31,255,128,63,223,128,127,159,224,127,31,224,254,31,240,252,31,240,1,248,31,248,1,240,30,248,1,225,28,120,1,227,24,120,3,241,16,252,3,248,1,252,3,252,3,252,3,252,7,252,3,254,15,252,3,254,15,252,3,252,7,252,3,248,3,252,3,240,1,252,1,225,16,248,1,227,24,120,1,241,28,248,1,248,31,248,1,252,31,240,254,31,240,254,31,240,127,31,224,127,159,192,63,223,128,15,255,1,240};

const uint16_t min_max_address[]   = {642,643,647,648,653,654,655,656,658,659,660,661,666,667,668,669,671,672,673,674,679,680,684,685,694,695,699,700,707,708,712,713,720,721,725,726,733,734,738,739,746,747,751,752,759,760,764,765,770,771,772,773,775,776,777,778,783,784,785,786,788,789,790,791,796,798,799,801,803,804,809,814,822,824,825,827,829,830,835,836,837,838,840,841,842,843,848,849,850,851,853,854,855,856,863,864,868,869,876,877,881,882,887,888,889,890,892,893,894,895,900,901,902,903,905,906,907,908,939,940,941,942,944,945,946,947,952,953,954,955,957,958,959,960,965,967,970,972,978,980,983,985,991,992,993,994,996,997,998,999,1004,1005,1006,1007,1009,1010,1011,1012,1017,1019,1022,1024,1030,1032,1035,1037,1043,1044,1045,1046,1048,1049,1050,1051,1056,1057,1058,1059,1061,1062,1063,1064};
const uint8_t min_max_value[]   = {12,96,12,96,12,96,12,96,12,96,12,96,12,96,12,96,12,96,12,96,12,96,12,96,8,32,8,32,8,32,8,32,14,224,14,224,7,192,7,192,3,128,3,128,7,192,7,192,7,224,14,224,7,224,14,224,15,224,8,32,15,224,8,32,8,8,32,8,8,32,8,8,4,7,224,4,7,224,15,224,15,224,15,224,15,224,15,224,10,32,15,224,10,32,10,32,10,32,11,32,11,32,111,224,11,224,111,224,11,224,111,224,9,192,111,224,9,192,63,224,63,224,63,224,63,224,63,224,63,224,63,224,63,224,56,56,56,56,14,14,14,14,3,128,3,128,3,128,3,128,3,128,3,128,3,128,3,128,30,30,30,30,60,60,60,60,63,224,63,224,63,224,63,224,63,224,63,224,63,224,63,224};


//dual sensors	
const uint16_t degree_f_address[]   = {8218,8219,8268,8269,8318,8319,8368,8369,8418,8419,8468,8469,8518,8519,8568,8569,8570,8618,8619,8620,8668,8669,8670,8718,8719,8720,8768,8769,8770,8818,8819,8820,8868,8869,8870};
const uint8_t degree_f_value[]   = {1,192,1,192,1,192,1,192,1,192,1,192,127,192,127,192,112,127,192,216,1,193,136,1,193,140,127,193,136,127,192,216,127,192,112};

const uint16_t degree_f_1_address[]   = {4269,4319,4369,4419,4469,4519,4568,4569,4618,4619,4620,4668,4669,4670,4719,4720,4769,4770,4818,4819,4820,4868,4869,4870,4918,4919,4920};
const uint8_t degree_f_1_value[]   = {224,224,224,224,224,224,63,224,63,224,56,63,224,108,224,196,224,198,63,224,196,63,224,108,63,224,56};	
	
const uint16_t degree_c_address[]   = {8268,8318,8368,8369,8418,8419,8468,8469,8518,8519,8520,8568,8569,8570,8618,8619,8620,8668,8669,8670,8718,8719,8720,8768,8769,8770,8818,8819,8820};
const uint8_t degree_c_value[]   = {126,199,131,128,1,192,1,192,1,195,128,1,198,192,1,204,64,1,204,96,131,140,64,199,6,192,126,3,128};

const uint16_t degree_c_1_address[]   = {4318,4368,4418,4419,4468,4469,4518,4519,4568,4569,4570,4618,4619,4620,4668,4669,4670,4718,4719,4720,4768,4769,4770,4818,4819,4820,4868,4869,4870};
const uint8_t degree_c_1_value[]   = {126,199,131,128,1,192,1,192,1,195,128,1,198,192,1,204,64,1,204,96,131,140,64,199,6,192,126,3,128};	
	
const uint16_t percentage_address[]   = {8218,8219,8220,8221,8222,8223,8268,8269,8270,8271,8272,8273,8318,8319,8320,8321,8322,8323,8368,8369,8370,8371,8372,8373,8418,8419,8420,8421,8422,8423,8468,8469,8470,8471,8472,8473,8518,8519,8520,8521,8522,8523,8568,8569,8570,8571,8572,8573,8618,8619,8620,8621,8622,8623,8668,8669,8670,8671,8672,8673,8718,8719,8720,8721,8722,8723,8768,8769,8770,8771,8772,8773};
const uint8_t percentage_value[]   = {14,14,240,224,240,96,14,14,120,225,152,192,14,14,56,227,24,192,14,14,28,227,25,128,14,14,30,227,25,128,14,14,31,225,155,60,15,254,56,225,243,102,14,14,56,224,6,99,14,14,48,224,6,99,14,14,56,224,12,99,14,14,56,224,12,102,14,14,31,224,24,60};

	
//single sensors	
const uint16_t degree_single_f_address[]   = {7909,7959,8009,8059,8109,8159,8208,8209,8258,8259,8260,8308,8309,8310,8359,8360,8409,8410,8458,8459,8460,8508,8509,8510,8558,8559,8560};
const uint8_t degree_single_f_value[]   = {224,224,224,224,224,224,63,224,63,224,56,63,224,108,224,196,224,198,63,224,196,63,224,108,63,224,56};


const uint16_t degree_single_c_address[]   = {8008,8009,8058,8059,8108,8109,8159,8209,8259,8260,8309,8310,8359,8360,8409,8410,8458,8459,8460,8508,8509,8510,8558,8559,8560};
const uint8_t degree_single_c_value[]   = {7,224,12,112,8,56,28,28,28,56,28,108,28,196,28,198,8,56,196,12,112,108,7,224,56};

	
	
	
	
	
const uint16_t percentage_address_1[]   = {4617,4618,4619,4620,4621,4667,4668,4669,4670,4717,4718,4719,4720,4767,4768,4769,4770,4771,4817,4818,4819,4820,4821,4867,4868,4869,4870,4871,4917,4918,4919,4920,4921,4967,4968,4969,4970,4971,5017,5018,5019,5020,5021};
const uint8_t percentage_value_1[]   = {56,238,49,225,128,56,231,51,35,56,227,179,50,56,225,243,54,240,63,227,243,37,152,56,231,49,237,152,56,230,48,9,152,56,231,48,25,152,56,227,240,48,240};	
	
// fonts for Year	
const uint16_t one_year_address[]   = {0,1,50,100,150,200,250,300,350,351,400};
const uint8_t one_year_value[]   = {15,192,3,3,3,3,3,3,3,192,3};

const uint16_t two_year_address[]   = {0,1,50,51,100,101,150,200,250,300,350,351,400,401};
const uint8_t two_year_value[]   = {15,224,1,192,3,128,7,14,14,12,14,64,7,192};
	
const uint16_t three_year_address[]   = {0,1,50,51,100,150,200,201,250,300,301,350,351,400,401};
const uint8_t three_year_value[]   = {7,224,14,32,12,12,3,128,14,12,32,14,96,7,192};

const uint16_t four_year_address[]   = {0,50,100,150,151,200,201,250,251,300,301,350,400};
const uint8_t four_year_value[]   = {6,6,6,15,224,6,96,6,192,7,128,7,7};

const uint16_t five_year_address[]   = {0,1,50,51,100,101,150,200,250,251,301,351,400,401};
const uint8_t five_year_value[]   = {3,224,14,96,12,32,12,14,7,192,192,192,15,192};

const uint16_t six_year_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,301,351,400,401};
const uint8_t six_year_value[]   = {7,128,12,192,12,96,12,96,12,96,7,224,96,192,7,128};
	
const uint16_t seven_year_address[]   = {0,49,50,99,100,149,199,249,299,349,399,400};
const uint8_t seven_year_value[]   = {192,1,192,3,128,3,7,6,14,12,15,224};

const uint16_t eight_year_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,300,301,350,351,400,401};
const uint8_t eight_year_value[]   = {7,192,12,96,12,96,12,96,7,192,4,224,12,96,12,96,7,192};

const uint16_t nine_year_address[]   = {0,1,50,100,150,151,200,201,250,251,300,301,350,351,400,401};
const uint8_t nine_year_value[]   = {3,224,6,12,15,192,12,96,12,96,12,96,14,96,3,192};

const uint16_t zero_year_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,300,301,350,351,400,401};
const uint8_t zero_year_value[]   = {7,192,12,96,12,96,12,96,12,96,12,96,12,96,12,96,7,192};

// fonts for Month	
const uint16_t one_month_address[]   = {0,1,50,100,150,200,250,300,350,351,400};
const uint8_t one_month_value[]   = {15,192,3,3,3,3,3,3,3,192,3};

const uint16_t two_month_address[]   = {0,1,50,51,100,101,150,200,250,300,350,351,400,401};
const uint8_t two_month_value[]   = {15,224,1,192,3,128,7,14,14,12,14,64,7,192};
	
const uint16_t three_month_address[]   = {0,1,50,51,100,150,200,201,250,300,301,350,351,400,401};
const uint8_t three_month_value[]   = {7,224,14,32,12,12,3,128,14,12,32,14,96,7,192};

const uint16_t four_month_address[]   = {0,50,100,150,151,200,201,250,251,300,301,350,400};
const uint8_t four_month_value[]   = {6,6,6,15,224,6,96,6,192,7,128,7,7};

const uint16_t five_month_address[]   = {0,1,50,51,100,101,150,200,250,251,301,351,400,401};
const uint8_t five_month_value[]   = {3,224,14,96,12,32,12,14,7,192,192,192,15,192};

const uint16_t six_month_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,301,351,400,401};
const uint8_t six_month_value[]   = {7,128,12,192,12,96,12,96,12,96,7,224,96,192,7,128};
	
const uint16_t seven_month_address[]   = {0,49,50,99,100,149,199,249,299,349,399,400};
const uint8_t seven_month_value[]   = {192,1,192,3,128,3,7,6,14,12,15,224};

const uint16_t eight_month_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,300,301,350,351,400,401};
const uint8_t eight_month_value[]   = {7,192,12,96,12,96,12,96,7,192,4,224,12,96,12,96,7,192};

const uint16_t nine_month_address[]   = {0,1,50,100,150,151,200,201,250,251,300,301,350,351,400,401};
const uint8_t nine_month_value[]   = {3,224,6,12,15,192,12,96,12,96,12,96,14,96,3,192};

const uint16_t zero_month_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,300,301,350,351,400,401};
const uint8_t zero_month_value[]   = {7,192,12,96,12,96,12,96,12,96,12,96,12,96,12,96,7,192};

	// fonts for Date	
const uint16_t one_date_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t one_date_value[]   = {252,48,48,48,48,48,48,60,48};

const uint16_t two_date_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t two_date_value[]   = {127,14,28,56,112,112,96,114,62};
	
const uint16_t three_date_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t three_date_value[]   = {126,226,192,192,56,224,194,230,124};

const uint16_t four_date_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t four_date_value[]   = {96,96,96,254,102,108,120,112,112};

const uint16_t five_date_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t five_date_value[]   = {62,230,194,192,224,124,12,12,252};

const uint16_t six_date_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t six_date_value[]   = {120,204,198,198,198,126,6,12,120};
	
const uint16_t seven_date_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t seven_date_value[]   = {12,28,56,48,112,96,224,192,254};

const uint16_t eight_date_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t eight_date_value[]   = {124,198,198,198,124,78,198,198,124};

const uint16_t nine_date_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t nine_date_value[]   = {62,96,192,252,198,198,198,230,60};

const uint16_t zero_date_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t zero_date_value[]   = {124,198,198,198,198,198,198,198,124};


// fonts for hour	
const uint16_t one_hour_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t one_hour_value[]   = {63,12,12,12,12,12,12,15,12};

const uint16_t two_hour_address[]   = {0,1,50,100,150,200,250,300,350,400};
const uint8_t two_hour_value[]   = {63,128,7,14,28,56,56,48,57,31};
	
const uint16_t three_hour_address[]   = {0,1,50,51,100,150,200,250,300,301,350,351,400};
const uint8_t three_hour_value[]   = {31,128,56,128,48,48,14,56,48,128,57,128,31};

const uint16_t four_hour_address[]   = {0,50,100,150,151,200,201,250,300,350,400};
const uint8_t four_hour_value[]   = {24,24,24,63,128,25,128,27,30,28,28};

const uint16_t five_hour_address[]   = {0,1,50,51,100,101,150,200,250,300,350,400};
const uint8_t five_hour_value[]   = {15,128,57,128,48,128,48,56,31,3,3,63};

const uint16_t six_hour_address[]   = {0,50,100,101,150,151,200,201,250,251,300,301,350,400};
const uint8_t six_hour_value[]   = {30,51,49,128,49,128,49,128,31,128,1,128,3,30};
	
const uint16_t seven_hour_address[]   = {0,50,100,150,200,250,300,350,400,401};
const uint8_t seven_hour_value[]   = {3,7,14,12,28,24,56,48,63,128};

const uint16_t eight_hour_address[]   = {0,50,51,100,101,150,151,200,250,251,300,301,350,351,400};
const uint8_t eight_hour_value[]   = {31,49,128,49,128,49,128,31,19,128,49,128,49,128,31};

const uint16_t nine_hour_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t nine_hour_value[]   = {31,48,96,126,99,99,99,115,30};

const uint16_t zero_hour_address[]   = {0,50,51,100,101,150,151,200,201,250,251,300,301,350,351,400};
const uint8_t zero_hour_value[]   = {31,49,128,49,128,49,128,49,128,49,128,49,128,49,128,31};

// fonts for minute	
const uint16_t one_min_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t one_min_value[]   = {252,48,48,48,48,48,48,60,48};

const uint16_t two_min_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t two_min_value[]   = {254,28,56,112,224,224,192,228,124};
	
const uint16_t three_min_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t three_min_value[]   = {126,226,192,192,56,224,194,230,124};

const uint16_t four_min_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t four_min_value[]   = {96,96,96,254,102,108,120,112,112};

const uint16_t five_min_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t five_min_value[]   = {62,230,194,192,224,124,12,12,252};

const uint16_t six_min_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t six_min_value[]   = {120,204,198,198,198,126,6,12,120};
	
const uint16_t seven_min_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t seven_min_value[]   = {12,28,56,48,112,96,224,192,254};

const uint16_t eight_min_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t eight_min_value[]   = {124,198,198,198,124,78,198,198,124};

const uint16_t nine_min_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t nine_min_value[]   = {62,96,192,252,198,198,198,230,60};

const uint16_t zero_min_address[]   = {0,50,100,150,200,250,300,350,400};
const uint8_t zero_min_value[]   = {124,198,198,198,198,198,198,198,124};
	
//Fonts for dual sensors current temperature	
const uint16_t one_address[]   = {0,1,2,3,50,51,52,53,100,101,102,103,150,151,152,153,200,201,202,203,250,251,252,253,300,301,302,303,351,352,401,402,451,452,501,502,551,552,601,602,651,652,701,702,751,752,801,802,851,852,901,902,951,952,1001,1002,1051,1052,1101,1102,1151,1152,1201,1202,1251,1252,1301,1302,1351,1352,1401,1402,1403,1451,1452,1453,1501,1502,1503,1551,1552,1553,1601,1602,1603,1651,1652,1653,1701,1702,1703,1751,1752,1801,1802,1851,1852,1901,1902,1951,1952,2001,2002};
const uint8_t one_value[]   = {127,255,255,240,127,255,255,240,127,255,255,240,127,255,255,240,127,255,255,240,127,255,255,240,127,255,255,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,240,127,255,240,127,255,240,127,255,240,127,255,240,127,255,240,127,255,240,127,255,240,127,254,127,248,127,240,127,224,127,224,127,192};

const uint16_t two_address[]   = {0,1,2,3,4,50,51,52,53,54,100,101,102,103,104,150,151,152,153,154,200,201,202,203,204,250,251,252,253,254,300,301,302,303,304,350,351,352,353,354,402,403,404,452,453,454,502,503,504,552,553,602,603,652,653,702,703,751,752,753,801,802,803,851,852,901,902,951,952,1001,1002,1051,1052,1101,1102,1151,1152,1201,1202,1251,1252,1300,1301,1302,1350,1351,1352,1400,1401,1402,1450,1451,1452,1500,1501,1502,1504,1550,1551,1552,1554,1600,1601,1602,1604,1651,1652,1653,1654,1701,1702,1703,1704,1751,1752,1753,1754,1801,1802,1803,1804,1851,1852,1853,1854,1901,1902,1903,1904,1951,1952,1953,1954,2001,2002,2003,2004,2052,2053};
const uint8_t two_value[]   = {7,255,255,255,252,7,255,255,255,252,7,255,255,255,252,7,255,255,255,252,7,255,255,255,252,7,255,255,255,252,7,255,255,255,252,7,255,255,255,248,1,255,240,3,255,192,15,255,128,31,255,63,252,127,248,255,240,1,255,224,7,255,128,7,255,15,254,31,252,63,248,127,248,127,240,255,224,255,224,255,192,1,255,192,1,255,192,1,255,192,1,255,192,1,255,192,24,1,255,224,56,1,255,240,248,255,252,7,248,255,255,255,248,255,255,255,248,127,255,255,248,63,255,255,248,31,255,255,248,15,255,255,240,3,255,255,128,63,248};

const uint16_t three_address[]   = {0,1,49,50,51,52,99,100,101,102,149,150,151,152,199,200,201,202,249,250,251,252,298,299,300,301,302,348,349,350,351,352,398,399,400,401,402,448,449,450,452,498,499,500,502,548,549,552,598,599,648,649,698,699,748,749,798,799,848,849,850,898,899,900,948,949,950,951,999,1000,1001,1049,1050,1051,1099,1100,1101,1149,1150,1151,1199,1200,1201,1249,1250,1251,1299,1300,1349,1350,1398,1399,1400,1448,1449,1450,1498,1499,1548,1549,1552,1598,1599,1600,1602,1648,1649,1650,1651,1652,1698,1699,1700,1701,1702,1748,1749,1750,1751,1752,1798,1799,1800,1801,1802,1848,1849,1850,1851,1852,1899,1900,1901,1902,1949,1950,1951,1952,1999,2000,2001,2002,2049,2050,2051,2052,2100,2101};
const uint8_t three_value[]   = {127,252,3,255,255,192,15,255,255,252,63,255,255,252,127,255,255,252,255,255,255,252,1,255,255,255,252,3,255,255,255,252,3,255,240,7,252,3,255,192,252,7,255,128,60,7,255,12,7,255,7,255,7,255,7,255,3,255,3,255,128,1,255,224,1,255,255,240,255,255,240,63,255,240,7,255,240,7,255,240,31,255,240,127,255,240,255,240,255,192,1,255,128,1,255,128,3,255,3,255,24,3,255,128,120,3,255,192,1,248,3,255,240,15,248,1,255,255,255,248,1,255,255,255,248,1,255,255,255,248,255,255,255,248,127,255,255,248,31,255,255,240,7,255,255,128,127,240};

const uint16_t four_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,300,301,350,351,400,401,450,451,499,500,501,502,503,504,549,550,551,552,553,554,599,600,601,602,603,604,649,650,651,652,653,654,699,700,701,702,703,704,749,750,751,752,753,754,799,800,801,802,803,804,849,850,851,852,853,854,900,901,903,904,950,951,953,1000,1001,1002,1003,1050,1051,1052,1053,1100,1101,1102,1103,1150,1151,1152,1153,1200,1201,1202,1203,1250,1251,1252,1253,1300,1301,1302,1303,1350,1351,1352,1353,1400,1401,1402,1403,1450,1451,1452,1500,1501,1502,1550,1551,1552,1600,1601,1602,1650,1651,1652,1700,1701,1702,1750,1751,1752,1800,1801,1802,1850,1851,1852,1900,1901,1950,1951,2000,2001};
const uint8_t four_value[]   = {31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,7,255,255,255,255,192,7,255,255,255,255,192,7,255,255,255,255,192,7,255,255,255,255,192,7,255,255,255,255,192,7,255,255,255,255,192,7,255,255,255,255,192,7,255,255,255,255,192,31,248,127,128,31,248,255,31,248,1,255,31,248,3,254,31,248,3,252,31,248,7,248,31,248,15,240,31,248,31,224,31,248,63,192,31,248,127,192,31,248,255,128,31,248,255,31,249,254,31,255,252,31,255,248,31,255,240,31,255,224,31,255,224,31,255,192,31,255,128,31,255,31,254,31,252};

const uint16_t five_address[]   = {0,1,50,51,52,99,100,101,102,149,150,151,152,199,200,201,202,249,250,251,252,299,300,301,302,349,350,351,352,399,400,401,402,449,450,452,499,500,502,548,549,550,552,598,599,600,648,649,650,698,699,700,748,749,750,798,799,800,848,849,850,898,899,900,949,950,952,999,1000,1001,1002,1049,1050,1051,1052,1099,1100,1101,1102,1149,1150,1151,1152,1199,1200,1201,1202,1249,1250,1251,1252,1299,1300,1301,1302,1350,1351,1352,1401,1402,1451,1452,1501,1502,1551,1552,1601,1602,1651,1652,1699,1700,1701,1702,1749,1750,1751,1752,1799,1800,1801,1802,1849,1850,1851,1852,1899,1900,1901,1902,1949,1950,1951,1952,1999,2000,2001,2002,2049,2050,2051,2052};
const uint8_t five_value[]   = {15,255,255,255,240,3,255,255,254,7,255,255,254,31,255,255,254,63,255,255,254,63,255,255,254,127,255,255,254,255,252,1,254,255,240,62,255,224,14,1,255,192,2,1,255,192,1,255,192,1,255,128,1,255,192,1,255,192,1,255,224,1,255,240,255,252,60,255,255,255,252,255,255,255,252,127,255,255,252,63,255,255,252,31,255,255,252,15,255,255,252,3,255,255,252,63,255,252,15,252,15,252,15,252,15,252,15,252,15,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252};

const uint16_t six_address[]   = {0,1,49,50,51,99,100,101,102,149,150,151,152,199,200,201,202,249,250,251,252,299,300,301,302,349,350,351,352,398,399,400,401,402,448,449,450,451,452,498,499,500,501,502,548,549,550,551,552,598,599,600,601,602,648,649,650,651,652,698,699,700,701,702,748,749,750,751,752,798,799,800,801,802,848,849,850,851,852,898,899,900,901,902,948,949,950,951,952,998,999,1000,1001,1002,1048,1049,1050,1051,1052,1099,1100,1101,1102,1149,1150,1151,1152,1199,1200,1201,1202,1249,1250,1251,1252,1299,1300,1301,1302,1349,1350,1351,1352,1401,1402,1451,1452,1501,1502,1551,1552,1601,1602,1651,1652,1699,1700,1701,1702,1749,1750,1751,1752,1799,1800,1801,1802,1849,1850,1851,1852,1899,1900,1901,1949,1950,1951,1999,2000,2001,2049,2050,2051,2099,2100};
const uint8_t six_value[]   = {63,224,1,255,254,7,255,255,128,31,255,255,192,63,255,255,224,127,255,255,240,255,255,255,248,255,240,127,248,1,255,224,31,252,1,255,192,15,252,1,255,128,15,254,3,255,128,7,254,3,255,128,7,254,3,255,128,7,255,3,255,128,7,255,3,255,128,7,255,3,255,128,7,255,3,255,128,7,255,3,255,192,7,255,1,255,224,7,255,1,255,240,15,255,1,255,255,255,255,255,255,255,255,127,255,255,255,63,255,255,255,31,255,255,255,7,255,231,254,1,254,7,254,7,254,15,254,31,252,31,252,63,248,255,248,48,3,255,240,63,255,255,224,63,255,255,224,63,255,255,192,63,255,255,63,255,254,63,255,248,63,255,224,31,254};

const uint16_t seven_address[]   = {0,1,50,51,100,101,150,151,199,200,201,249,250,251,299,300,301,349,350,351,399,400,401,449,450,499,500,549,550,599,600,649,650,699,700,749,750,799,800,849,850,898,899,900,948,949,950,998,999,1000,1048,1049,1050,1098,1099,1148,1149,1198,1199,1248,1249,1298,1299,1348,1349,1398,1399,1448,1449,1498,1499,1547,1548,1549,1597,1598,1599,1647,1648,1649,1650,1651,1697,1698,1699,1700,1701,1747,1748,1749,1750,1751,1797,1798,1799,1800,1801,1847,1848,1849,1850,1851,1897,1898,1899,1900,1901,1947,1948,1949,1950,1951,1997,1998,1999,2000,2001};
const uint8_t seven_value[]   = {63,248,127,248,255,240,255,240,1,255,224,1,255,192,3,255,192,3,255,128,7,255,128,15,255,15,254,31,254,31,252,63,252,127,248,127,240,255,240,255,224,1,255,224,3,255,192,3,255,128,7,255,128,7,255,15,255,15,254,31,252,63,252,63,248,127,248,127,240,255,224,1,255,224,1,255,192,1,255,255,255,255,1,255,255,255,255,1,255,255,255,255,1,255,255,255,255,1,255,255,255,255,1,255,255,255,255,1,255,255,255,255,1,255,255,255,255};

const uint16_t eight_address[]   = {0,1,49,50,51,99,100,101,102,149,150,151,152,199,200,201,202,248,249,250,251,252,298,299,300,301,302,348,349,350,351,352,398,399,400,401,402,448,449,451,452,498,499,501,502,548,549,551,552,598,599,601,602,648,649,651,652,698,699,701,702,748,749,750,751,752,798,799,800,801,802,848,849,850,851,852,898,899,900,901,902,948,949,950,951,952,999,1000,1001,1002,1049,1050,1051,1099,1100,1101,1102,1149,1150,1151,1152,1199,1200,1201,1202,1249,1250,1251,1252,1299,1300,1301,1302,1349,1350,1351,1352,1398,1399,1400,1401,1402,1448,1449,1451,1452,1498,1499,1501,1502,1548,1549,1551,1552,1598,1599,1601,1602,1648,1649,1650,1651,1652,1698,1699,1700,1701,1702,1748,1749,1750,1751,1752,1798,1799,1800,1801,1802,1848,1849,1850,1851,1852,1899,1900,1901,1902,1949,1950,1951,1952,1999,2000,2001,2002,2049,2050,2051,2100,2101};
const uint8_t eight_value[]   = {127,240,7,255,255,31,255,255,192,63,255,255,240,255,255,255,248,1,255,255,255,252,1,255,255,255,254,3,255,224,127,254,3,255,128,31,255,7,255,15,255,7,255,7,255,7,254,7,255,7,254,3,255,7,255,3,255,7,255,3,255,7,255,128,7,254,3,255,224,7,254,3,255,248,15,252,1,255,255,31,248,1,255,255,255,240,255,255,255,192,63,255,255,15,255,255,128,7,255,255,224,31,255,255,240,63,255,255,248,127,199,255,252,255,128,255,252,1,255,128,63,252,1,255,31,254,3,255,15,254,3,255,15,254,3,255,15,254,3,255,128,15,254,3,255,192,31,254,3,255,224,127,252,1,255,255,255,252,1,255,255,255,248,255,255,255,240,127,255,255,224,31,255,255,128,7,255,254,127,240};

const uint16_t nine_address[]   = {0,1,2,50,51,52,100,101,102,149,150,151,152,199,200,201,202,249,250,251,252,299,300,301,302,349,350,351,352,399,400,402,449,450,499,500,548,549,550,598,599,600,648,649,650,698,699,700,748,749,750,751,798,799,800,801,848,849,850,851,852,898,899,900,901,902,948,949,950,951,952,998,999,1000,1001,1002,1048,1049,1050,1051,1052,1098,1099,1100,1101,1102,1148,1149,1151,1152,1198,1199,1201,1202,1248,1249,1251,1252,1298,1299,1301,1302,1348,1349,1351,1352,1398,1399,1401,1402,1448,1449,1451,1452,1498,1499,1501,1502,1548,1549,1551,1552,1598,1599,1600,1601,1602,1648,1649,1650,1651,1652,1698,1699,1700,1701,1702,1748,1749,1750,1751,1752,1799,1800,1801,1802,1849,1850,1851,1852,1899,1900,1901,1902,1949,1950,1951,1952,1999,2000,2001,2049,2050,2051,2100,2101};
const uint8_t nine_value[]   = {3,255,192,63,255,224,255,255,224,3,255,255,224,7,255,255,224,31,255,255,224,63,255,255,224,63,255,255,224,127,254,96,255,248,255,224,1,255,192,1,255,192,3,255,128,3,255,128,3,255,7,252,3,255,63,255,7,255,255,255,192,7,255,255,255,224,7,255,255,255,240,7,255,255,255,248,7,255,255,255,252,7,255,128,127,252,7,255,63,252,7,255,31,254,7,254,15,254,7,255,15,254,7,255,15,254,7,255,15,254,7,255,15,254,3,255,15,254,3,255,15,254,3,255,128,15,252,3,255,128,31,252,1,255,192,63,252,1,255,240,127,248,255,255,255,240,127,255,255,240,63,255,255,224,31,255,255,192,15,255,255,3,255,252,127,224};

const uint16_t zero_address[]   = {0,1,49,50,51,99,100,101,149,150,151,152,199,200,201,202,249,250,251,252,298,299,300,301,302,348,349,350,351,352,398,399,400,401,402,448,449,450,451,452,498,499,500,501,502,548,549,551,552,598,599,601,602,648,649,651,652,698,699,701,702,748,749,751,752,798,799,801,802,848,849,851,852,898,899,901,902,948,949,951,952,998,999,1001,1002,1048,1049,1051,1052,1098,1099,1101,1102,1148,1149,1151,1152,1198,1199,1201,1202,1248,1249,1251,1252,1298,1299,1301,1302,1348,1349,1351,1352,1398,1399,1401,1402,1448,1449,1451,1452,1498,1499,1501,1502,1548,1549,1551,1552,1598,1599,1600,1601,1602,1648,1649,1650,1651,1652,1698,1699,1700,1701,1702,1748,1749,1750,1751,1752,1799,1800,1801,1802,1849,1850,1851,1852,1899,1900,1901,1902,1949,1950,1951,1952,1999,2000,2001,2049,2050,2051,2100,2101};
const uint8_t zero_value[]   = {127,192,7,255,252,31,255,255,63,255,255,128,127,255,255,192,255,255,255,224,1,255,255,255,224,1,255,255,255,240,3,255,224,255,248,3,255,192,127,248,3,255,128,63,248,7,255,31,252,7,255,31,252,7,255,31,252,7,254,15,252,7,254,15,252,7,254,15,252,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,7,254,15,252,7,254,15,252,7,254,15,252,7,255,31,252,7,255,31,252,7,255,31,252,3,255,128,63,248,3,255,128,127,248,3,255,224,255,248,1,255,255,255,240,255,255,255,224,255,255,255,224,127,255,255,192,63,255,255,128,31,255,255,7,255,252,127,192};
	
	
const uint16_t minus_address[]   = {0,1,2,3,50,51,52,53,100,101,102,103,150,151,152,153,200,201,202,203,250,251,252,253,300,301,302,303,350,351,352,353};
const uint8_t minus_value[]   = {7,255,255,192,7,255,255,192,7,255,255,192,7,255,255,192,7,255,255,192,7,255,255,192,7,255,255,192,7,255,255,192};

const uint16_t dot_address[]   = {0,1,2,50,51,52,100,101,102,150,151,152,200,201,202,250,251,252,300,301,302,350,351,352,400,401,402,450,451,452,500,501,502};
const uint8_t dot_value[]   = {1,255,192,1,255,192,1,255,192,1,255,192,1,255,192,1,255,192,1,255,192,1,255,192,1,255,192,1,255,192,1,255,192};

//Fonts for dual sensors min max temperature	
const uint16_t temp_min_one_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,300,301,350,351,400,401,450,451,500,501,550,551,600};
const uint8_t temp_min_one_value[]   = {31,224,31,224,7,128,7,128,7,128,7,128,7,128,7,128,7,128,7,224,7,224,7,128,7};

const uint16_t temp_min_two_address[]   = {0,1,50,51,100,101,150,151,200,201,250,300,350,400,450,451,500,501,550,551,600,601};
const uint8_t temp_min_two_value[]   = {63,240,63,240,1,224,3,192,7,128,15,30,28,28,28,16,30,48,15,240,7,224};

const uint16_t temp_min_three_address[]   = {0,1,50,51,100,101,150,151,200,250,300,301,350,351,400,450,500,501,550,551,600,601};
const uint8_t temp_min_three_value[]   = {15,192,63,240,56,112,120,16,120,56,31,128,31,128,56,56,56,96,63,224,15,192};

const uint16_t temp_min_four_address[]   = {0,50,100,150,151,200,201,250,251,300,301,350,351,400,401,450,451,500,501,550,600};
const uint8_t temp_min_four_value[]   = {14,14,14,63,248,63,248,14,56,14,48,14,96,14,192,15,192,15,128,15,14};

const uint16_t temp_min_five_address[]   = {0,1,50,51,100,101,150,200,250,300,350,351,400,401,451,501,550,551,600,601};
const uint8_t temp_min_five_value[]   = {7,224,15,240,28,48,60,60,60,30,31,240,7,240,112,112,31,240,31,240};

const uint16_t temp_min_six_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,300,301,350,351,400,401,451,501,550,551,600,601};
const uint8_t temp_min_six_value[]   = {7,192,31,224,28,112,56,112,56,120,56,120,60,120,31,248,15,112,112,224,31,192,31,128};

const uint16_t temp_min_seven_address[]   = {0,49,50,99,100,149,150,199,200,249,250,299,349,399,449,499,549,550,599,600};
const uint8_t temp_min_seven_value[]   = {240,1,224,1,224,3,192,3,128,7,128,7,15,14,30,60,63,248,63,248};

const uint16_t temp_min_eight_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,300,301,350,351,400,401,450,451,500,501,550,551,600,601};
const uint8_t temp_min_eight_value[]   = {7,224,31,240,60,120,56,56,60,56,63,112,15,224,15,240,28,240,60,120,60,112,31,240,15,192};

const uint16_t temp_min_nine_address[]   = {0,1,50,51,100,150,200,201,250,251,300,301,350,351,400,401,450,451,500,501,550,551,600,601};
const uint8_t temp_min_nine_value[]   = {1,240,7,240,14,28,29,224,63,240,60,120,60,56,60,56,28,56,28,112,15,240,7,192};

const uint16_t temp_min_zero_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,300,301,350,351,400,401,450,451,500,501,550,551,600,601};
const uint8_t temp_min_zero_value[]   = {7,192,31,240,28,112,60,120,56,56,56,56,56,56,56,56,56,56,60,120,28,112,15,224,7,192};

const uint16_t temp_min_minus_address[]   = {0,1,50,51};
const uint8_t temp_min_minus_value[]   = {15,224,15,224};

const uint16_t temp_min_dot_address[]   = {0,50,100};
const uint8_t temp_min_dot_value[]   = {224,224,224};


//Fonts for single sensors current temperature	
const uint16_t single_one_address[]   = {0,1,2,3,4,5,50,51,52,53,54,55,100,101,102,103,104,105,150,151,152,153,154,155,200,201,202,203,204,205,250,251,252,253,254,255,300,301,302,303,304,305,350,351,352,353,354,355,400,401,402,403,404,405,450,451,452,453,454,455,502,503,552,553,602,603,652,653,702,703,752,753,802,803,852,853,902,903,952,953,1002,1003,1052,1053,1102,1103,1152,1153,1202,1203,1252,1253,1302,1303,1352,1353,1402,1403,1452,1453,1502,1503,1552,1553,1602,1603,1652,1653,1702,1703,1752,1753,1802,1803,1852,1853,1902,1903,1952,1953,2002,2003,2004,2005,2052,2053,2054,2055,2102,2103,2104,2105,2152,2153,2154,2155,2202,2203,2204,2205,2252,2253,2254,2255,2302,2303,2304,2305,2352,2353,2354,2355,2402,2403,2404,2405,2452,2453,2454,2455,2502,2503,2504,2552,2553,2554,2602,2603,2652,2653,2702,2703,2752,2753,2802,2803,2852,2853};
const uint8_t single_one_value[]   = {};

const uint16_t single_two_address[]   = {0,1,2,3,4,5,50,51,52,53,54,55,100,101,102,103,104,105,150,151,152,153,154,155,200,201,202,203,204,205,250,251,252,253,254,255,300,301,302,303,304,305,350,351,352,353,354,355,400,401,402,403,404,405,450,451,452,453,454,455,500,501,502,503,504,505,553,554,555,603,604,605,653,654,655,702,703,704,752,753,754,802,803,804,852,853,854,902,903,904,952,953,954,1001,1002,1003,1004,1051,1052,1053,1101,1102,1103,1151,1152,1153,1201,1202,1203,1251,1252,1253,1301,1302,1303,1351,1352,1353,1401,1402,1450,1451,1452,1500,1501,1502,1550,1551,1552,1600,1601,1602,1650,1651,1652,1700,1701,1702,1750,1751,1752,1800,1801,1802,1850,1851,1852,1900,1901,1902,1950,1951,1952,2000,2001,2002,2050,2051,2052,2100,2101,2102,2105,2150,2151,2152,2155,2200,2201,2202,2205,2250,2251,2252,2254,2255,2300,2301,2302,2304,2305,2350,2351,2352,2353,2354,2355,2400,2401,2402,2403,2404,2405,2450,2451,2452,2453,2454,2455,2500,2501,2502,2503,2504,2505,2550,2551,2552,2553,2554,2555,2601,2602,2603,2604,2605,2651,2652,2653,2654,2655,2701,2702,2703,2704,2705,2751,2752,2753,2754,2755,2801,2802,2803,2804,2805,2852,2853,2854,2902,2903,2904};
const uint8_t single_two_value[]   = {127,255,255,255,255,254,127,255,255,255,255,254,127,255,255,255,255,254,127,255,255,255,255,254,127,255,255,255,255,254,127,255,255,255,255,254,127,255,255,255,255,254,127,255,255,255,255,254,127,255,255,255,255,254,127,255,255,255,255,254,127,255,255,255,255,248,31,255,240,127,255,224,255,255,128,1,255,255,7,255,254,15,255,248,31,255,240,63,255,224,255,255,192,1,255,255,128,3,255,254,7,255,252,15,255,248,31,255,240,63,255,224,63,255,192,127,255,128,255,255,1,255,254,1,255,254,3,255,252,3,255,248,7,255,248,7,255,240,7,255,240,15,255,224,15,255,224,15,255,224,15,255,224,15,255,224,15,255,224,15,255,224,24,15,255,240,56,15,255,240,248,15,255,248,3,248,15,255,254,15,248,7,255,255,128,127,248,7,255,255,255,255,248,3,255,255,255,255,248,3,255,255,255,255,248,1,255,255,255,255,248,255,255,255,255,248,255,255,255,255,248,63,255,255,255,248,31,255,255,255,248,7,255,255,255,192,255,255,252,15,255,128};

const uint16_t single_three_address[]   = {0,1,2,49,50,51,52,99,100,101,102,103,149,150,151,152,153,198,199,200,201,202,203,248,249,250,251,252,253,298,299,300,301,302,303,348,349,350,351,352,353,398,399,400,401,402,403,448,449,450,451,452,453,498,499,500,501,502,503,548,549,550,552,553,598,599,600,602,603,648,649,650,652,653,698,699,703,748,749,753,798,799,848,849,898,899,948,949,998,999,1048,1049,1098,1099,1148,1149,1198,1199,1200,1248,1249,1250,1298,1299,1300,1301,1348,1349,1350,1351,1398,1399,1400,1401,1448,1449,1450,1451,1499,1500,1501,1549,1550,1551,1599,1600,1601,1649,1650,1651,1698,1699,1700,1701,1748,1749,1750,1751,1798,1799,1800,1848,1849,1850,1898,1899,1900,1948,1949,1998,1999,2048,2049,2098,2099,2148,2149,2198,2199,2203,2248,2249,2253,2298,2299,2300,2302,2303,2348,2349,2350,2352,2353,2398,2399,2400,2401,2402,2403,2448,2449,2450,2451,2452,2453,2498,2499,2500,2501,2502,2503,2548,2549,2550,2551,2552,2553,2598,2599,2600,2601,2602,2603,2648,2649,2650,2651,2652,2653,2698,2699,2700,2701,2702,2703,2748,2749,2750,2751,2752,2753,2799,2800,2801,2802,2803,2849,2850,2851,2852,2899,2900,2901,2902,2950,2951};
const uint8_t single_three_value[]   = {63,255,128,7,255,255,254,31,255,255,255,192,127,255,255,255,248,1,255,255,255,255,248,3,255,255,255,255,248,15,255,255,255,255,248,31,255,255,255,255,248,31,255,255,255,255,248,63,255,255,255,255,248,127,255,255,255,255,248,127,255,248,255,248,127,255,224,15,248,255,255,128,1,248,255,255,120,255,254,24,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,255,127,255,128,63,255,240,63,255,255,255,31,255,255,255,7,255,255,255,3,255,255,255,127,255,255,15,255,255,63,255,255,255,255,255,3,255,255,255,7,255,255,255,15,255,248,15,255,192,31,255,128,63,255,63,255,63,255,127,255,127,255,127,255,48,127,255,240,127,255,128,7,240,127,255,192,31,240,127,255,248,1,255,240,63,255,255,255,255,240,63,255,255,255,255,240,31,255,255,255,255,240,31,255,255,255,255,240,15,255,255,255,255,240,7,255,255,255,255,240,3,255,255,255,255,240,255,255,255,255,224,127,255,255,255,15,255,255,240,127,254};

const uint16_t single_four_address[]   = {0,1,2,50,51,52,100,101,102,150,151,152,200,201,202,250,251,252,300,301,302,350,351,352,400,401,402,450,451,452,500,501,502,550,551,552,600,601,602,649,650,651,652,653,654,655,656,699,700,701,702,703,704,705,706,749,750,751,752,753,754,755,756,799,800,801,802,803,804,805,806,849,850,851,852,853,854,855,856,899,900,901,902,903,904,905,906,949,950,951,952,953,954,955,956,999,1000,1001,1002,1003,1004,1005,1006,1049,1050,1051,1052,1053,1054,1055,1056,1099,1100,1101,1102,1103,1104,1105,1106,1149,1150,1151,1152,1153,1154,1155,1156,1200,1201,1202,1204,1205,1206,1250,1251,1252,1254,1255,1300,1301,1302,1304,1305,1350,1351,1352,1354,1355,1400,1401,1402,1404,1405,1450,1451,1452,1454,1455,1500,1501,1502,1504,1505,1550,1551,1552,1553,1554,1555,1600,1601,1602,1603,1604,1605,1650,1651,1652,1653,1654,1655,1700,1701,1702,1703,1704,1750,1751,1752,1753,1754,1800,1801,1802,1803,1804,1850,1851,1852,1853,1854,1900,1901,1902,1903,1904,1950,1951,1952,1953,1954,2000,2001,2002,2003,2004,2050,2051,2052,2053,2054,2100,2101,2102,2103,2104,2150,2151,2152,2153,2154,2200,2201,2202,2203,2250,2251,2252,2253,2300,2301,2302,2303,2350,2351,2352,2353,2400,2401,2402,2403,2450,2451,2452,2453,2500,2501,2502,2503,2550,2551,2552,2553,2600,2601,2602,2603,2650,2651,2652,2653,2700,2701,2702,2750,2751,2752,2800,2801,2802,2850,2851,2852};
const uint8_t single_four_value[]   = {3,255,240,3,255,240,3,255,240,3,255,240,3,255,240,3,255,240,3,255,240,3,255,240,3,255,240,3,255,240,3,255,240,3,255,240,3,255,240,3,255,255,255,255,255,255,128,3,255,255,255,255,255,255,128,3,255,255,255,255,255,255,128,3,255,255,255,255,255,255,128,3,255,255,255,255,255,255,128,3,255,255,255,255,255,255,128,3,255,255,255,255,255,255,128,3,255,255,255,255,255,255,128,3,255,255,255,255,255,255,128,3,255,255,255,255,255,255,128,3,255,255,255,255,255,255,128,3,255,240,7,255,128,3,255,240,15,255,3,255,240,31,254,3,255,240,31,252,3,255,240,63,248,3,255,240,127,240,3,255,240,255,240,3,255,240,1,255,224,3,255,240,1,255,192,3,255,240,3,255,128,3,255,240,7,255,3,255,240,15,255,3,255,240,31,254,3,255,240,31,252,3,255,240,63,248,3,255,240,127,240,3,255,240,255,240,3,255,241,255,224,3,255,241,255,192,3,255,243,255,128,3,255,255,255,3,255,255,254,3,255,255,254,3,255,255,252,3,255,255,248,3,255,255,240,3,255,255,224,3,255,255,224,3,255,255,192,3,255,255,128,3,255,255,3,255,254,3,255,254,3,255,252};

const uint16_t single_five_address[]   = {0,1,2,50,51,52,99,100,101,102,103,149,150,151,152,153,199,200,201,202,203,249,250,251,252,253,298,299,300,301,302,303,348,349,350,351,352,353,398,399,400,401,402,403,448,449,450,451,452,453,498,499,500,501,502,503,548,549,550,552,553,598,599,600,602,603,648,649,650,653,698,699,700,703,748,749,750,753,798,799,800,848,849,850,898,899,948,949,998,999,1048,1049,1098,1099,1100,1148,1149,1150,1198,1199,1200,1248,1249,1250,1298,1299,1300,1303,1348,1349,1350,1352,1353,1398,1399,1400,1401,1402,1403,1448,1449,1450,1451,1452,1453,1498,1499,1500,1501,1502,1503,1548,1549,1550,1551,1552,1553,1598,1599,1600,1601,1602,1603,1648,1649,1650,1651,1652,1653,1698,1699,1700,1701,1702,1703,1749,1750,1751,1752,1753,1799,1800,1801,1802,1803,1849,1850,1851,1852,1853,1900,1901,1902,1903,1951,1952,1953,2001,2002,2003,2051,2052,2053,2101,2102,2103,2151,2152,2153,2201,2202,2203,2251,2252,2253,2301,2302,2303,2351,2352,2353,2398,2399,2400,2401,2402,2403,2448,2449,2450,2451,2452,2453,2498,2499,2500,2501,2502,2503,2548,2549,2550,2551,2552,2553,2598,2599,2600,2601,2602,2603,2648,2649,2650,2651,2652,2653,2698,2699,2700,2701,2702,2703,2748,2749,2750,2751,2752,2753,2798,2799,2800,2801,2802,2803,2848,2849,2850,2851,2852,2853,2898,2899,2900,2901,2902,2903};
const uint8_t single_five_value[]   = {15,255,224,255,255,255,7,255,255,255,240,31,255,255,255,252,63,255,255,255,252,255,255,255,255,252,1,255,255,255,255,252,3,255,255,255,255,252,7,255,255,255,255,252,7,255,255,255,255,252,15,255,255,255,255,252,15,255,255,63,252,31,255,248,3,252,31,255,224,252,63,255,192,60,63,255,128,12,63,255,128,63,255,128,127,255,127,255,127,255,127,255,127,255,128,127,255,128,63,255,192,63,255,224,63,255,248,112,63,255,255,15,240,31,255,255,255,255,240,31,255,255,255,255,240,15,255,255,255,255,240,15,255,255,255,255,240,7,255,255,255,255,240,3,255,255,255,255,240,1,255,255,255,255,240,127,255,255,255,240,31,255,255,255,240,3,255,255,255,240,63,255,255,240,3,255,240,3,255,240,3,255,240,3,255,240,3,255,240,3,255,240,3,255,240,3,255,240,3,255,240,31,255,255,255,255,240,31,255,255,255,255,240,31,255,255,255,255,240,31,255,255,255,255,240,31,255,255,255,255,240,31,255,255,255,255,240,31,255,255,255,255,240,31,255,255,255,255,240,31,255,255,255,255,240,31,255,255,255,255,240,31,255,255,255,255,240};

const uint16_t single_six_address[]   = {0,1,49,50,51,52,99,100,101,102,149,150,151,152,199,200,201,202,249,250,251,252,253,298,299,300,301,302,303,348,349,350,351,352,353,398,399,400,401,402,403,448,449,450,451,452,453,498,499,500,501,502,503,548,549,550,551,552,553,598,599,600,601,602,603,648,649,650,651,652,653,698,699,700,702,703,748,749,750,752,753,798,799,800,802,803,848,849,852,853,898,899,902,903,948,949,952,953,998,999,1002,1003,1048,1049,1052,1053,1098,1099,1102,1103,1148,1149,1152,1153,1154,1198,1199,1200,1202,1203,1204,1248,1249,1250,1252,1253,1254,1298,1299,1300,1302,1303,1304,1348,1349,1350,1352,1353,1354,1398,1399,1400,1402,1403,1404,1448,1449,1450,1451,1452,1453,1454,1498,1499,1500,1501,1502,1503,1504,1548,1549,1550,1551,1552,1553,1598,1599,1600,1601,1602,1603,1648,1649,1650,1651,1652,1653,1698,1699,1700,1701,1702,1703,1748,1749,1750,1751,1752,1753,1799,1800,1801,1802,1803,1849,1850,1851,1852,1853,1899,1900,1901,1902,1903,1949,1950,1951,1952,1953,2002,2003,2052,2053,2101,2102,2103,2151,2152,2153,2201,2202,2203,2251,2252,2253,2301,2302,2303,2348,2349,2351,2352,2353,2398,2399,2400,2401,2402,2403,2448,2449,2450,2451,2452,2453,2498,2499,2500,2501,2502,2503,2548,2549,2550,2551,2552,2553,2598,2599,2600,2601,2602,2648,2649,2650,2651,2652,2698,2699,2700,2701,2702,2748,2749,2750,2751,2752,2798,2799,2800,2801,2802,2848,2849,2850,2851,2898,2899,2900,2901,2949,2950};
const uint8_t single_six_value[]   = {31,252,1,255,255,192,15,255,255,248,31,255,255,252,127,255,255,255,255,255,255,255,128,1,255,255,255,255,192,3,255,255,255,255,224,7,255,255,255,255,240,15,255,255,255,255,240,15,255,252,15,255,248,31,255,240,7,255,252,31,255,224,3,255,252,63,255,192,1,255,252,63,255,128,255,254,63,255,128,255,254,63,255,128,127,254,127,255,127,255,127,255,127,255,127,255,127,255,127,255,63,255,127,255,63,255,127,255,63,255,127,255,63,255,128,127,255,128,63,255,128,63,255,128,63,255,128,63,255,192,63,255,128,63,255,224,63,255,128,63,255,240,63,255,128,31,255,252,1,255,255,128,31,255,255,255,255,255,128,15,255,255,255,255,255,15,255,255,255,255,255,7,255,255,255,255,255,3,255,255,255,255,255,1,255,255,255,255,255,255,255,255,191,255,63,255,254,127,255,15,255,240,127,254,1,255,128,127,254,255,254,255,254,1,255,252,1,255,252,3,255,248,7,255,248,31,255,240,3,128,127,255,240,3,240,3,255,255,224,3,255,255,255,255,192,3,255,255,255,255,128,3,255,255,255,255,128,3,255,255,255,255,3,255,255,255,252,3,255,255,255,248,3,255,255,255,224,3,255,255,255,192,3,255,255,254,3,255,255,240,63,255};

const uint16_t single_seven_address[]   = {0,1,2,50,51,52,100,101,102,150,151,152,200,201,202,250,251,299,300,301,349,350,351,399,400,401,449,450,451,499,500,501,549,550,551,599,600,601,649,650,651,699,700,701,749,750,751,799,800,801,849,850,851,899,900,949,950,998,999,1000,1048,1049,1050,1098,1099,1100,1148,1149,1150,1198,1199,1200,1248,1249,1250,1298,1299,1300,1348,1349,1350,1398,1399,1400,1448,1449,1450,1498,1499,1500,1548,1549,1550,1598,1599,1648,1649,1697,1698,1699,1747,1748,1749,1797,1798,1799,1847,1848,1849,1897,1898,1899,1947,1948,1949,1997,1998,1999,2047,2048,2049,2097,2098,2099,2147,2148,2149,2197,2198,2199,2247,2248,2249,2297,2298,2347,2348,2349,2350,2351,2352,2397,2398,2399,2400,2401,2402,2447,2448,2449,2450,2451,2452,2497,2498,2499,2500,2501,2502,2547,2548,2549,2550,2551,2552,2597,2598,2599,2600,2601,2602,2647,2648,2649,2650,2651,2652,2697,2698,2699,2700,2701,2702,2747,2748,2749,2750,2751,2752,2797,2798,2799,2800,2801,2802,2847,2848,2849,2850,2851,2852};
const uint8_t single_seven_value[]   = {63,255,224,63,255,192,127,255,192,127,255,128,255,255,128,255,255,1,255,254,3,255,254,3,255,252,7,255,252,7,255,248,15,255,248,15,255,240,31,255,224,31,255,224,63,255,192,127,255,192,127,255,128,255,255,255,255,1,255,254,1,255,254,3,255,252,7,255,248,7,255,248,15,255,240,15,255,240,31,255,224,31,255,224,63,255,192,127,255,128,127,255,128,255,255,255,255,1,255,254,1,255,252,3,255,252,7,255,248,7,255,248,15,255,240,15,255,240,31,255,224,31,255,192,63,255,192,127,255,128,127,255,128,255,255,255,255,255,255,255,252,255,255,255,255,255,252,255,255,255,255,255,252,255,255,255,255,255,252,255,255,255,255,255,252,255,255,255,255,255,252,255,255,255,255,255,252,255,255,255,255,255,252,255,255,255,255,255,252,255,255,255,255,255,252,255,255,255,255,255,252};

const uint16_t single_eight_address[]   = {0,1,49,50,51,52,99,100,101,102,149,150,151,152,153,198,199,200,201,202,203,248,249,250,251,252,253,298,299,300,301,302,303,348,349,350,351,352,353,398,399,400,401,402,403,448,449,450,451,452,453,498,499,500,501,502,503,548,549,550,551,552,553,598,599,600,602,603,648,649,652,653,654,698,699,702,703,704,748,749,752,753,754,798,799,802,803,804,848,849,852,853,854,898,899,902,903,904,948,949,952,953,954,998,999,1002,1003,1048,1049,1050,1052,1053,1098,1099,1100,1102,1103,1148,1149,1150,1152,1153,1198,1199,1200,1202,1203,1248,1249,1250,1251,1252,1253,1298,1299,1300,1301,1302,1303,1348,1349,1350,1351,1352,1353,1398,1399,1400,1401,1402,1403,1448,1449,1450,1451,1452,1499,1500,1501,1502,1549,1550,1551,1552,1599,1600,1601,1602,1603,1649,1650,1651,1652,1653,1699,1700,1701,1702,1703,1748,1749,1750,1751,1752,1753,1798,1799,1800,1801,1802,1803,1848,1849,1850,1851,1852,1853,1898,1899,1900,1901,1902,1903,1948,1949,1950,1951,1952,1953,1998,1999,2001,2002,2003,2048,2049,2052,2053,2098,2099,2102,2103,2148,2149,2152,2153,2198,2199,2202,2203,2248,2249,2252,2253,2298,2299,2300,2302,2303,2348,2349,2350,2352,2353,2398,2399,2400,2401,2402,2403,2448,2449,2450,2451,2452,2453,2498,2499,2500,2501,2502,2503,2548,2549,2550,2551,2552,2553,2598,2599,2600,2601,2602,2603,2648,2649,2650,2651,2652,2653,2698,2699,2700,2701,2702,2703,2748,2749,2750,2751,2752,2753,2799,2800,2801,2802,2849,2850,2851,2852,2899,2900,2901,2902,2950,2951};
const uint8_t single_eight_value[]   = {63,255,3,255,255,240,31,255,255,254,127,255,255,255,128,1,255,255,255,255,224,3,255,255,255,255,240,7,255,255,255,255,248,15,255,255,255,255,252,31,255,255,255,255,254,63,255,255,255,255,254,63,255,240,15,255,255,127,255,192,3,255,255,127,255,128,255,255,255,255,127,255,128,255,254,127,255,128,255,254,63,255,128,255,254,63,255,128,255,254,63,255,128,255,254,63,255,128,255,254,63,255,128,255,255,63,255,127,255,128,63,255,127,255,192,63,255,127,255,240,127,254,63,255,254,255,252,63,255,255,128,255,252,31,255,255,241,255,240,15,255,255,255,255,224,7,255,255,255,255,128,3,255,255,255,254,255,255,255,252,127,255,255,255,15,255,255,255,128,63,255,255,255,192,127,255,255,255,240,1,255,255,255,255,240,3,255,231,255,255,248,7,255,192,255,255,252,15,255,128,31,255,252,31,255,128,7,255,254,31,255,1,255,254,63,255,255,254,63,255,255,254,63,255,127,254,63,255,127,254,127,255,127,254,63,255,128,255,254,63,255,128,255,254,63,255,192,3,255,254,63,255,248,15,255,252,31,255,255,255,255,252,31,255,255,255,255,248,15,255,255,255,255,248,7,255,255,255,255,240,3,255,255,255,255,224,1,255,255,255,255,128,255,255,255,255,63,255,255,252,7,255,255,224,63,254};

const uint16_t single_nine_address[]   = {0,1,49,50,51,52,99,100,101,102,148,149,150,151,152,198,199,200,201,202,248,249,250,251,252,298,299,300,301,302,348,349,350,351,352,398,399,400,401,402,448,449,450,451,452,497,498,499,500,501,502,547,548,549,550,551,552,597,598,599,602,647,648,649,697,698,699,747,748,749,797,798,799,847,848,849,897,898,899,947,948,949,997,998,1000,1001,1047,1048,1049,1050,1051,1097,1098,1099,1100,1101,1147,1148,1149,1150,1151,1152,1197,1198,1199,1200,1201,1202,1247,1248,1249,1250,1251,1252,1297,1298,1299,1300,1301,1302,1347,1348,1349,1350,1351,1352,1397,1398,1399,1400,1401,1402,1447,1448,1449,1450,1451,1452,1497,1498,1499,1500,1501,1502,1547,1548,1550,1551,1552,1597,1598,1600,1601,1602,1647,1648,1650,1651,1652,1697,1698,1701,1702,1747,1748,1751,1752,1797,1798,1801,1802,1847,1848,1851,1852,1897,1898,1901,1902,1947,1948,1951,1952,1997,1998,2001,2002,2047,2048,2051,2052,2097,2098,2101,2102,2147,2148,2151,2152,2197,2198,2199,2201,2202,2247,2248,2249,2251,2252,2297,2298,2299,2300,2301,2302,2347,2348,2349,2350,2351,2352,2397,2398,2399,2400,2401,2402,2447,2448,2449,2450,2451,2452,2497,2498,2499,2500,2501,2502,2547,2548,2549,2550,2551,2552,2597,2598,2599,2600,2601,2602,2647,2648,2649,2650,2651,2652,2698,2699,2700,2701,2702,2748,2749,2750,2751,2798,2799,2800,2801,2848,2849,2850,2851,2898,2899,2900,2901,2949,2950};
const uint8_t single_nine_value[]   = {63,255,7,255,255,224,63,255,255,224,1,255,255,255,224,3,255,255,255,224,15,255,255,255,224,31,255,255,255,224,63,255,255,255,224,127,255,255,255,224,255,255,255,255,224,1,255,255,255,255,224,3,255,255,224,3,224,7,255,255,96,7,255,252,15,255,240,15,255,224,31,255,192,31,255,192,31,255,128,63,255,128,63,255,255,192,63,255,7,255,248,63,255,63,255,254,127,255,255,255,255,128,127,255,255,255,255,192,127,255,255,255,255,224,127,255,255,255,255,240,127,255,255,255,255,248,127,255,255,255,255,248,255,255,255,255,255,252,255,255,192,31,255,252,255,254,7,255,254,255,254,3,255,254,255,254,1,255,254,255,254,255,254,255,254,255,255,255,254,127,255,127,254,127,255,127,254,127,255,127,254,127,255,127,255,127,255,127,255,127,255,127,255,127,255,127,255,255,254,63,255,128,255,254,63,255,128,255,254,63,255,192,1,255,254,31,255,192,3,255,252,31,255,240,7,255,252,15,255,248,31,255,248,15,255,255,255,255,240,7,255,255,255,255,240,3,255,255,255,255,224,1,255,255,255,255,192,255,255,255,255,128,127,255,255,255,63,255,255,252,15,255,255,240,1,255,255,192,31,252};

const uint16_t single_zero_address[]   = {0,1,49,50,51,52,99,100,101,102,149,150,151,152,199,200,201,202,248,249,250,251,252,298,299,300,301,302,303,348,349,350,351,352,353,398,399,400,401,402,403,448,449,450,451,452,453,498,499,500,501,502,503,548,549,550,551,552,553,598,599,600,601,602,603,648,649,650,651,652,653,698,699,700,701,702,703,748,749,750,751,752,753,798,799,801,802,803,848,849,851,852,853,898,899,901,902,903,948,949,952,953,998,999,1002,1003,1048,1049,1052,1053,1098,1099,1102,1103,1148,1149,1152,1153,1198,1199,1202,1203,1248,1249,1252,1253,1298,1299,1302,1303,1348,1349,1352,1353,1398,1399,1402,1403,1447,1448,1449,1452,1453,1497,1498,1499,1502,1503,1548,1549,1552,1553,1598,1599,1602,1603,1648,1649,1652,1653,1698,1699,1702,1703,1748,1749,1752,1753,1798,1799,1802,1803,1848,1849,1852,1853,1898,1899,1902,1903,1948,1949,1952,1953,1998,1999,2002,2003,2048,2049,2052,2053,2098,2099,2101,2102,2103,2148,2149,2151,2152,2153,2198,2199,2201,2202,2203,2248,2249,2250,2251,2252,2253,2298,2299,2300,2301,2302,2303,2348,2349,2350,2351,2352,2353,2398,2399,2400,2401,2402,2403,2448,2449,2450,2451,2452,2453,2498,2499,2500,2501,2502,2503,2548,2549,2550,2551,2552,2553,2598,2599,2600,2601,2602,2603,2648,2649,2650,2651,2652,2653,2698,2699,2700,2701,2702,2749,2750,2751,2752,2799,2800,2801,2802,2849,2850,2851,2852,2899,2900,2901,2902,2950,2951};
const uint8_t single_zero_value[]   = {63,248,3,255,255,128,31,255,255,240,127,255,255,252,255,255,255,254,1,255,255,255,255,3,255,255,255,255,128,7,255,255,255,255,192,15,255,255,255,255,224,15,255,255,255,255,224,31,255,255,255,255,240,31,255,248,63,255,240,63,255,224,15,255,248,63,255,192,7,255,248,127,255,128,3,255,252,127,255,128,3,255,252,127,255,1,255,252,127,255,1,255,252,127,255,1,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,252,127,254,255,252,127,254,1,255,252,127,255,1,255,252,127,255,255,252,127,254,255,252,127,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,255,254,127,255,1,255,252,127,255,1,255,252,127,255,1,255,252,63,255,128,3,255,248,63,255,192,7,255,248,63,255,224,15,255,248,31,255,240,31,255,240,31,255,255,255,255,240,15,255,255,255,255,224,15,255,255,255,255,224,7,255,255,255,255,192,3,255,255,255,255,128,1,255,255,255,255,255,255,255,254,127,255,255,252,31,255,255,240,3,255,255,128,63,248};
	
	
const uint16_t single_minus_address[]   = {0,1,2,3,50,51,52,53,100,101,102,103,150,151,152,153,200,201,202,203,250,251,252,253,300,301,302,303,350,351,352,353,400,401,402,403,450,451,452,453,500,501,502,503};
const uint8_t single_minus_value[]   = {127,255,255,254,127,255,255,254,127,255,255,254,127,255,255,254,127,255,255,254,127,255,255,254,127,255,255,254,127,255,255,254,127,255,255,254,127,255,255,254,127,255,255,254};

const uint16_t single_dot_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,300,301,350,351,400,401,450,451,500,501,550,551,600,601,650,651,700,701};
const uint8_t single_dot_value[]   = {127,255,127,255,127,255,127,255,127,255,127,255,127,255,127,255,127,255,127,255,127,255,127,255,127,255,127,255,127,255};

//Fonts for single sensors min max temperature	
const uint16_t single_temp_min_one_address[]   = {0,1,50,51,100,150,200,250,300,350,400,450,451,500,501,550,600};
const uint8_t single_temp_min_one_value[]   = {63,192,63,192,15,15,15,15,15,15,15,15,192,15,192,15,14};

const uint16_t single_temp_min_two_address[]   = {0,1,50,51,100,101,150,151,200,250,300,350,400,450,451,500,501,550,551,600,601};
const uint8_t single_temp_min_two_value[]   = {127,224,127,224,3,192,7,128,15,30,60,56,56,56,32,60,96,31,224,15,192};

const uint16_t single_temp_min_three_address[]   = {0,1,50,51,100,101,150,151,200,250,300,350,400,450,500,501,550,551,600,601};
const uint8_t single_temp_min_three_value[]   = {31,128,127,224,112,224,240,32,240,112,63,63,112,112,112,192,127,192,31,128};

const uint16_t single_temp_min_four_address[]   = {0,50,100,150,151,200,201,250,251,300,301,350,351,400,401,450,451,500,550,600};
const uint8_t single_temp_min_four_value[]   = {28,28,28,127,240,127,240,28,112,28,96,28,192,29,128,31,128,31,30,28};

const uint16_t single_temp_min_five_address[]   = {0,1,50,51,100,101,150,200,250,300,350,351,400,401,451,501,550,551,600,601};
const uint8_t single_temp_min_five_value[]   = {15,192,31,224,56,96,120,120,120,60,63,224,15,224,224,224,63,224,63,224};

const uint16_t single_temp_min_six_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,300,301,350,351,400,401,451,500,501,550,551,600};
const uint8_t single_temp_min_six_value[]   = {15,128,63,192,56,224,112,224,112,240,112,240,120,240,63,240,30,224,224,1,192,63,128,63};

const uint16_t single_temp_min_seven_address[]   = {0,1,50,51,100,101,150,151,200,250,300,350,400,450,500,550,551,600,601};
const uint8_t single_temp_min_seven_value[]   = {1,224,3,192,3,192,7,128,7,15,14,30,28,60,120,127,240,127,240};

const uint16_t single_temp_min_eight_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,300,301,350,351,400,401,450,451,500,501,550,551,600,601};
const uint8_t single_temp_min_eight_value[]   = {15,192,63,224,120,240,112,112,120,112,126,224,31,192,31,224,57,224,120,240,120,224,63,224,31,128};

const uint16_t single_temp_min_nine_address[]   = {0,1,50,51,100,150,200,201,250,251,300,301,350,351,400,401,450,451,500,501,550,551,600,601};
const uint8_t single_temp_min_nine_value[]   = {3,224,15,224,28,56,59,192,127,224,120,240,120,112,120,112,56,112,56,224,31,224,15,128};

const uint16_t single_temp_min_zero_address[]   = {0,1,50,51,100,101,150,151,200,201,250,251,300,301,350,351,400,401,450,451,500,501,550,551,600,601};
const uint8_t single_temp_min_zero_value[]   = {15,128,63,224,56,224,120,240,112,112,112,112,112,112,112,112,112,112,120,240,56,224,31,192,15,128};

const uint16_t single_temp_min_minus_address[]   = {0,1,50,51};
const uint8_t single_temp_min_minus_value[]   = {31,192,31,192};

const uint16_t single_temp_min_dot_address[]   = {0,1,50,51,100,101};
const uint8_t single_temp_min_dot_value[]   = {3,128,3,128,3,128};


//additional
const uint16_t menu_degree_c_address[]   = {1054,1055,1056,1067,1068,1069,1080,1081,1082,1093,1094,1095,1106,1107,1108,1119,1120,1121,1132,1133,1134,1145,1146,1197,1198,1199,1210,1211,1212,1215,1216,1217,1223,1224,1225,1228,1229,1230,1231,1241,1242,1243,1244,1254,1255,1256,1257,1267,1269,1270,1280,1282,1283,1289,1290,1293,1295,1296,1302,1303,1306,1308,1309,1314,1315,1316,1319,1321,1322,1327,1328,1332,1334,1335,1340,1341,1345,1346,1347,1348,1353,1354,1358,1359,1360,1361,1367,1371,1372,1373,1374,1380,1384,1385,1386,1387,1392,1393,1394,1397,1398,1399,1405,1406,1407,1410,1411,1412,1418,1419,1420,1424,1425,1436,1437,1438,1449,1462,1475,1483,1484,1488,1496,1497,1498,1501,1509,1510,1511,1514,1522,1523,1524,1527,1536,1537,1550,1563,1576,1588,1589,1600,1601,1602,1613,1614,1615,1626,1627,1628,1639,1640};
const uint8_t menu_degree_c_value[]   = {1,192,224,1,192,224,1,192,224,15,255,224,15,255,224,15,255,192,15,255,128,1,192,57,255,224,57,255,224,3,224,31,57,255,224,7,192,15,128,7,192,15,128,7,128,7,128,15,3,192,15,3,192,127,224,15,3,192,255,224,15,3,192,1,255,224,15,3,192,1,224,15,3,192,1,192,15,128,7,192,1,192,7,192,15,128,192,7,240,63,128,224,7,255,255,128,1,255,224,3,255,255,1,255,224,1,255,254,1,255,224,255,252,60,63,240,124,126,195,31,255,195,31,255,128,231,31,255,192,126,31,255,224,124,1,224,224,224,224,1,224,31,255,224,31,255,192,31,255,128,31,255};

const uint16_t menu_degree_f_address[]   = {1054,1055,1056,1067,1068,1069,1080,1081,1082,1093,1094,1095,1106,1107,1108,1119,1120,1121,1132,1133,1134,1145,1146,1197,1198,1199,1210,1211,1212,1223,1224,1225,1228,1241,1242,1254,1255,1267,1268,1280,1281,1289,1290,1293,1294,1302,1303,1306,1307,1314,1315,1316,1319,1320,1327,1328,1332,1333,1340,1341,1345,1346,1353,1354,1358,1359,1360,1361,1367,1371,1372,1373,1374,1380,1384,1385,1386,1387,1392,1393,1394,1397,1398,1399,1400,1405,1406,1407,1410,1411,1412,1413,1418,1419,1420,1462,1475,1483,1484,1488,1496,1497,1498,1501,1509,1510,1511,1514,1522,1523,1524,1527,1536,1537,1540,1550,1553,1563,1576,1588,1589,1600,1601,1602,1613,1614,1615,1626,1627,1628,1639,1640};
const uint8_t menu_degree_f_value[]   = {1,192,224,1,192,224,1,192,224,15,255,224,15,255,224,15,255,192,15,255,128,1,192,57,255,224,57,255,224,57,255,224,30,30,30,30,30,30,30,30,30,127,224,30,30,255,224,30,30,1,255,224,30,30,1,224,30,30,1,192,30,30,1,192,31,255,255,128,192,31,255,255,128,224,31,255,255,128,1,255,224,31,255,255,128,1,255,224,31,255,255,128,1,255,224,60,124,31,255,126,31,255,128,195,31,255,192,195,31,255,224,231,1,224,126,224,124,224,224,1,224,31,255,224,31,255,192,31,255,128,31,255};

const uint16_t menu_interval_4_address[]   = {157,158,170,171,172,183,184,185,196,197,198,209,211,222,224,235,237,300,301,302,313,314,315,326,327,328,339,340,341,353,366,379,392,405,418,430,431,432,443,444,445,456,457,458,469,470,471,534,536,547,549,560,562,573,574,575,586,587,588,599,600,601,612,613,677,678,679,690,691,692,703,704,705,769,770,781,782,783,794,795,796,807,808,809,820,821,822,833,834,835,846,847,848,859,860,861,872,873,874,885,886,887,899,937,938,950,951,963,964,976,977,978,990,991,1003,1004,1016,1017,1029,1030,1041,1042,1043,1054,1055,1067,1068,1080,1081,1106,1107,1119,1120,1132,1133,1145,1146,1158,1159,1171,1172,1173,1184,1185,1186,1197,1198,1199,1250,1251,1262,1263,1264,1275,1276,1277,1288,1289,1290,1301,1302,1303,1307,1314,1315,1316,1320,1327,1328,1329,1332,1333,1340,1341,1342,1345,1346,1353,1354,1355,1358,1359,1366,1367,1368,1371,1372,1380,1384,1385,1393,1397,1398,1410,1411,1423,1424,1431,1432,1433,1436,1437,1444,1445,1446,1449,1450,1457,1458,1459,1463,1470,1471,1472,1483,1484,1485,1496,1497,1498,1509,1510,1522,1523,1575,1576,1587,1588,1589,1600,1601,1602,1613,1614,1626,1627,1639,1640,1652,1653,1665,1666,1678,1679,1680,1691,1692,1693,1704,1705,1706,1769,1770,1771,1782,1783,1784,1795,1796,1797,1939,1940,1951,1952,1953,1964,1965,1966,1977,1978,1979,1990,1991,1992,2003,2004,2005,2016,2017,2018,2029,2030,2031,2042,2043,2044,2055,2056,2057,2069,2082,2133,2134,2135,2146,2147,2148,2159,2160,2161,2172,2173,2185,2186,2198,2199,2211,2212,2225,2226,2237,2238,2239,2250,2251,2252,2263,2264,2265,2276,2277,2289,2290,2302,2303,2315,2316,2328,2329,2330,2341,2342,2343,2354,2355,2356,2419,2420,2421,2432,2433,2434,2445,2446,2447,2484,2497,2510,2523,2536,2549,2550,2551,2562,2563,2564,2575,2576,2577,2588,2589,2590,2601,2614,2627,2640,2653};
const uint8_t menu_interval_4_value[]   = {1,255,15,255,224,31,255,240,127,1,252,120,60,112,28,64,4,63,255,192,63,255,192,63,255,192,63,255,192,224,224,224,224,224,224,63,255,192,63,255,192,63,255,192,63,255,192,64,4,112,28,120,60,127,1,252,31,255,240,15,255,224,1,255,127,255,192,127,255,192,127,255,192,255,192,1,255,192,3,255,192,3,179,128,3,177,192,3,177,192,3,177,192,3,159,192,3,159,192,1,223,128,15,3,128,3,240,3,252,1,255,128,63,192,7,192,7,192,63,192,1,255,128,3,252,3,240,3,128,3,128,3,128,3,128,1,128,1,128,3,255,192,3,255,192,3,255,192,123,128,1,251,128,1,249,192,3,249,192,3,153,192,112,3,153,192,112,3,153,192,255,255,3,155,192,255,255,1,255,128,255,255,1,255,128,255,255,255,112,112,126,60,112,30,112,7,112,3,129,192,3,240,3,129,192,1,240,3,129,192,240,31,255,192,31,255,192,31,255,128,31,255,3,128,255,192,1,255,192,3,255,192,3,192,3,128,3,128,1,128,1,192,3,255,192,3,255,192,3,255,192,115,255,192,115,255,192,115,255,192,123,128,1,251,128,1,249,192,3,249,192,3,153,192,3,153,192,3,153,192,3,155,192,1,255,128,1,255,128,255,126,1,255,192,3,255,192,3,255,192,3,192,3,128,1,128,1,128,255,192,1,255,192,3,255,192,3,255,192,3,128,3,128,1,128,1,192,3,255,192,3,255,192,3,255,192,115,255,192,115,255,192,115,255,192,56,56,56,56,56,63,255,192,63,255,192,63,255,192,63,255,192,56,56,56,56,56};

const uint16_t menu_interval_6_address[]   = {157,158,170,171,172,183,184,185,196,197,198,209,211,222,224,235,237,300,301,302,313,314,315,326,327,328,339,340,341,353,366,379,392,405,418,430,431,432,443,444,445,456,457,458,469,470,471,534,536,547,549,560,562,573,574,575,586,587,588,599,600,601,612,613,677,678,679,690,691,692,703,704,705,769,770,781,782,783,794,795,796,807,808,809,820,821,822,833,834,835,846,847,848,859,860,861,872,873,874,885,886,887,899,937,938,950,951,963,964,976,977,978,990,991,1003,1004,1016,1017,1029,1030,1041,1042,1043,1054,1055,1067,1068,1080,1081,1106,1107,1119,1120,1132,1133,1145,1146,1158,1159,1171,1172,1173,1184,1185,1186,1197,1198,1199,1250,1251,1262,1263,1264,1268,1275,1276,1277,1280,1281,1288,1289,1290,1293,1294,1301,1302,1303,1306,1307,1314,1315,1316,1319,1320,1321,1327,1328,1329,1332,1333,1334,1340,1341,1342,1345,1346,1347,1353,1354,1355,1358,1359,1360,1366,1367,1368,1371,1372,1373,1380,1384,1385,1393,1397,1398,1410,1411,1424,1431,1432,1433,1444,1445,1446,1457,1458,1459,1470,1471,1472,1483,1484,1485,1496,1497,1498,1509,1510,1522,1523,1575,1576,1587,1588,1589,1600,1601,1602,1613,1614,1626,1627,1639,1640,1652,1653,1665,1666,1678,1679,1680,1691,1692,1693,1704,1705,1706,1769,1770,1771,1782,1783,1784,1795,1796,1797,1939,1940,1951,1952,1953,1964,1965,1966,1977,1978,1979,1990,1991,1992,2003,2004,2005,2016,2017,2018,2029,2030,2031,2042,2043,2044,2055,2056,2057,2069,2082,2133,2134,2135,2146,2147,2148,2159,2160,2161,2172,2173,2185,2186,2198,2199,2211,2212,2225,2226,2237,2238,2239,2250,2251,2252,2263,2264,2265,2276,2277,2289,2290,2302,2303,2315,2316,2328,2329,2330,2341,2342,2343,2354,2355,2356,2419,2420,2421,2432,2433,2434,2445,2446,2447,2484,2497,2510,2523,2536,2549,2550,2551,2562,2563,2564,2575,2576,2577,2588,2589,2590,2601,2614,2627,2640,2653};
const uint8_t menu_interval_6_value[]   = {1,255,15,255,224,31,255,240,127,1,252,120,60,112,28,64,4,63,255,192,63,255,192,63,255,192,63,255,192,224,224,224,224,224,224,63,255,192,63,255,192,63,255,192,63,255,192,64,4,112,28,120,60,127,1,252,31,255,240,15,255,224,1,255,127,255,192,127,255,192,127,255,192,255,192,1,255,192,3,255,192,3,179,128,3,177,192,3,177,192,3,177,192,3,159,192,3,159,192,1,223,128,15,3,128,3,240,3,252,1,255,128,63,192,7,192,7,192,63,192,1,255,128,3,252,3,240,3,128,3,128,3,128,3,128,1,128,1,128,3,255,192,3,255,192,3,255,192,123,128,1,251,128,120,1,249,192,113,254,3,249,192,113,255,3,153,192,115,255,3,153,192,115,199,128,3,153,192,115,131,128,3,155,192,115,131,128,1,255,128,57,131,128,1,255,128,61,143,128,255,63,255,126,31,255,7,252,96,3,129,192,3,129,192,3,129,192,31,255,192,31,255,192,31,255,128,31,255,3,128,255,192,1,255,192,3,255,192,3,192,3,128,3,128,1,128,1,192,3,255,192,3,255,192,3,255,192,115,255,192,115,255,192,115,255,192,123,128,1,251,128,1,249,192,3,249,192,3,153,192,3,153,192,3,153,192,3,155,192,1,255,128,1,255,128,255,126,1,255,192,3,255,192,3,255,192,3,192,3,128,1,128,1,128,255,192,1,255,192,3,255,192,3,255,192,3,128,3,128,1,128,1,192,3,255,192,3,255,192,3,255,192,115,255,192,115,255,192,115,255,192,56,56,56,56,56,63,255,192,63,255,192,63,255,192,63,255,192,56,56,56,56,56};

const uint16_t menu_interval_12_address[]   = {157,158,170,171,172,183,184,185,196,197,198,209,211,222,224,235,237,300,301,302,313,314,315,326,327,328,339,340,341,353,366,379,392,405,418,430,431,432,443,444,445,456,457,458,469,470,471,534,536,547,549,560,562,573,574,575,586,587,588,599,600,601,612,613,677,678,679,690,691,692,703,704,705,769,770,781,782,783,794,795,796,807,808,809,820,821,822,833,834,835,846,847,848,859,860,861,872,873,874,885,886,887,899,937,938,950,951,963,964,976,977,978,990,991,1003,1004,1016,1017,1029,1030,1041,1042,1043,1054,1055,1067,1068,1080,1081,1106,1107,1119,1120,1132,1133,1145,1146,1158,1159,1164,1171,1172,1173,1176,1177,1184,1185,1186,1189,1190,1197,1198,1199,1202,1203,1215,1216,1228,1229,1241,1242,1250,1251,1254,1255,1262,1263,1264,1267,1268,1275,1276,1277,1280,1281,1288,1289,1290,1293,1294,1301,1302,1303,1306,1307,1314,1315,1316,1327,1328,1329,1340,1341,1342,1353,1354,1355,1366,1367,1368,1372,1380,1385,1393,1398,1410,1411,1423,1424,1431,1432,1433,1436,1437,1444,1445,1446,1449,1450,1457,1458,1459,1462,1463,1470,1471,1472,1475,1476,1483,1484,1485,1488,1489,1496,1497,1498,1509,1510,1522,1523,1575,1576,1587,1588,1589,1600,1601,1602,1613,1614,1626,1627,1639,1640,1652,1653,1665,1666,1678,1679,1680,1691,1692,1693,1704,1705,1706,1769,1770,1771,1782,1783,1784,1795,1796,1797,1939,1940,1951,1952,1953,1964,1965,1966,1977,1978,1979,1990,1991,1992,2003,2004,2005,2016,2017,2018,2029,2030,2031,2042,2043,2044,2055,2056,2057,2069,2082,2133,2134,2135,2146,2147,2148,2159,2160,2161,2172,2173,2185,2186,2198,2199,2211,2212,2225,2226,2237,2238,2239,2250,2251,2252,2263,2264,2265,2276,2277,2289,2290,2302,2303,2315,2316,2328,2329,2330,2341,2342,2343,2354,2355,2356,2419,2420,2421,2432,2433,2434,2445,2446,2447,2484,2497,2510,2523,2536,2549,2550,2551,2562,2563,2564,2575,2576,2577,2588,2589,2590,2601,2614,2627,2640,2653};
const uint8_t menu_interval_12_value[]   = {1,255,15,255,224,31,255,240,127,1,252,120,60,112,28,64,4,63,255,192,63,255,192,63,255,192,63,255,192,224,224,224,224,224,224,63,255,192,63,255,192,63,255,192,63,255,192,64,4,112,28,120,60,127,1,252,31,255,240,15,255,224,1,255,127,255,192,127,255,192,127,255,192,255,192,1,255,192,3,255,192,3,179,128,3,177,192,3,177,192,3,177,192,3,159,192,3,159,192,1,223,128,15,3,128,3,240,3,252,1,255,128,63,192,7,192,7,192,63,192,1,255,128,3,252,3,240,3,128,3,128,3,128,3,128,1,128,1,128,7,3,255,192,62,7,3,255,192,127,135,3,255,192,127,199,255,231,224,247,224,127,123,128,224,63,1,251,128,224,31,1,249,192,224,31,3,249,192,112,15,3,153,192,112,7,3,153,192,3,153,192,3,155,192,1,255,128,1,255,128,7,255,7,126,7,255,255,255,255,3,129,192,255,255,3,129,192,255,255,3,129,192,56,7,31,255,192,56,7,31,255,192,56,7,31,255,128,31,255,3,128,255,192,1,255,192,3,255,192,3,192,3,128,3,128,1,128,1,192,3,255,192,3,255,192,3,255,192,115,255,192,115,255,192,115,255,192,123,128,1,251,128,1,249,192,3,249,192,3,153,192,3,153,192,3,153,192,3,155,192,1,255,128,1,255,128,255,126,1,255,192,3,255,192,3,255,192,3,192,3,128,1,128,1,128,255,192,1,255,192,3,255,192,3,255,192,3,128,3,128,1,128,1,192,3,255,192,3,255,192,3,255,192,115,255,192,115,255,192,115,255,192,56,56,56,56,56,63,255,192,63,255,192,63,255,192,63,255,192,56,56,56,56,56};

const uint16_t menu_interval_24_address[]   = {157,158,170,171,172,183,184,185,196,197,198,209,211,222,224,235,237,300,301,302,313,314,315,326,327,328,339,340,341,353,366,379,392,405,418,430,431,432,443,444,445,456,457,458,469,470,471,534,536,547,549,560,562,573,574,575,586,587,588,599,600,601,612,613,677,678,679,690,691,692,703,704,705,769,770,781,782,783,794,795,796,807,808,809,820,821,822,833,834,835,846,847,848,859,860,861,872,873,874,885,886,887,899,937,938,950,951,963,964,976,977,978,990,991,1003,1004,1016,1017,1029,1030,1041,1042,1043,1054,1055,1067,1068,1080,1081,1106,1107,1119,1120,1132,1133,1145,1146,1158,1159,1171,1172,1173,1177,1184,1185,1186,1190,1197,1198,1199,1202,1203,1215,1216,1228,1229,1241,1242,1250,1251,1254,1255,1262,1263,1264,1267,1268,1275,1276,1277,1280,1281,1288,1289,1290,1293,1294,1301,1302,1303,1306,1307,1314,1315,1316,1319,1320,1327,1328,1329,1333,1340,1341,1342,1353,1354,1355,1366,1367,1368,1372,1380,1384,1385,1393,1397,1398,1410,1411,1423,1424,1431,1432,1433,1436,1437,1444,1445,1446,1449,1450,1457,1458,1459,1462,1463,1470,1471,1472,1475,1476,1483,1484,1485,1488,1489,1496,1497,1498,1501,1502,1509,1510,1514,1515,1522,1523,1575,1576,1587,1588,1589,1600,1601,1602,1613,1614,1626,1627,1639,1640,1652,1653,1665,1666,1678,1679,1680,1691,1692,1693,1704,1705,1706,1769,1770,1771,1782,1783,1784,1795,1796,1797,1939,1940,1951,1952,1953,1964,1965,1966,1977,1978,1979,1990,1991,1992,2003,2004,2005,2016,2017,2018,2029,2030,2031,2042,2043,2044,2055,2056,2057,2069,2082,2133,2134,2135,2146,2147,2148,2159,2160,2161,2172,2173,2185,2186,2198,2199,2211,2212,2225,2226,2237,2238,2239,2250,2251,2252,2263,2264,2265,2276,2277,2289,2290,2302,2303,2315,2316,2328,2329,2330,2341,2342,2343,2354,2355,2356,2419,2420,2421,2432,2433,2434,2445,2446,2447,2484,2497,2510,2523,2536,2549,2550,2551,2562,2563,2564,2575,2576,2577,2588,2589,2590,2601,2614,2627,2640,2653};
const uint8_t menu_interval_24_value[]   = {1,255,15,255,224,31,255,240,127,1,252,120,60,112,28,64,4,63,255,192,63,255,192,63,255,192,63,255,192,224,224,224,224,224,224,63,255,192,63,255,192,63,255,192,63,255,192,64,4,112,28,120,60,127,1,252,31,255,240,15,255,224,1,255,127,255,192,127,255,192,127,255,192,255,192,1,255,192,3,255,192,3,179,128,3,177,192,3,177,192,3,177,192,3,159,192,3,159,192,1,223,128,15,3,128,3,240,3,252,1,255,128,63,192,7,192,7,192,63,192,1,255,128,3,252,3,240,3,128,3,128,3,128,3,128,1,128,1,128,3,255,192,112,3,255,192,112,3,255,192,255,255,255,255,255,255,255,255,123,128,112,112,1,251,128,60,112,1,249,192,30,112,3,249,192,7,112,3,153,192,3,240,3,153,192,1,240,3,153,192,240,3,155,192,1,255,128,1,255,128,7,255,62,7,126,127,135,127,199,255,231,3,129,192,224,247,3,129,192,224,127,3,129,192,224,63,31,255,192,224,31,31,255,192,224,31,31,255,128,112,15,31,255,112,7,3,128,255,192,1,255,192,3,255,192,3,192,3,128,3,128,1,128,1,192,3,255,192,3,255,192,3,255,192,115,255,192,115,255,192,115,255,192,123,128,1,251,128,1,249,192,3,249,192,3,153,192,3,153,192,3,153,192,3,155,192,1,255,128,1,255,128,255,126,1,255,192,3,255,192,3,255,192,3,192,3,128,1,128,1,128,255,192,1,255,192,3,255,192,3,255,192,3,128,3,128,1,128,1,192,3,255,192,3,255,192,3,255,192,115,255,192,115,255,192,115,255,192,56,56,56,56,56,63,255,192,63,255,192,63,255,192,63,255,192,56,56,56,56,56};



const uint16_t degree_address[]   = {1407,1419,1420,1432,1433,1445,1446,1458,1459,1471,1472,1484,1485,1497,1498,1510,1511,1524};
const uint8_t degree_value[]   = {96,1,248,3,252,7,14,7,14,7,14,7,158,3,252,1,248,96};

const uint16_t f_address[]   = {1042,1043,1055,1056,1068,1069,1081,1082,1094,1095,1096,1107,1108,1109,1120,1121,1122,1133,1134,1135,1146,1147,1148,1159,1160,1161,1172,1173,1174,1185,1186,1187,1198,1199,1200,1211,1212,1213,1224,1225,1226,1227,1228,1237,1238,1239,1240,1241,1250,1251,1252,1253,1254,1263,1264,1265,1266,1267,1276,1277,1278,1279,1280};
const uint8_t f_value[]   = {3,224,3,224,3,224,3,224,3,224,124,3,224,124,3,224,124,3,224,124,3,224,124,3,224,124,3,224,124,3,224,124,3,224,124,3,224,124,3,255,255,255,224,3,255,255,255,224,3,255,255,255,224,3,255,255,255,224,3,255,255,255,224};

const uint16_t min_max_num_address[]   = {157,169,170,182,183,195,196,208,209,260,261,273,286,313,325,326,338,339,351,352,364,365,378,403,404,416,417,429,430,442,443,481,482,494,495,507,508,520,521,546,551,552,559,564,565,570,572,573,583,585,586,588,598,599,601,604,606,607,616,617,619,620,622,629,630,635,638,642,648,650,651,653,655,661,663,664,666,668,669,672,674,676,677,679,681,682,684,685,687,692,695,697,698,700,705,710,711,713,715,716,718,720,721,723,724,728,729,731,733,734,736,737,739,741,742,746,747,749,750,752,754,755,759,760,765,769,770,772,773,778,781,782,783,785,786,788,789,791,793,794,796,798,799,801,802,804,806,807,814,815,817,819,820,822,825,833,835,837,838,841,843,846,847,848,849,850,854,856,860,861,862,863,866,867,868,869,871,872,874,876,879,880,881,882,884,885,887,889,890,893,895,897,898,900,902,903,906,908,910,911,913,915,919,921,925,926,927,928,931,932,934,937,938,939,941,942,944,945,946,947,949,950,952,954,955,957,958,959,960,962,963,965,968,971,973,975,976,984,986,988,989,1040,1041,1053,1066,1093,1105,1106,1118,1119,1131,1132,1144,1145,1158,1183,1184,1196,1197,1209,1210,1222,1223,1261,1262,1274,1275,1287,1288,1300,1301,1326,1339,1352,1353,1365,1366,1378,1379,1418,1430,1431,1443,1444,1456,1457,1495,1496,1508,1509,1521,1522,1534,1535,1561,1573,1574,1586,1587,1599,1600,1613,1626,1651,1652,1664,1665,1677,1678,1690,1691,1717,1729,1730,1742,1743,1755,1756,1768,1769,1820,1821,1833,1846,1873,1885,1886,1898,1899,1911,1912,1924,1925,1938};
const uint8_t min_max_num_value[]   = {8,3,136,4,232,4,56,6,8,7,248,2,1,192,7,240,4,8,4,8,3,240,192,3,224,4,112,4,88,7,192,3,120,4,200,4,136,3,120,4,48,192,7,48,192,195,5,224,195,4,120,195,4,8,195,64,1,134,48,192,1,134,1,59,192,195,248,15,239,6,136,127,15,60,3,136,255,59,128,254,60,1,240,192,48,192,1,254,238,192,64,1,128,195,192,1,128,1,4,240,255,15,192,1,128,5,8,255,31,192,1,254,63,5,8,54,192,1,254,127,7,152,54,192,219,6,255,54,192,219,32,6,255,55,192,13,254,219,7,248,192,3,128,13,254,223,3,32,1,128,14,1,160,3,192,96,63,15,192,6,3,32,7,248,1,254,126,63,7,224,1,248,15,240,7,248,3,112,120,30,15,192,7,224,4,136,15,3,192,240,120,4,136,30,7,128,30,15,6,8,248,62,60,30,7,224,1,248,1,240,248,8,3,254,255,128,15,192,7,224,3,136,31,7,192,7,252,3,254,4,232,1,64,62,31,4,56,2,1,6,8,7,248,2,1,192,7,240,4,8,4,8,3,240,192,3,224,4,112,4,88,7,192,3,120,4,200,4,136,3,120,4,7,5,224,4,120,4,8,248,6,136,3,136,1,240,4,240,5,8,5,8,7,152,32,7,248,3,32,1,160,96,32,3,112,4,136,4,136,6,8,8,3,136,4,232,4,56,6,8,7,248,2,1,192,7,240,4,8,4,8,3,240,192};

void writeCMD(uint8_t command)
{
 // ePaper_DC_0;
 //  ePaper_CS_0;
 // SPI.transfer(command);
 // ePaper_CS_1;

    SPI_Delay(1);
    EPD_W21_CS_0;                   
	EPD_W21_DC_0;		// command write
	SPI_Write(command);
	EPD_W21_CS_1;
}

//this function will take in a byte and send it to the display with the 
//command bit high for data transmission
void writeData(uint8_t data)
{
//  ePaper_DC_1;
//  ePaper_CS_0;
//  SPI.transfer(data);
//  ePaper_CS_1;

    SPI_Delay(1);
    EPD_W21_CS_0;                   
	EPD_W21_DC_1;		// command write
	SPI_Write(data);
	EPD_W21_CS_1;
}

//===========================================================================


void initEPD()
{
  int i;
  //-----------------------------------------------------------------------------
  //more detail on the following commands and additional commands not used here  
  //can be found on the CFAP104212E0-0213 datasheet on the Crystalfontz website 
  //-----------------------------------------------------------------------------

    //reset driver
  ePaper_RST_0;
   SPI_Delay(200);
  ePaper_RST_1;
   SPI_Delay(200);
  
  //Booster Soft Start
  writeCMD(0x06);
  writeData(0x17);
  writeData(0x17);
  writeData(0x17);

  //Power On
  writeCMD(0x04);
  //wait until powered on
  display_status();

  writeCMD(0x00);
  writeData(0x13);

  //Resolution
  writeCMD(0x61);
  writeData(0x68);  
  writeData(0x00); 
  writeData(0xd4);
//  writeData(HRES);  
//  writeData(VRES>>8); 
//  writeData(VRES&0xff);

  //Vcom and data interval setting
  writeCMD(0x50);
  writeData(0x67);
}


//================================================================================
void Load_Flash_Image_To_Display_RAM(uint16_t width_pixels,
  uint16_t height_pixels,
  const uint8_t *BW_image,
  const uint8_t *Y_image)
{
  int i;
  //Index into *image, that works with pgm_read_byte()
  uint16_t index;
  index = 0;

  //Get width_bytes from width_pixel, rounding up
  uint8_t width_bytes;
  width_bytes = (width_pixels + 7) >> 3;

  writeCMD(0x10);
  index = 0;
  for (uint16_t y = 0; y<height_pixels; y++)
  {
    for (uint8_t x = 0; x<width_bytes; x++)
    {
//      SPI.transfer(BW_image[index]);
      //SPI.transfer(0xff);
      writeData(0xff);
      index++;
      //delay(1);
    }
  }
                          
    writeCMD(0x13);
    index = 0;
    for (uint16_t y = 0; y<height_pixels; y++)
    {
      for (uint8_t x = 0; x<width_bytes; x++)
      {
        //SPI.transfer(Y_image[index]);
        writeData(BW_image[index]);
        index++;
        //delay(1);
      }
    }

  //Data stop
  writeCMD(0x11);
  
  writeCMD(0x12);
  //while (0 == digitalRead(EPD_READY));
  display_status();

    //Vcom and data interval setting
  //writeCMD(0x50);
  //writeData(0x67);

    //Power off
  //writeCMD(0x02);

  //Deep sleep
  //writeCMD(0x07);
  //writeData(0xa5);

}

void empty_array()
{
  int i;
  for(i=0;i<2756;i++)
  {
    Mono_1BPP[i] = 0;
    //Red_1BPP[i] = 0;
  }
}

//void update_display_black(const uint16_t *black_address,const uint8_t *black_value,int size_black)
//{
//  int i;
//    for(i=0;i<size_black;i++)
//  {
//    //address=pgm_read_word_near(black_address+i);
//address = black_address[i];
////Mono_1BPP[address]=Mono_1BPP[address]+pgm_read_byte(&black_value[i]);
//Mono_1BPP[address]=Mono_1BPP[address]+black_value[i];
//  }
//}

void update_display_black(const uint16_t *black_address,const uint8_t *black_value,int size_black,int offset) 
{
  int i;
    for(i=0;i<size_black;i++)
  {
		//address=pgm_read_word_near(black_address+i);
		address = black_address[i];
    address = address+offset;
		//Mono_1BPP[address]= Mono_1BPP[address]+pgm_read_byte(&black_value[i]);
		Mono_1BPP[address]=Mono_1BPP[address]+black_value[i];
  }
}

//void update_display_red(const uint16_t *red_address,const uint8_t *red_value,int size_red)
//{
//  int i;
//    for(i=0;i<size_red;i++)
//    {
//      //address=pgm_read_word_near(red_address+i);
//      //Red_1BPP[address]= Red_1BPP[address]+pgm_read_byte(&red_value[i]);
//      address=red_address[i];
//      Red_1BPP[address]= Red_1BPP[address]+red_value[i];

//    }
//}

void update_display_red(const uint16_t *red_address,const uint8_t *red_value,int size_red,int offset) 
{
  int i;
    for(i=0;i<size_red;i++)
  {
    //address=pgm_read_word_near(red_address+i);
    //address = address+offset;
    //Red_1BPP[address]= Red_1BPP[address]+pgm_read_byte(&red_value[i]);
      address=red_address[i];
address = address+offset;
      Red_1BPP[address]= Red_1BPP[address]+red_value[i];

  }
}

void wifi_symbol_3()
{
  size_1 = sizeof(wifi_symbol_3_address)/sizeof(uint16_t);
  update_display_black(wifi_symbol_3_address,wifi_symbol_3_value,size_1,0);
}	

void wifi_symbol_2()
{
  size_1 = sizeof(wifi_symbol_2_address)/sizeof(uint16_t);
  update_display_black(wifi_symbol_2_address,wifi_symbol_2_value,size_1,0);
}	

void wifi_symbol_1()
{
  size_1 = sizeof(wifi_symbol_1_address)/sizeof(uint16_t);
  update_display_black(wifi_symbol_1_address,wifi_symbol_1_value,size_1,0);
}	

void RF_symbol()
{
  size_1 = sizeof(RF_symbol_address)/sizeof(uint16_t);
  update_display_black(RF_symbol_address,RF_symbol_value,size_1,0);
}

void BLE_HID_symbol()
{
  size_1 = sizeof(BLE_HID_address)/sizeof(uint16_t);
  update_display_black(BLE_HID_address,BLE_HID_value,size_1,0);
}


void batt_full()
{
  size_1 = sizeof(batt_full_address)/sizeof(uint16_t);
  update_display_black(batt_full_address,batt_full_value,size_1,0);
}

void batt_empty()
{
    size_1 = sizeof(batt_empty_address)/sizeof(uint16_t);
    update_display_red(batt_empty_address,batt_empty_value,size_1,0);
}

void degree_symbol()
{
  size_1 = sizeof(degree_address)/sizeof(uint16_t);
  update_display_black(degree_address,degree_value,size_1,0);
}

void f_symbol()
{
  size_1 = sizeof(f_address)/sizeof(uint16_t);
  update_display_black(f_address,f_value,size_1,0); 
}

void percentage_symbol()
{
  size_1 = sizeof(percentage_address)/sizeof(uint16_t);
  update_display_black(percentage_address,percentage_value,size_1,0);   
}

void percentage_symbol_1()
{
  size_1 = sizeof(percentage_address_1)/sizeof(uint16_t);
  update_display_black(percentage_address_1,percentage_value_1,size_1,0);   
}

void percentage_symbol_red()
{
  size_1 = sizeof(percentage_address)/sizeof(uint16_t);
  update_display_red(percentage_address,percentage_value,size_1,0);   
}

void min_max_num()
{
  size_1 = sizeof(min_max_num_address)/sizeof(uint16_t);
  update_display_black(min_max_num_address,min_max_num_value,size_1,0);
}

void batt_80()
{
  size_1 = sizeof(batt_80_address)/sizeof(uint16_t);
  update_display_black(batt_80_address,batt_80_value,size_1,0);
}

void batt_60()
{
  size_1 = sizeof(batt_60_address)/sizeof(uint16_t);
  update_display_black(batt_60_address,batt_60_value,size_1,0);
}

void batt_40()
{
  size_1 = sizeof(batt_40_address)/sizeof(uint16_t);
  update_display_black(batt_40_address,batt_40_value,size_1,0);
}

void id()
{
  size_1 = sizeof(id_address)/sizeof(uint16_t);
  update_display_black(id_address,id_value,size_1,0);
}

void demo()
{
  size_1 = sizeof(demo_address)/sizeof(uint16_t);
  update_display_black(demo_address,demo_value,size_1,0);  
}

void min_max()
{
  size_1 = sizeof(min_max_address)/sizeof(uint16_t);
  update_display_black(min_max_address,min_max_value,size_1,0);    
}

void degree_f()
{
  size_1 = sizeof(degree_f_address)/sizeof(uint16_t);
  update_display_black(degree_f_address,degree_f_value,size_1,0); 
}

void degree_single_f()
{
  size_1 = sizeof(degree_single_f_address)/sizeof(uint16_t);
  update_display_black(degree_single_f_address,degree_single_f_value,size_1,0); 
}

void degree_f_1()
{
  size_1 = sizeof(degree_f_1_address)/sizeof(uint16_t);
  update_display_black(degree_f_1_address,degree_f_1_value,size_1,0); 
}

void degree_f_red()
{
  size_1 = sizeof(degree_f_address)/sizeof(uint16_t);
  update_display_red(degree_f_address,degree_f_value,size_1,0); 
}

void degree_c()
{
  size_1 = sizeof(degree_c_address)/sizeof(uint16_t);
  update_display_black(degree_c_address,degree_c_value,size_1,0); 
}

void degree_single_c()
{
  size_1 = sizeof(degree_single_c_address)/sizeof(uint16_t);
  update_display_black(degree_single_c_address,degree_single_c_value,size_1,0); 
}


void degree_c_1()
{
  size_1 = sizeof(degree_c_1_address)/sizeof(uint16_t);
  update_display_black(degree_c_1_address,degree_c_1_value,size_1,0); 
}

void degree_c_red()
{
  size_1 = sizeof(degree_c_address)/sizeof(uint16_t);
  update_display_red(degree_c_address,degree_c_value,size_1,0); 
}


void constant()
{
  size_1 = sizeof(constant_address)/sizeof(uint16_t);
  update_display_red(constant_address,constant_value,size_1,0); 
}

void constant_dualchannel()
{
  size_1 = sizeof(constant_dualchannel_address)/sizeof(uint16_t);
  update_display_red(constant_dualchannel_address,constant_dualchannel_value,size_1,0); 
}

void constant_singlechannelCH1()
{
  size_1 = sizeof(constant_singlechannelCH1_address)/sizeof(uint16_t);
  update_display_red(constant_singlechannelCH1_address,constant_singlechannelCH1_value,size_1,0); 
}

void constant_singlechannelCH2()
{
  size_1 = sizeof(constant_singlechannelCH2_address)/sizeof(uint16_t);
  update_display_red(constant_singlechannelCH2_address,constant_singlechannelCH2_value,size_1,0); 
}


void const_dataonapp()
{
  size_1 = sizeof(const_dataonapp_address)/sizeof(uint16_t);
  update_display_red(const_dataonapp_address,const_dataonapp_value,size_1,0); 
}

void year_one(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(one_year_address)/sizeof(uint16_t);
  update_display_black(one_year_address,one_year_value,size_1,offset);  
}

void year_two(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(two_year_address)/sizeof(uint16_t);
  update_display_black(two_year_address,two_year_value,size_1,offset);  
}

void year_three(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(three_year_address)/sizeof(uint16_t);
  update_display_black(three_year_address,three_year_value,size_1,offset);  
}

void year_four(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(four_year_address)/sizeof(uint16_t);
  update_display_black(four_year_address,four_year_value,size_1,offset);  
}

void year_five(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(five_year_address)/sizeof(uint16_t);
  update_display_black(five_year_address,five_year_value,size_1,offset);  
}

void year_six(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(six_year_address)/sizeof(uint16_t);
  update_display_black(six_year_address,six_year_value,size_1,offset);  
}

void year_seven(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(seven_year_address)/sizeof(uint16_t);
  update_display_black(seven_year_address,seven_year_value,size_1,offset);  
}

void year_eight(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(eight_year_address)/sizeof(uint16_t);
  update_display_black(eight_year_address,eight_year_value,size_1,offset);  
}

void year_nine(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(nine_year_address)/sizeof(uint16_t);
  update_display_black(nine_year_address,nine_year_value,size_1,offset);  
}

void year_zero(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(zero_year_address)/sizeof(uint16_t);
  update_display_black(zero_year_address,zero_year_value,size_1,offset);  
}

void month_one(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(one_month_address)/sizeof(uint16_t);
  update_display_black(one_month_address,one_month_value,size_1,offset);  
}

void month_two(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(two_month_address)/sizeof(uint16_t);
  update_display_black(two_month_address,two_month_value,size_1,offset);  
}

void month_three(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(three_month_address)/sizeof(uint16_t);
  update_display_black(three_month_address,three_month_value,size_1,offset);  
}

void month_four(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(four_month_address)/sizeof(uint16_t);
  update_display_black(four_month_address,four_month_value,size_1,offset);  
}

void month_five(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(five_month_address)/sizeof(uint16_t);
  update_display_black(five_month_address,five_month_value,size_1,offset);  
}

void month_six(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(six_month_address)/sizeof(uint16_t);
  update_display_black(six_month_address,six_month_value,size_1,offset);  
}

void month_seven(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(seven_month_address)/sizeof(uint16_t);
  update_display_black(seven_month_address,seven_month_value,size_1,offset);  
}

void month_eight(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(eight_month_address)/sizeof(uint16_t);
  update_display_black(eight_month_address,eight_month_value,size_1,offset);  
}

void month_nine(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(nine_month_address)/sizeof(uint16_t);
  update_display_black(nine_month_address,nine_month_value,size_1,offset);  
}

void month_zero(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(zero_month_address)/sizeof(uint16_t);
  update_display_black(zero_month_address,zero_month_value,size_1,offset);  
}

void date_one(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(one_date_address)/sizeof(uint16_t);
  update_display_black(one_date_address,one_date_value,size_1,offset);  
}

void date_two(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(two_date_address)/sizeof(uint16_t);
  update_display_black(two_date_address,two_date_value,size_1,offset);  
}

void date_three(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(three_date_address)/sizeof(uint16_t);
  update_display_black(three_date_address,three_date_value,size_1,offset);  
}

void date_four(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(four_date_address)/sizeof(uint16_t);
  update_display_black(four_date_address,four_date_value,size_1,offset);  
}

void date_five(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(five_date_address)/sizeof(uint16_t);
  update_display_black(five_date_address,five_date_value,size_1,offset);  
}

void date_six(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(six_date_address)/sizeof(uint16_t);
  update_display_black(six_date_address,six_date_value,size_1,offset);  
}

void date_seven(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(seven_date_address)/sizeof(uint16_t);
  update_display_black(seven_date_address,seven_date_value,size_1,offset);  
}

void date_eight(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(eight_date_address)/sizeof(uint16_t);
  update_display_black(eight_date_address,eight_date_value,size_1,offset);  
}

void date_nine(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(nine_date_address)/sizeof(uint16_t);
  update_display_black(nine_date_address,nine_date_value,size_1,offset);  
}

void date_zero(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(zero_date_address)/sizeof(uint16_t);
  update_display_black(zero_date_address,zero_date_value,size_1,offset);  
}

void hour_one(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(one_hour_address)/sizeof(uint16_t);
  update_display_black(one_hour_address,one_hour_value,size_1,offset);  
}

void hour_two(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(two_hour_address)/sizeof(uint16_t);
  update_display_black(two_hour_address,two_hour_value,size_1,offset);  
}

void hour_three(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(three_hour_address)/sizeof(uint16_t);
  update_display_black(three_hour_address,three_hour_value,size_1,offset);  
}

void hour_four(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(four_hour_address)/sizeof(uint16_t);
  update_display_black(four_hour_address,four_hour_value,size_1,offset);  
}

void hour_five(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(five_hour_address)/sizeof(uint16_t);
  update_display_black(five_hour_address,five_hour_value,size_1,offset);  
}

void hour_six(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(six_hour_address)/sizeof(uint16_t);
  update_display_black(six_hour_address,six_hour_value,size_1,offset);  
}

void hour_seven(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(seven_hour_address)/sizeof(uint16_t);
  update_display_black(seven_hour_address,seven_hour_value,size_1,offset);  
}

void hour_eight(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(eight_hour_address)/sizeof(uint16_t);
  update_display_black(eight_hour_address,eight_hour_value,size_1,offset);  
}

void hour_nine(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(nine_hour_address)/sizeof(uint16_t);
  update_display_black(nine_hour_address,nine_hour_value,size_1,offset);  
}

void hour_zero(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(zero_hour_address)/sizeof(uint16_t);
  update_display_black(zero_hour_address,zero_hour_value,size_1,offset);  
}

void min_one(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(one_min_address)/sizeof(uint16_t);
  update_display_black(one_min_address,one_min_value,size_1,offset);  
}

void min_two(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(two_min_address)/sizeof(uint16_t);
  update_display_black(two_min_address,two_min_value,size_1,offset);  
}

void min_three(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(three_min_address)/sizeof(uint16_t);
  update_display_black(three_min_address,three_min_value,size_1,offset);  
}

void min_four(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(four_min_address)/sizeof(uint16_t);
  update_display_black(four_min_address,four_min_value,size_1,offset);  
}

void min_five(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(five_min_address)/sizeof(uint16_t);
  update_display_black(five_min_address,five_min_value,size_1,offset);  
}

void min_six(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(six_min_address)/sizeof(uint16_t);
  update_display_black(six_min_address,six_min_value,size_1,offset);  
}

void min_seven(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(seven_min_address)/sizeof(uint16_t);
  update_display_black(seven_min_address,seven_min_value,size_1,offset);  
}

void min_eight(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(eight_min_address)/sizeof(uint16_t);
  update_display_black(eight_min_address,eight_min_value,size_1,offset);  
}

void min_nine(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(nine_min_address)/sizeof(uint16_t);
  update_display_black(nine_min_address,nine_min_value,size_1,offset);  
}

void min_zero(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(zero_min_address)/sizeof(uint16_t);
  update_display_black(zero_min_address,zero_min_value,size_1,offset);  
}

void one(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(one_address)/sizeof(uint16_t);
  update_display_black(one_address,one_value,size_1,offset);  
}

void two(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(two_address)/sizeof(uint16_t);
  update_display_black(two_address,two_value,size_1,offset);  
}

void three(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(three_address)/sizeof(uint16_t);
  update_display_black(three_address,three_value,size_1,offset); 
}

void four(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(four_address)/sizeof(uint16_t);
  update_display_black(four_address,four_value,size_1,offset); 
}

void five(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(five_address)/sizeof(uint16_t);
  update_display_black(five_address,five_value,size_1,offset); 
}

void six(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(six_address)/sizeof(uint16_t);
  update_display_black(six_address,six_value,size_1,offset); 
}

void seven(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(seven_address)/sizeof(uint16_t);
  update_display_black(seven_address,seven_value,size_1,offset); 
}

void eight(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(eight_address)/sizeof(uint16_t);
  update_display_black(eight_address,eight_value,size_1,offset); 
}

void nine(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(nine_address)/sizeof(uint16_t);
  update_display_black(nine_address,nine_value,size_1,offset); 
}

void zero(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(zero_address)/sizeof(uint16_t);
  update_display_black(zero_address,zero_value,size_1,offset); 
}

void minus(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(minus_address)/sizeof(uint16_t);
  update_display_black(minus_address,minus_value,size_1,offset); 
}

void dot(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(dot_address)/sizeof(uint16_t);
  update_display_black(dot_address,dot_value,size_1,offset); 
}


//Single temperature

void single_one(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_one_address)/sizeof(uint16_t);
  update_display_black(single_one_address,single_one_value,size_1,offset);  
}

void single_two(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_two_address)/sizeof(uint16_t);
  update_display_black(single_two_address,single_two_value,size_1,offset);  
}

void single_three(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_three_address)/sizeof(uint16_t);
  update_display_black(single_three_address,single_three_value,size_1,offset); 
}

void single_four(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_four_address)/sizeof(uint16_t);
  update_display_black(single_four_address,single_four_value,size_1,offset); 
}

void single_five(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_five_address)/sizeof(uint16_t);
  update_display_black(single_five_address,single_five_value,size_1,offset); 
}

void single_six(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_six_address)/sizeof(uint16_t);
  update_display_black(single_six_address,single_six_value,size_1,offset); 
}

void single_seven(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_seven_address)/sizeof(uint16_t);
  update_display_black(single_seven_address,single_seven_value,size_1,offset); 
}

void single_eight(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_eight_address)/sizeof(uint16_t);
  update_display_black(single_eight_address,single_eight_value,size_1,offset); 
}

void single_nine(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_nine_address)/sizeof(uint16_t);
  update_display_black(single_nine_address,single_nine_value,size_1,offset); 
}

void single_zero(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_zero_address)/sizeof(uint16_t);
  update_display_black(single_zero_address,single_zero_value,size_1,offset); 
}

void single_minus(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_minus_address)/sizeof(uint16_t);
  update_display_black(single_minus_address,single_minus_value,size_1,offset); 
}

void single_dot(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_dot_address)/sizeof(uint16_t);
  update_display_black(single_dot_address,single_dot_value,size_1,offset); 
}




void one_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(one_address)/sizeof(uint16_t);
  update_display_red(one_address,one_value,size_1,offset);  
}

void two_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(two_address)/sizeof(uint16_t);
  update_display_red(two_address,two_value,size_1,offset);  
}

void three_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(three_address)/sizeof(uint16_t);
  update_display_red(three_address,three_value,size_1,offset); 
}

void four_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(four_address)/sizeof(uint16_t);
  update_display_red(four_address,four_value,size_1,offset); 
}

void five_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(five_address)/sizeof(uint16_t);
  update_display_red(five_address,five_value,size_1,offset); 
}

void six_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(six_address)/sizeof(uint16_t);
  update_display_red(six_address,six_value,size_1,offset); 
}

void seven_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(seven_address)/sizeof(uint16_t);
  update_display_red(seven_address,seven_value,size_1,offset); 
}

void eight_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(eight_address)/sizeof(uint16_t);
  update_display_red(eight_address,eight_value,size_1,offset); 
}

void nine_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(nine_address)/sizeof(uint16_t);
  update_display_red(nine_address,nine_value,size_1,offset); 
}

void zero_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(zero_address)/sizeof(uint16_t);
  update_display_red(zero_address,zero_value,size_1,offset); 
}

void minus_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(minus_address)/sizeof(uint16_t);
  update_display_red(minus_address,minus_value,size_1,offset); 
}

void dot_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(dot_address)/sizeof(uint16_t);
  update_display_red(dot_address,dot_value,size_1,offset); 
}


//dual temp
void temp_min_one(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_one_address)/sizeof(uint16_t);
  update_display_black(temp_min_one_address,temp_min_one_value,size_1,offset);  
}

void temp_min_two(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_two_address)/sizeof(uint16_t);
  update_display_black(temp_min_two_address,temp_min_two_value,size_1,offset);  
}

void temp_min_three(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_three_address)/sizeof(uint16_t);
  update_display_black(temp_min_three_address,temp_min_three_value,size_1,offset);  
}

void temp_min_four(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_four_address)/sizeof(uint16_t);
  update_display_black(temp_min_four_address,temp_min_four_value,size_1,offset);  
}

void temp_min_five(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_five_address)/sizeof(uint16_t);
  update_display_black(temp_min_five_address,temp_min_five_value,size_1,offset);  
}

void temp_min_six(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_six_address)/sizeof(uint16_t);
  update_display_black(temp_min_six_address,temp_min_six_value,size_1,offset);  
}

void temp_min_seven(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_seven_address)/sizeof(uint16_t);
  update_display_black(temp_min_seven_address,temp_min_seven_value,size_1,offset);  
}

void temp_min_eight(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_eight_address)/sizeof(uint16_t);
  update_display_black(temp_min_eight_address,temp_min_eight_value,size_1,offset);  
}

void temp_min_nine(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_nine_address)/sizeof(uint16_t);
  update_display_black(temp_min_nine_address,temp_min_nine_value,size_1,offset);  
}

void temp_min_zero(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_zero_address)/sizeof(uint16_t);
  update_display_black(temp_min_zero_address,temp_min_zero_value,size_1,offset);  
}

void temp_min_minus(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_minus_address)/sizeof(uint16_t);
  update_display_black(temp_min_minus_address,temp_min_minus_value,size_1,offset);  
}

void temp_min_dot(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_dot_address)/sizeof(uint16_t);
  update_display_black(temp_min_dot_address,temp_min_dot_value,size_1,offset);  
}


//single temp
void single_temp_min_one(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_temp_min_one_address)/sizeof(uint16_t);
  update_display_black(single_temp_min_one_address,single_temp_min_one_value,size_1,offset);  
}

void single_temp_min_two(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_temp_min_two_address)/sizeof(uint16_t);
  update_display_black(single_temp_min_two_address,single_temp_min_two_value,size_1,offset);  
}

void single_temp_min_three(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_temp_min_three_address)/sizeof(uint16_t);
  update_display_black(single_temp_min_three_address,single_temp_min_three_value,size_1,offset);  
}

void single_temp_min_four(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_temp_min_four_address)/sizeof(uint16_t);
  update_display_black(single_temp_min_four_address,single_temp_min_four_value,size_1,offset);  
}

void single_temp_min_five(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_temp_min_five_address)/sizeof(uint16_t);
  update_display_black(single_temp_min_five_address,single_temp_min_five_value,size_1,offset);  
}

void single_temp_min_six(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_temp_min_six_address)/sizeof(uint16_t);
  update_display_black(single_temp_min_six_address,single_temp_min_six_value,size_1,offset);  
}

void single_temp_min_seven(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_temp_min_seven_address)/sizeof(uint16_t);
  update_display_black(single_temp_min_seven_address,single_temp_min_seven_value,size_1,offset);  
}

void single_temp_min_eight(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_temp_min_eight_address)/sizeof(uint16_t);
  update_display_black(single_temp_min_eight_address,single_temp_min_eight_value,size_1,offset);  
}

void single_temp_min_nine(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_temp_min_nine_address)/sizeof(uint16_t);
  update_display_black(single_temp_min_nine_address,single_temp_min_nine_value,size_1,offset);  
}

void single_temp_min_zero(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_temp_min_zero_address)/sizeof(uint16_t);
  update_display_black(single_temp_min_zero_address,single_temp_min_zero_value,size_1,offset);  
}

void single_temp_min_minus(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_temp_min_minus_address)/sizeof(uint16_t);
  update_display_black(single_temp_min_minus_address,single_temp_min_minus_value,size_1,offset);  
}

void single_temp_min_dot(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(single_temp_min_dot_address)/sizeof(uint16_t);
  update_display_black(single_temp_min_dot_address,single_temp_min_dot_value,size_1,offset);  
}


void temp_min_one_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_one_address)/sizeof(uint16_t);
  update_display_red(temp_min_one_address,temp_min_one_value,size_1,offset);  
}

void temp_min_two_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_two_address)/sizeof(uint16_t);
  update_display_red(temp_min_two_address,temp_min_two_value,size_1,offset);  
}

void temp_min_three_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_three_address)/sizeof(uint16_t);
  update_display_red(temp_min_three_address,temp_min_three_value,size_1,offset);  
}

void temp_min_four_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_four_address)/sizeof(uint16_t);
  update_display_red(temp_min_four_address,temp_min_four_value,size_1,offset);  
}

void temp_min_five_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_five_address)/sizeof(uint16_t);
  update_display_red(temp_min_five_address,temp_min_five_value,size_1,offset);  
}

void temp_min_six_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_six_address)/sizeof(uint16_t);
  update_display_red(temp_min_six_address,temp_min_six_value,size_1,offset);  
}

void temp_min_seven_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_seven_address)/sizeof(uint16_t);
  update_display_red(temp_min_seven_address,temp_min_seven_value,size_1,offset);  
}

void temp_min_eight_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_eight_address)/sizeof(uint16_t);
  update_display_red(temp_min_eight_address,temp_min_eight_value,size_1,offset);  
}

void temp_min_nine_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_nine_address)/sizeof(uint16_t);
  update_display_red(temp_min_nine_address,temp_min_nine_value,size_1,offset);  
}

void temp_min_zero_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_zero_address)/sizeof(uint16_t);
  update_display_red(temp_min_zero_address,temp_min_zero_value,size_1,offset);  
}

void temp_min_minus_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_minus_address)/sizeof(uint16_t);
  update_display_red(temp_min_minus_address,temp_min_minus_value,size_1,offset);  
}

void temp_min_dot_red(int offset,int delta,int torh)
{
  offset = offset-delta+torh;
  size_1 = sizeof(temp_min_dot_address)/sizeof(uint16_t);
  update_display_red(temp_min_dot_address,temp_min_dot_value,size_1,offset);  
}

void display_temp(double yo_10)
{
	
  int i;
  //temp_string = String(yo_10);
  //size_1 = sizeof(temp_string);

  size_1 = double_to_string(yo_10,temp_string); 

  //Flushing older values out b replacing it with zero
  
  for(i=0;i<size_1;i++)
  {
    temp_string[i] = '0';
  }

  //temp_string = String(yo_10);
  //size_1 = sizeof(temp_string);

  size_1 = double_to_string(yo_10,temp_string); 

  
  for(i=0;i<size_1;i++)
  {
    if(temp_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_t,delta_3,temp_string[0]);
      display_epaper(dis_t,delta_5,temp_string[2]);

      display_epaper(dis_t,delta_4,temp_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_t,delta_2,temp_string[0]);
      display_epaper(dis_t,delta_3,temp_string[1]);
      display_epaper(dis_t,delta_5,temp_string[3]);

      display_epaper(dis_t,delta_4,temp_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_t,delta_1,temp_string[0]);
      display_epaper(dis_t,delta_2,temp_string[1]);
      display_epaper(dis_t,delta_3,temp_string[2]);
      display_epaper(dis_t,delta_5,temp_string[4]);

      display_epaper(dis_t,delta_4,temp_string[3]);
      break;
    }
  }
  
}



void display_singletemp(double yo_18)
{
	
  int i;
  //temp_string = String(yo_10);
  //size_1 = sizeof(temp_string);

  size_1 = double_to_string(yo_18,temp_string); 

  //Flushing older values out b replacing it with zero
  
  for(i=0;i<size_1;i++)
  {
    temp_string[i] = '0';
  }

  //temp_string = String(yo_10);
  //size_1 = sizeof(temp_string);

  size_1 = double_to_string(yo_18,temp_string); 

  
  for(i=0;i<size_1;i++)
  {
    if(temp_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_singlet,delta_single_3,temp_string[0]);
      display_epaper(dis_singlet,delta_single_5,temp_string[2]);

      display_epaper(dis_singlet,delta_single_4,temp_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_singlet,delta_single_2,temp_string[0]);
      display_epaper(dis_singlet,delta_single_3,temp_string[1]);
      display_epaper(dis_singlet,delta_single_5,temp_string[3]);

      display_epaper(dis_singlet,delta_single_4,temp_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_singlet,delta_single_1,temp_string[0]);
      display_epaper(dis_singlet,delta_single_2,temp_string[1]);
      display_epaper(dis_singlet,delta_single_3,temp_string[2]);
      display_epaper(dis_singlet,delta_single_5,temp_string[4]);

      display_epaper(dis_singlet,delta_single_4,temp_string[3]);
      break;
    }
  }
  
}




void display_temp_red(double yo_16)
{
  int i;
  //temp_string = String(yo_16);
  //size_1 = sizeof(temp_string);

  size_1 = double_to_string(yo_16,temp_string); 


  //Flushing older values out b replacing it with zero
  
  for(i=0;i<size_1;i++)
  {
    temp_string[i] = '0';
  }

  //temp_string = String(yo_16);
  //size_1 = sizeof(temp_string);

size_1 = double_to_string(yo_16,temp_string); 

  
  for(i=0;i<size_1;i++)
  {
    if(temp_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_t_red,delta_3,temp_string[0]);
      display_epaper(dis_t_red,delta_5,temp_string[2]);

      display_epaper(dis_t_red,delta_4,temp_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_t_red,delta_2,temp_string[0]);
      display_epaper(dis_t_red,delta_3,temp_string[1]);
      display_epaper(dis_t_red,delta_5,temp_string[3]);

      display_epaper(dis_t_red,delta_4,temp_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_t_red,delta_1,temp_string[0]);
      display_epaper(dis_t_red,delta_2,temp_string[1]);
      display_epaper(dis_t_red,delta_3,temp_string[2]);
      display_epaper(dis_t_red,delta_5,temp_string[4]);

      display_epaper(dis_t_red,delta_4,temp_string[3]);
      break;
    }
  }
  
}



void display_humi(double yo_11)
{
  int i;
  //humi_string = String(yo_11);
  //size_1 = sizeof(humi_string);

size_1 = double_to_string(yo_11,humi_string); 

  for(i=0;i<size_1;i++)
  {
    humi_string[i] = '0';
  }

  //humi_string = String(yo_11);
  //size_1 = sizeof(humi_string);

size_1 = double_to_string(yo_11,humi_string); 
  
  for(i=0;i<size_1;i++)
  {
    if(humi_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_h,delta_3,humi_string[0]);
      display_epaper(dis_h,delta_5,humi_string[2]);

      display_epaper(dis_h,delta_4,humi_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_h,delta_2,humi_string[0]);
      display_epaper(dis_h,delta_3,humi_string[1]);
      display_epaper(dis_h,delta_5,humi_string[3]);

      display_epaper(dis_h,delta_4,humi_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_h,delta_1,humi_string[0]);
      display_epaper(dis_h,delta_2,humi_string[1]);
      display_epaper(dis_h,delta_3,humi_string[2]);
      display_epaper(dis_h,delta_5,humi_string[4]);

      display_epaper(dis_h,delta_4,humi_string[3]);
      break;
    }
  }
  
}


void display_singlehumi(double yo_19)
{
  int i;
  //humi_string = String(yo_11);
  //size_1 = sizeof(humi_string);

size_1 = double_to_string(yo_19,humi_string); 

  for(i=0;i<size_1;i++)
  {
    humi_string[i] = '0';
  }

  //humi_string = String(yo_11);
  //size_1 = sizeof(humi_string);

size_1 = double_to_string(yo_19,humi_string); 
  
  for(i=0;i<size_1;i++)
  {
    if(humi_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_singleh,delta_single_3,humi_string[0]);
      display_epaper(dis_singleh,delta_single_5,humi_string[2]);

      display_epaper(dis_singleh,delta_single_4,humi_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_singleh,delta_single_2,humi_string[0]);
      display_epaper(dis_singleh,delta_single_3,humi_string[1]);
      display_epaper(dis_singleh,delta_single_5,humi_string[3]);

      display_epaper(dis_singleh,delta_single_4,humi_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_singleh,delta_single_1,humi_string[0]);
      display_epaper(dis_singleh,delta_single_2,humi_string[1]);
      display_epaper(dis_singleh,delta_single_3,humi_string[2]);
      display_epaper(dis_singleh,delta_single_5,humi_string[4]);

      display_epaper(dis_singleh,delta_single_4,humi_string[3]);
      break;
    }
  }
  
}


void display_humi_red(double yo_11)
{
  int i;
  //humi_string = String(yo_11);
  //size_1 = sizeof(humi_string);

size_1 = double_to_string(yo_11,humi_string); 


  for(i=0;i<size_1;i++)
  {
    humi_string[i] = '0';
  }

  //humi_string = String(yo_11);
  //size_1 = sizeof(humi_string);

size_1 = double_to_string(yo_11,humi_string); 
  
  for(i=0;i<size_1;i++)
  {
    if(humi_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_h_red,delta_3,humi_string[0]);
      display_epaper(dis_h_red,delta_5,humi_string[2]);

      display_epaper(dis_h_red,delta_4,humi_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_h_red,delta_2,humi_string[0]);
      display_epaper(dis_h_red,delta_3,humi_string[1]);
      display_epaper(dis_h_red,delta_5,humi_string[3]);

      display_epaper(dis_h_red,delta_4,humi_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_h_red,delta_1,humi_string[0]);
      display_epaper(dis_h_red,delta_2,humi_string[1]);
      display_epaper(dis_h_red,delta_3,humi_string[2]);
      display_epaper(dis_h_red,delta_5,humi_string[4]);

      display_epaper(dis_h_red,delta_4,humi_string[3]);
      break;
    }
  }
  
}

void display_min_temp(double yo_12)
{
  int i;
  //temp_min_string = String(yo_12);
  //size_1 = sizeof(temp_min_string);

size_1 = double_to_string(yo_12,temp_min_string); 

  for(i=0;i<size_1;i++)
  {
    temp_min_string[i] = '0';
  }

  //temp_min_string = String(yo_12);
  //size_1 = sizeof(temp_min_string);

size_1 = double_to_string(yo_12,temp_min_string); 
  
  for(i=0;i<size_1;i++)
  {
    if(temp_min_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_min_t,delta_min_3,temp_min_string[0]);
      display_epaper(dis_min_t,delta_min_5,temp_min_string[2]);

      display_epaper(dis_min_t,delta_min_4,temp_min_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_min_t,delta_min_2,temp_min_string[0]);
      display_epaper(dis_min_t,delta_min_3,temp_min_string[1]);
      display_epaper(dis_min_t,delta_min_5,temp_min_string[3]);

      display_epaper(dis_min_t,delta_min_4,temp_min_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_min_t,delta_min_1,temp_min_string[0]);
      display_epaper(dis_min_t,delta_min_2,temp_min_string[1]);
      display_epaper(dis_min_t,delta_min_3,temp_min_string[2]);
      display_epaper(dis_min_t,delta_min_5,temp_min_string[4]);

      display_epaper(dis_min_t,delta_min_4,temp_min_string[3]);
      break;
    }
  }
}

//single temperature
void display_min_singletemp(double yo_20)
{
  int i;
  //temp_min_string = String(yo_12);
  //size_1 = sizeof(temp_min_string);

size_1 = double_to_string(yo_20,temp_min_string); 

  for(i=0;i<size_1;i++)
  {
    temp_min_string[i] = '0';
  }

  //temp_min_string = String(yo_12);
  //size_1 = sizeof(temp_min_string);

size_1 = double_to_string(yo_20,temp_min_string); 
  
  for(i=0;i<size_1;i++)
  {
    if(temp_min_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_min_singlet,delta_single_min_3,temp_min_string[0]);
      display_epaper(dis_min_singlet,delta_single_min_5,temp_min_string[2]);

      display_epaper(dis_min_singlet,delta_single_min_4,temp_min_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_min_singlet,delta_single_min_2,temp_min_string[0]);
      display_epaper(dis_min_singlet,delta_single_min_3,temp_min_string[1]);
      display_epaper(dis_min_singlet,delta_single_min_5,temp_min_string[3]);

      display_epaper(dis_min_singlet,delta_single_min_4,temp_min_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_min_singlet,delta_single_min_1,temp_min_string[0]);
      display_epaper(dis_min_singlet,delta_single_min_2,temp_min_string[1]);
      display_epaper(dis_min_singlet,delta_single_min_3,temp_min_string[2]);
      display_epaper(dis_min_singlet,delta_single_min_5,temp_min_string[4]);

      display_epaper(dis_min_singlet,delta_single_min_4,temp_min_string[3]);
      break;
    }
  }
}


void display_min_temp_red(double yo_17)
{
  int i;
  //temp_min_string = String(yo_17);
  //size_1 = sizeof(temp_min_string);

size_1 = double_to_string(yo_17,temp_min_string); 

  for(i=0;i<size_1;i++)
  {
    temp_min_string[i] = '0';
  }

  //temp_min_string = String(yo_17);
  //size_1 = sizeof(temp_min_string);

size_1 = double_to_string(yo_17,temp_min_string); 
  
  for(i=0;i<size_1;i++)
  {
    if(temp_min_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_min_t_red,delta_min_3,temp_min_string[0]);
      display_epaper(dis_min_t_red,delta_min_5,temp_min_string[2]);

      display_epaper(dis_min_t_red,delta_min_4,temp_min_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_min_t_red,delta_min_2,temp_min_string[0]);
      display_epaper(dis_min_t_red,delta_min_3,temp_min_string[1]);
      display_epaper(dis_min_t_red,delta_min_5,temp_min_string[3]);

      display_epaper(dis_min_t_red,delta_min_4,temp_min_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_min_t_red,delta_min_1,temp_min_string[0]);
      display_epaper(dis_min_t_red,delta_min_2,temp_min_string[1]);
      display_epaper(dis_min_t_red,delta_min_3,temp_min_string[2]);
      display_epaper(dis_min_t_red,delta_min_5,temp_min_string[4]);

      display_epaper(dis_min_t_red,delta_min_4,temp_min_string[3]);
      break;
    }
  }
}

//dual temp
void display_max_temp(double yo_13)
{
  int i;
  //temp_max_string = String(yo_13);
  //size_1 = sizeof(temp_max_string);

size_1 = double_to_string(yo_13, temp_max_string); 


  for(i=0;i<size_1;i++)
  {
    temp_max_string[i] = '0';
  }

  //temp_max_string = String(yo_13);
  //size_1 = sizeof(temp_max_string);

size_1 = double_to_string(yo_13, temp_max_string); 
  
  for(i=0;i<size_1;i++)
  {
    if(temp_max_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_max_t,delta_min_3,temp_max_string[0]);
      display_epaper(dis_max_t,delta_min_5,temp_max_string[2]);

      display_epaper(dis_max_t,delta_min_4,temp_max_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_max_t,delta_min_2,temp_max_string[0]);
      display_epaper(dis_max_t,delta_min_3,temp_max_string[1]);
      display_epaper(dis_max_t,delta_min_5,temp_max_string[3]);

      display_epaper(dis_max_t,delta_min_4,temp_max_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_max_t,delta_min_1,temp_max_string[0]);
      display_epaper(dis_max_t,delta_min_2,temp_max_string[1]);
      display_epaper(dis_max_t,delta_min_3,temp_max_string[2]);
      display_epaper(dis_max_t,delta_min_5,temp_max_string[4]);

      display_epaper(dis_max_t,delta_min_4,temp_max_string[3]);
      break;
    }
  }
}


//dual temp
void display_max_singletemp(double yo_21)
{
  int i;
  //temp_max_string = String(yo_13);
  //size_1 = sizeof(temp_max_string);

size_1 = double_to_string(yo_21, temp_max_string); 


  for(i=0;i<size_1;i++)
  {
    temp_max_string[i] = '0';
  }

  //temp_max_string = String(yo_13);
  //size_1 = sizeof(temp_max_string);

size_1 = double_to_string(yo_21, temp_max_string); 
  
  for(i=0;i<size_1;i++)
  {
    if(temp_max_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_max_singlet,delta_single_min_8,temp_max_string[0]);
      display_epaper(dis_max_singlet,delta_single_min_10,temp_max_string[2]);

      display_epaper(dis_max_singlet,delta_single_min_9,temp_max_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_max_singlet,delta_single_min_7,temp_max_string[0]);
      display_epaper(dis_max_singlet,delta_single_min_8,temp_max_string[1]);
      display_epaper(dis_max_singlet,delta_single_min_10,temp_max_string[3]);

      display_epaper(dis_max_singlet,delta_single_min_9,temp_max_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_max_singlet,delta_single_min_6,temp_max_string[0]);
      display_epaper(dis_max_singlet,delta_single_min_7,temp_max_string[1]);
      display_epaper(dis_max_singlet,delta_single_min_8,temp_max_string[2]);
      display_epaper(dis_max_singlet,delta_single_min_10,temp_max_string[4]);

      display_epaper(dis_max_singlet,delta_single_min_9,temp_max_string[3]);
      break;
    }
  }
}



void display_max_temp_red(double yo_13)
{
  int i;
  //temp_max_string = String(yo_13);
  //size_1 = sizeof(temp_max_string);

size_1 = double_to_string(yo_13, temp_max_string); 

  for(i=0;i<size_1;i++)
  {
    temp_max_string[i] = '0';
  }

  //temp_max_string = String(yo_13);
  //size_1 = sizeof(temp_max_string);

size_1 = double_to_string(yo_13, temp_max_string); 
  
  for(i=0;i<size_1;i++)
  {
    if(temp_max_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_max_t_red,delta_min_3,temp_max_string[0]);
      display_epaper(dis_max_t_red,delta_min_5,temp_max_string[2]);

      display_epaper(dis_max_t_red,delta_min_4,temp_max_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_max_t_red,delta_min_2,temp_max_string[0]);
      display_epaper(dis_max_t_red,delta_min_3,temp_max_string[1]);
      display_epaper(dis_max_t_red,delta_min_5,temp_max_string[3]);

      display_epaper(dis_max_t_red,delta_min_4,temp_max_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_max_t_red,delta_min_1,temp_max_string[0]);
      display_epaper(dis_max_t_red,delta_min_2,temp_max_string[1]);
      display_epaper(dis_max_t_red,delta_min_3,temp_max_string[2]);
      display_epaper(dis_max_t_red,delta_min_5,temp_max_string[4]);

      display_epaper(dis_max_t_red,delta_min_4,temp_max_string[3]);
      break;
    }
  }
}

//dual temp
void display_min_humi(double yo_14)
{
  int i;
  //humi_min_string = String(yo_14);
  //size_1 = sizeof(humi_min_string);

size_1 = double_to_string(yo_14, humi_min_string); 


  for(i=0;i<size_1;i++)
  {
    humi_min_string[i] = '0';
  }

  //humi_min_string = String(yo_14);
  //size_1 = sizeof(humi_min_string);

size_1 = double_to_string(yo_14, humi_min_string); 
  
  for(i=0;i<size_1;i++)
  {
    if(humi_min_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_min_h,delta_min_3,humi_min_string[0]);
      display_epaper(dis_min_h,delta_min_5,humi_min_string[2]);
      
      display_epaper(dis_min_h,delta_min_4,humi_min_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_min_h,delta_min_2,humi_min_string[0]);
      display_epaper(dis_min_h,delta_min_3,humi_min_string[1]);
      display_epaper(dis_min_h,delta_min_5,humi_min_string[3]);

      display_epaper(dis_min_h,delta_min_4,humi_min_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_min_h,delta_min_1,humi_min_string[0]);
      display_epaper(dis_min_h,delta_min_2,humi_min_string[1]);
      display_epaper(dis_min_h,delta_min_3,humi_min_string[2]);
      display_epaper(dis_min_h,delta_min_5,humi_min_string[4]);

      display_epaper(dis_min_h,delta_min_4,humi_min_string[3]);
      break;
    }
  }
}


//single temp
void display_min_singlehumi(double yo_22)
{
  int i;
  //humi_min_string = String(yo_14);
  //size_1 = sizeof(humi_min_string);

size_1 = double_to_string(yo_22, humi_min_string); 


  for(i=0;i<size_1;i++)
  {
    humi_min_string[i] = '0';
  }

  //humi_min_string = String(yo_14);
  //size_1 = sizeof(humi_min_string);

size_1 = double_to_string(yo_22, humi_min_string); 
  
  for(i=0;i<size_1;i++)
  {
    if(humi_min_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_min_singleh,delta_single_min_3,humi_min_string[0]);
      display_epaper(dis_min_singleh,delta_single_min_5,humi_min_string[2]);
      
      display_epaper(dis_min_singleh,delta_single_min_4,humi_min_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_min_singleh,delta_single_min_2,humi_min_string[0]);
      display_epaper(dis_min_singleh,delta_single_min_3,humi_min_string[1]);
      display_epaper(dis_min_singleh,delta_single_min_5,humi_min_string[3]);

      display_epaper(dis_min_singleh,delta_single_min_4,humi_min_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_min_singleh,delta_single_min_1,humi_min_string[0]);
      display_epaper(dis_min_singleh,delta_single_min_2,humi_min_string[1]);
      display_epaper(dis_min_singleh,delta_single_min_3,humi_min_string[2]);
      display_epaper(dis_min_singleh,delta_single_min_5,humi_min_string[4]);

      display_epaper(dis_min_singleh,delta_single_min_4,humi_min_string[3]);
      break;
    }
  }
}

void display_min_humi_red(double yo_14)
{
  int i;
  //humi_min_string = String(yo_14);
  //size_1 = sizeof(humi_min_string);

size_1 = double_to_string(yo_14, humi_min_string); 


  for(i=0;i<size_1;i++)
  {
    humi_min_string[i] = '0';
  }

  //humi_min_string = String(yo_14);
  //size_1 = sizeof(humi_min_string);

size_1 = double_to_string(yo_14, humi_min_string); 
  
  for(i=0;i<size_1;i++)
  {
    if(humi_min_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_min_h_red,delta_min_3,humi_min_string[0]);
      display_epaper(dis_min_h_red,delta_min_5,humi_min_string[2]);
      
      display_epaper(dis_min_h_red,delta_min_4,humi_min_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_min_h_red,delta_min_2,humi_min_string[0]);
      display_epaper(dis_min_h_red,delta_min_3,humi_min_string[1]);
      display_epaper(dis_min_h_red,delta_min_5,humi_min_string[3]);

      display_epaper(dis_min_h_red,delta_min_4,humi_min_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_min_h_red,delta_min_1,humi_min_string[0]);
      display_epaper(dis_min_h_red,delta_min_2,humi_min_string[1]);
      display_epaper(dis_min_h_red,delta_min_3,humi_min_string[2]);
      display_epaper(dis_min_h_red,delta_min_5,humi_min_string[4]);

      display_epaper(dis_min_h_red,delta_min_4,humi_min_string[3]);
      break;
    }
  }
}

//dual temp
void display_max_humi(double yo_15)
{
  int i;
  //humi_max_string = String(yo_15);
  //size_1 = sizeof(humi_max_string);

size_1 = double_to_string(yo_15, humi_max_string); 


  for(i=0;i<size_1;i++)
  {
    humi_max_string[i] = '0';
  }

  //humi_max_string = String(yo_15);
  //size_1 = sizeof(humi_max_string);

size_1 = double_to_string(yo_15, humi_max_string); 
  
  for(i=0;i<size_1;i++)
  {
    if(humi_max_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_max_h,delta_min_3,humi_max_string[0]);
      display_epaper(dis_max_h,delta_min_5,humi_max_string[2]);

      display_epaper(dis_max_h,delta_min_4,humi_max_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_max_h,delta_min_2,humi_max_string[0]);
      display_epaper(dis_max_h,delta_min_3,humi_max_string[1]);
      display_epaper(dis_max_h,delta_min_5,humi_max_string[3]);

      display_epaper(dis_max_h,delta_min_4,humi_max_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_max_h,delta_min_1,humi_max_string[0]);
      display_epaper(dis_max_h,delta_min_2,humi_max_string[1]);
      display_epaper(dis_max_h,delta_min_3,humi_max_string[2]);
      display_epaper(dis_max_h,delta_min_5,humi_max_string[4]);

      display_epaper(dis_max_h,delta_min_4,humi_max_string[3]);
      break;
    }
  }
}



//single temp
void display_max_singlehumi(double yo_23)
{
  int i;
  //humi_max_string = String(yo_15);
  //size_1 = sizeof(humi_max_string);

size_1 = double_to_string(yo_23, humi_max_string); 


  for(i=0;i<size_1;i++)
  {
    humi_max_string[i] = '0';
  }

  //humi_max_string = String(yo_15);
  //size_1 = sizeof(humi_max_string);

size_1 = double_to_string(yo_23, humi_max_string); 
  
  for(i=0;i<size_1;i++)
  {
    if(humi_max_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_max_singleh,delta_single_min_8,humi_max_string[0]);
      display_epaper(dis_max_singleh,delta_single_min_10,humi_max_string[2]);

      display_epaper(dis_max_singleh,delta_single_min_9,humi_max_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_max_singleh,delta_single_min_7,humi_max_string[0]);
      display_epaper(dis_max_singleh,delta_single_min_8,humi_max_string[1]);
      display_epaper(dis_max_singleh,delta_single_min_10,humi_max_string[3]);

      display_epaper(dis_max_singleh,delta_single_min_9,humi_max_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_max_singleh,delta_single_min_6,humi_max_string[0]);
      display_epaper(dis_max_singleh,delta_single_min_7,humi_max_string[1]);
      display_epaper(dis_max_singleh,delta_single_min_8,humi_max_string[2]);
      display_epaper(dis_max_singleh,delta_single_min_10,humi_max_string[4]);

      display_epaper(dis_max_singleh,delta_single_min_9,humi_max_string[3]);
      break;
    }
  }
}




void display_max_humi_red(double yo_15)
{
  int i;
  //humi_max_string = String(yo_15);
  //size_1 = sizeof(humi_max_string);

size_1 = double_to_string(yo_15, humi_max_string); 


  for(i=0;i<size_1;i++)
  {
    humi_max_string[i] = '0';
  }

  //humi_max_string = String(yo_15);
  //size_1 = sizeof(humi_max_string);

size_1 = double_to_string(yo_15, humi_max_string); 
  for(i=0;i<size_1;i++)
  {
    if(humi_max_string[i] == '.')
    {
      dot_detect = i;
    }
  }

  switch(dot_detect)
  {
    case 1:
    {
      display_epaper(dis_max_h_red,delta_min_3,humi_max_string[0]);
      display_epaper(dis_max_h_red,delta_min_5,humi_max_string[2]);

      display_epaper(dis_max_h_red,delta_min_4,humi_max_string[1]);
      break;
    }

    case 2:
    {
      display_epaper(dis_max_h_red,delta_min_2,humi_max_string[0]);
      display_epaper(dis_max_h_red,delta_min_3,humi_max_string[1]);
      display_epaper(dis_max_h_red,delta_min_5,humi_max_string[3]);

      display_epaper(dis_max_h_red,delta_min_4,humi_max_string[2]);
      break;
    }
    case 3:
    {
      display_epaper(dis_max_h_red,delta_min_1,humi_max_string[0]);
      display_epaper(dis_max_h_red,delta_min_2,humi_max_string[1]);
      display_epaper(dis_max_h_red,delta_min_3,humi_max_string[2]);
      display_epaper(dis_max_h_red,delta_min_5,humi_max_string[4]);

      display_epaper(dis_max_h_red,delta_min_4,humi_max_string[3]);
      break;
    }
  }
}

void display_epaper(int category,int x_1,char value)
{
	//Year
	if(category == dis_year)
  {
    switch(value)
    {
          
      case '0':
      {
        year_zero(year_0,x_1,delta_datetime_1);
        break;
      }  
      
      case '1':
      {
        year_one(year_1,x_1,delta_datetime_1);
        break;
      } 
      
      case '2':
      {
        year_two(year_2,x_1,delta_datetime_1);
        break;
      } 
      
      case '3':
      {
        year_three(year_3,x_1,delta_datetime_1);
        break;
      } 
      
      case '4':
      {
        year_four(year_4,x_1,delta_datetime_1);
        break;
      } 
      
      case '5':
      {
        year_five(year_5,x_1,delta_datetime_1);
        break;
      } 
      
      case '6':
      {
        year_six(year_6,x_1,delta_datetime_1);
        break;
      } 
      
      case '7':
      {
        year_seven(year_7,x_1,delta_datetime_1);
        break;
      } 
      
      case '8':
      {
        year_eight(year_8,x_1,delta_datetime_1);
        break;
      } 
      
      case '9':
      {
        year_nine(year_9,x_1,delta_datetime_1);
        break;
      }     
    }
  }
	
	//Month
	if(category == dis_month)
  {
    switch(value)
    {
          
      case '0':
      {
        month_zero(month_0,x_1,delta_datetime_1);
        break;
      }  
      
      case '1':
      {
        month_one(month_1,x_1,delta_datetime_1);
        break;
      } 
      
      case '2':
      {
        month_two(month_2,x_1,delta_datetime_1);
        break;
      } 
      
      case '3':
      {
        month_three(month_3,x_1,delta_datetime_1);
        break;
      } 
      
      case '4':
      {
        month_four(month_4,x_1,delta_datetime_1);
        break;
      } 
      
      case '5':
      {
        month_five(month_5,x_1,delta_datetime_1);
        break;
      } 
      
      case '6':
      {
        month_six(month_6,x_1,delta_datetime_1);
        break;
      } 
      
      case '7':
      {
        month_seven(month_7,x_1,delta_datetime_1);
        break;
      } 
      
      case '8':
      {
        month_eight(month_8,x_1,delta_datetime_1);
        break;
      } 
      
      case '9':
      {
        month_nine(month_9,x_1,delta_datetime_1);
        break;
      }     
    }
  }
	
	//Date
	if(category == dis_date)
  {
    switch(value)
    {
          
      case '0':
      {
        date_zero(date_0,x_1,delta_datetime_1);
        break;
      }  
      
      case '1':
      {
        date_one(date_1,x_1,delta_datetime_1);
        break;
      } 
      
      case '2':
      {
        date_two(date_2,x_1,delta_datetime_1);
        break;
      } 
      
      case '3':
      {
        date_three(date_3,x_1,delta_datetime_1);
        break;
      } 
      
      case '4':
      {
        date_four(date_4,x_1,delta_datetime_1);
        break;
      } 
      
      case '5':
      {
        date_five(date_5,x_1,delta_datetime_1);
        break;
      } 
      
      case '6':
      {
        date_six(date_6,x_1,delta_datetime_1);
        break;
      } 
      
      case '7':
      {
        date_seven(date_7,x_1,delta_datetime_1);
        break;
      } 
      
      case '8':
      {
        date_eight(date_8,x_1,delta_datetime_1);
        break;
      } 
      
      case '9':
      {
        date_nine(date_9,x_1,delta_datetime_1);
        break;
      }     
    }
  }
	
	//Hour
	if(category == dis_hour)
  {
    switch(value)
    {
          
      case '0':
      {
        hour_zero(hour_0,x_1,delta_datetime_1);
        break;
      }  
      
      case '1':
      {
        hour_one(hour_1,x_1,delta_datetime_1);
        break;
      } 
      
      case '2':
      {
        hour_two(hour_2,x_1,delta_datetime_1);
        break;
      } 
      
      case '3':
      {
        hour_three(hour_3,x_1,delta_datetime_1);
        break;
      } 
      
      case '4':
      {
        hour_four(hour_4,x_1,delta_datetime_1);
        break;
      } 
      
      case '5':
      {
        hour_five(hour_5,x_1,delta_datetime_1);
        break;
      } 
      
      case '6':
      {
        hour_six(hour_6,x_1,delta_datetime_1);
        break;
      } 
      
      case '7':
      {
        hour_seven(hour_7,x_1,delta_datetime_1);
        break;
      } 
      
      case '8':
      {
        hour_eight(hour_8,x_1,delta_datetime_1);
        break;
      } 
      
      case '9':
      {
        hour_nine(hour_9,x_1,delta_datetime_1);
        break;
      }     
    }
  }
	
	//Minutes
	if(category == dis_min)
  {
    switch(value)
    {
          
      case '0':
      {
        min_zero(min_0,x_1,delta_datetime_1);
        break;
      }  
      
      case '1':
      {
        min_one(min_1,x_1,delta_datetime_1);
        break;
      } 
      
      case '2':
      {
        min_two(min_2,x_1,delta_datetime_1);
        break;
      } 
      
      case '3':
      {
        min_three(min_3,x_1,delta_datetime_1);
        break;
      } 
      
      case '4':
      {
        min_four(min_4,x_1,delta_datetime_1);
        break;
      } 
      
      case '5':
      {
        min_five(min_5,x_1,delta_datetime_1);
        break;
      } 
      
      case '6':
      {
        min_six(min_6,x_1,delta_datetime_1);
        break;
      } 
      
      case '7':
      {
        min_seven(min_7,x_1,delta_datetime_1);
        break;
      } 
      
      case '8':
      {
        min_eight(min_8,x_1,delta_datetime_1);
        break;
      } 
      
      case '9':
      {
        min_nine(min_9,x_1,delta_datetime_1);
        break;
      }     
    }
  }
	
	//dual temperature
  if(category == dis_t)
  {
    switch(value)
    {
      case '.':
      {
        dot(temp_dot,x_1,delta_temp_1);
        break;
      }
      
      case '-':
      {
        minus(temp_minus,x_1,delta_temp_1);
        break;
      }
      
      case '0':
      {
        zero(temp_0,x_1,delta_temp_1);
        break;
      }  
      
      case '1':
      {
        one(temp_1,x_1,delta_temp_1);
        break;
      } 
      
      case '2':
      {
        two(temp_2,x_1,delta_temp_1);
        break;
      } 
      
      case '3':
      {
        three(temp_3,x_1,delta_temp_1);
        break;
      } 
      
      case '4':
      {
        four(temp_4,x_1,delta_temp_1);
        break;
      } 
      
      case '5':
      {
        five(temp_5,x_1,delta_temp_1);
        break;
      } 
      
      case '6':
      {
        six(temp_6,x_1,delta_temp_1);
        break;
      } 
      
      case '7':
      {
        seven(temp_7,x_1,delta_temp_1);
        break;
      } 
      
      case '8':
      {
        eight(temp_8,x_1,delta_temp_1);
        break;
      } 
      
      case '9':
      {
        nine(temp_9,x_1,delta_temp_1);
        break;
      }     
    }
  }
	
	//single temperature
	if(category == dis_singlet)
  {
    switch(value)
    {
      case '.':
      {
        single_dot(temp_single_dot,x_1,delta_single_temp_1);
        break;
      }
      
      case '-':
      {
        single_minus(temp_single_minus,x_1,delta_single_temp_1);
        break;
      }
      
      case '0':
      {
        single_zero(temp_single_0,x_1,delta_single_temp_1);
        break;
      }  
      
      case '1':
      {
        single_one(temp_single_1,x_1,delta_single_temp_1);
        break;
      } 
      
      case '2':
      {
        single_two(temp_single_2,x_1,delta_single_temp_1);
        break;
      } 
      
      case '3':
      {
        single_three(temp_single_3,x_1,delta_single_temp_1);
        break;
      } 
      
      case '4':
      {
        single_four(temp_single_4,x_1,delta_single_temp_1);
        break;
      } 
      
      case '5':
      {
        single_five(temp_single_5,x_1,delta_single_temp_1);
        break;
      } 
      
      case '6':
      {
        single_six(temp_single_6,x_1,delta_single_temp_1);
        break;
      } 
      
      case '7':
      {
        single_seven(temp_single_7,x_1,delta_single_temp_1);
        break;
      } 
      
      case '8':
      {
        single_eight(temp_single_8,x_1,delta_single_temp_1);
        break;
      } 
      
      case '9':
      {
        single_nine(temp_single_9,x_1,delta_single_temp_1);
        break;
      }     
    }
  }
	

  if(category == dis_t_red)
  {
    switch(value)
    {
      case '.':
      {
        dot_red(temp_dot,x_1,delta_temp_1);
        break;
      }
            
      case '-':
      {
        minus_red(temp_minus,x_1,delta_temp_1);
        break;
      }
      
      case '0':
      {
        zero_red(temp_0,x_1,delta_temp_1);
        break;
      }  
      
      case '1':
      {
        one_red(temp_1,x_1,delta_temp_1);
        break;
      } 
      
      case '2':
      {
        two_red(temp_2,x_1,delta_temp_1);
        break;
      } 
      
      case '3':
      {
        three_red(temp_3,x_1,delta_temp_1);
        break;
      } 
      
      case '4':
      {
        four_red(temp_4,x_1,delta_temp_1);
        break;
      } 
      
      case '5':
      {
        five_red(temp_5,x_1,delta_temp_1);
        break;
      } 
      
      case '6':
      {
        six_red(temp_6,x_1,delta_temp_1);
        break;
      } 
      
      case '7':
      {
        seven_red(temp_7,x_1,delta_temp_1);
        break;
      } 
      
      case '8':
      {
        eight_red(temp_8,x_1,delta_temp_1);
        break;
      } 
      
      case '9':
      {
        nine_red(temp_9,x_1,delta_temp_1);
        break;
      }     
    }
  }

	//Dual temperature
  else if(category == dis_h)
  {
    switch(value)
    {
      case '.':
      {
        dot(temp_dot,x_1,delta_humi);
        break;
      }
            
      case '-':
      {
        minus(temp_minus,x_1,delta_humi);
        break;
      }
      
      case '0':
      {
        zero(temp_0,x_1,delta_humi);
        break;
      }  
      
      case '1':
      {
        one(temp_1,x_1,delta_humi);
        break;
      } 
      
      case '2':
      {
        two(temp_2,x_1,delta_humi);
        break;
      } 
      
      case '3':
      {
        three(temp_3,x_1,delta_humi);
        break;
      } 
      
      case '4':
      {
        four(temp_4,x_1,delta_humi);
        break;
      } 
      
      case '5':
      {
        five(temp_5,x_1,delta_humi);
        break;
      } 
      
      case '6':
      {
        six(temp_6,x_1,delta_humi);
        break;
      } 
      
      case '7':
      {
        seven(temp_7,x_1,delta_humi);
        break;
      } 
      
      case '8':
      {
        eight(temp_8,x_1,delta_humi);
        break;
      } 
      
      case '9':
      {
        nine(temp_9,x_1,delta_humi);
        break;
      }     
    }
  }

	
	//Single temperature CH2
  else if(category == dis_singleh)
  {
    switch(value)
    {
      case '.':
      {
        single_dot(temp_single_dot,x_1,delta_single_humi);
        break;
      }
            
      case '-':
      {
        single_minus(temp_single_minus,x_1,delta_single_humi);
        break;
      }
      
      case '0':
      {
        single_zero(temp_single_0,x_1,delta_single_humi);
        break;
      }  
      
      case '1':
      {
        single_one(temp_single_1,x_1,delta_single_humi);
        break;
      } 
      
      case '2':
      {
        single_two(temp_single_2,x_1,delta_single_humi);
        break;
      } 
      
      case '3':
      {
        single_three(temp_single_3,x_1,delta_single_humi);
        break;
      } 
      
      case '4':
      {
        single_four(temp_single_4,x_1,delta_single_humi);
        break;
      } 
      
      case '5':
      {
        single_five(temp_single_5,x_1,delta_single_humi);
        break;
      } 
      
      case '6':
      {
        single_six(temp_single_6,x_1,delta_single_humi);
        break;
      } 
      
      case '7':
      {
        single_seven(temp_single_7,x_1,delta_single_humi);
        break;
      } 
      
      case '8':
      {
        single_eight(temp_single_8,x_1,delta_single_humi);
        break;
      } 
      
      case '9':
      {
        single_nine(temp_single_9,x_1,delta_single_humi);
        break;
      }     
    }
  }
	
	
  else if(category == dis_h_red)
  {
    switch(value)
    {
      case '.':
      {
        dot_red(temp_dot,x_1,delta_humi);
        break;
      }
            
      case '-':
      {
        minus_red(temp_minus,x_1,delta_humi);
        break;
      }
      
      case '0':
      {
        zero_red(temp_0,x_1,delta_humi);
        break;
      }  
      
      case '1':
      {
        one_red(temp_1,x_1,delta_humi);
        break;
      } 
      
      case '2':
      {
        two_red(temp_2,x_1,delta_humi);
        break;
      } 
      
      case '3':
      {
        three_red(temp_3,x_1,delta_humi);
        break;
      } 
      
      case '4':
      {
        four_red(temp_4,x_1,delta_humi);
        break;
      } 
      
      case '5':
      {
        five_red(temp_5,x_1,delta_humi);
        break;
      } 
      
      case '6':
      {
        six_red(temp_6,x_1,delta_humi);
        break;
      } 
      
      case '7':
      {
        seven_red(temp_7,x_1,delta_humi);
        break;
      } 
      
      case '8':
      {
        eight_red(temp_8,x_1,delta_humi);
        break;
      } 
      
      case '9':
      {
        nine_red(temp_9,x_1,delta_humi);
        break;
      }     
    }
  }

	//dual temp
  else if(category == dis_min_t)
  {
    switch(value)
    {
      case '.':
      {
        temp_min_dot(temp_min_dot_1,x_1,delta_min_temp);
        break;
      }
            
      case '-':
      {
        temp_min_minus(temp_minus_1,x_1,delta_min_temp);
        break;
      }
      
      case '0':
      {
        temp_min_zero(temp_min_0,x_1,delta_min_temp);
        break;
      }  
      
      case '1':
      {
        temp_min_one(temp_min_1,x_1,delta_min_temp);
        break;
      } 
      
      case '2':
      {
        temp_min_two(temp_min_2,x_1,delta_min_temp);
        break;
      } 
      
      case '3':
      {
        temp_min_three(temp_min_3,x_1,delta_min_temp);
        break;
      } 
      
      case '4':
      {
        temp_min_four(temp_min_4,x_1,delta_min_temp);
        break;
      } 
      
      case '5':
      {
        temp_min_five(temp_min_5,x_1,delta_min_temp);
        break;
      } 
      
      case '6':
      {
        temp_min_six(temp_min_6,x_1,delta_min_temp);
        break;
      } 
      
      case '7':
      {
        temp_min_seven(temp_min_7,x_1,delta_min_temp);
        break;
      } 
      
      case '8':
      {
        temp_min_eight(temp_min_8,x_1,delta_min_temp);
        break;
      } 
      
      case '9':
      {
        temp_min_nine(temp_min_9,x_1,delta_min_temp);
        break;
      }     
    }
  }
	
	
	//single temp
  else if(category == dis_min_singlet)
  {
    switch(value)
    {
      case '.':
      {
        single_temp_min_dot(temp_single_min_dot_1,x_1,delta_single_min_temp);
        break;
      }
            
      case '-':
      {
        single_temp_min_minus(temp_single_minus_1,x_1,delta_single_min_temp);
        break;
      }
      
      case '0':
      {
        single_temp_min_zero(temp_single_min_0,x_1,delta_single_min_temp);
        break;
      }  
      
      case '1':
      {
        single_temp_min_one(temp_single_min_1,x_1,delta_single_min_temp);
        break;
      } 
      
      case '2':
      {
        single_temp_min_two(temp_single_min_2,x_1,delta_single_min_temp);
        break;
      } 
      
      case '3':
      {
        single_temp_min_three(temp_single_min_3,x_1,delta_single_min_temp);
        break;
      } 
      
      case '4':
      {
        single_temp_min_four(temp_single_min_4,x_1,delta_single_min_temp);
        break;
      } 
      
      case '5':
      {
        single_temp_min_five(temp_single_min_5,x_1,delta_single_min_temp);
        break;
      } 
      
      case '6':
      {
        single_temp_min_six(temp_single_min_6,x_1,delta_single_min_temp);
        break;
      } 
      
      case '7':
      {
        single_temp_min_seven(temp_single_min_7,x_1,delta_single_min_temp);
        break;
      } 
      
      case '8':
      {
        single_temp_min_eight(temp_single_min_8,x_1,delta_single_min_temp);
        break;
      } 
      
      case '9':
      {
        single_temp_min_nine(temp_single_min_9,x_1,delta_single_min_temp);
        break;
      }     
    }
  }
	

  else if(category == dis_min_t_red)
  {
    switch(value)
    {
      case '.':
      {
        temp_min_dot_red(temp_min_dot_1,x_1,delta_min_temp);
        break;
      }
            
      case '-':
      {
        temp_min_minus_red(temp_minus_1,x_1,delta_min_temp);
        break;
      }
      
      case '0':
      {
        temp_min_zero_red(temp_min_0,x_1,delta_min_temp);
        break;
      }  
      
      case '1':
      {
        temp_min_one_red(temp_min_1,x_1,delta_min_temp);
        break;
      } 
      
      case '2':
      {
        temp_min_two_red(temp_min_2,x_1,delta_min_temp);
        break;
      } 
      
      case '3':
      {
        temp_min_three_red(temp_min_3,x_1,delta_min_temp);
        break;
      } 
      
      case '4':
      {
        temp_min_four_red(temp_min_4,x_1,delta_min_temp);
        break;
      } 
      
      case '5':
      {
        temp_min_five_red(temp_min_5,x_1,delta_min_temp);
        break;
      } 
      
      case '6':
      {
        temp_min_six_red(temp_min_6,x_1,delta_min_temp);
        break;
      } 
      
      case '7':
      {
        temp_min_seven_red(temp_min_7,x_1,delta_min_temp);
        break;
      } 
      
      case '8':
      {
        temp_min_eight_red(temp_min_8,x_1,delta_min_temp);
        break;
      } 
      
      case '9':
      {
        temp_min_nine_red(temp_min_9,x_1,delta_min_temp);
        break;
      }     
    }
  }

	//dual temp
  else if(category == dis_max_t)
  {
    switch(value)
    {
      case '.':
      {
        temp_min_dot(temp_min_dot_1,x_1,delta_max_temp);
        break;
      }      
      case '-':
      {
        temp_min_minus(temp_minus_1,x_1,delta_max_temp);
        break;
      }
      
      case '0':
      {
        temp_min_zero(temp_min_0,x_1,delta_max_temp);
        break;
      }  
      
      case '1':
      {
        temp_min_one(temp_min_1,x_1,delta_max_temp);
        break;
      } 
      
      case '2':
      {
        temp_min_two(temp_min_2,x_1,delta_max_temp);
        break;
      } 
      
      case '3':
      {
        temp_min_three(temp_min_3,x_1,delta_max_temp);
        break;
      } 
      
      case '4':
      {
        temp_min_four(temp_min_4,x_1,delta_max_temp);
        break;
      } 
      
      case '5':
      {
        temp_min_five(temp_min_5,x_1,delta_max_temp);
        break;
      } 
      
      case '6':
      {
        temp_min_six(temp_min_6,x_1,delta_max_temp);
        break;
      } 
      
      case '7':
      {
        temp_min_seven(temp_min_7,x_1,delta_max_temp);
        break;
      } 
      
      case '8':
      {
        temp_min_eight(temp_min_8,x_1,delta_max_temp);
        break;
      } 
      
      case '9':
      {
        temp_min_nine(temp_min_9,x_1,delta_max_temp);
        break;
      }     
    }
  }
	
	
	//singel temp
  else if(category == dis_max_singlet)
  {
    switch(value)
    {
      case '.':
      {
        single_temp_min_dot(temp_single_min_dot_1,x_1,delta_single_max_temp);
        break;
      }      
      case '-':
      {
        single_temp_min_minus(temp_single_minus_1,x_1,delta_single_max_temp);
        break;
      }
      
      case '0':
      {
        single_temp_min_zero(temp_single_min_0,x_1,delta_single_max_temp);
        break;
      }  
      
      case '1':
      {
        single_temp_min_one(temp_single_min_1,x_1,delta_single_max_temp);
        break;
      } 
      
      case '2':
      {
        single_temp_min_two(temp_single_min_2,x_1,delta_single_max_temp);
        break;
      } 
      
      case '3':
      {
        single_temp_min_three(temp_single_min_3,x_1,delta_single_max_temp);
        break;
      } 
      
      case '4':
      {
        single_temp_min_four(temp_single_min_4,x_1,delta_single_max_temp);
        break;
      } 
      
      case '5':
      {
        single_temp_min_five(temp_single_min_5,x_1,delta_single_max_temp);
        break;
      } 
      
      case '6':
      {
        single_temp_min_six(temp_single_min_6,x_1,delta_single_max_temp);
        break;
      } 
      
      case '7':
      {
        single_temp_min_seven(temp_single_min_7,x_1,delta_single_max_temp);
        break;
      } 
      
      case '8':
      {
        single_temp_min_eight(temp_single_min_8,x_1,delta_single_max_temp);
        break;
      } 
      
      case '9':
      {
        single_temp_min_nine(temp_single_min_9,x_1,delta_single_max_temp);
        break;
      }     
    }
  }

	

  else if(category == dis_max_t_red)
  {
    switch(value)
    {
      case '.':
      {
        temp_min_dot_red(temp_min_dot_1,x_1,delta_max_temp);
        break;
      }      
      case '-':
      {
        temp_min_minus_red(temp_minus_1,x_1,delta_max_temp);
        break;
      }
      
      case '0':
      {
        temp_min_zero_red(temp_min_0,x_1,delta_max_temp);
        break;
      }  
      
      case '1':
      {
        temp_min_one_red(temp_min_1,x_1,delta_max_temp);
        break;
      } 
      
      case '2':
      {
        temp_min_two_red(temp_min_2,x_1,delta_max_temp);
        break;
      } 
      
      case '3':
      {
        temp_min_three_red(temp_min_3,x_1,delta_max_temp);
        break;
      } 
      
      case '4':
      {
        temp_min_four_red(temp_min_4,x_1,delta_max_temp);
        break;
      } 
      
      case '5':
      {
        temp_min_five_red(temp_min_5,x_1,delta_max_temp);
        break;
      } 
      
      case '6':
      {
        temp_min_six_red(temp_min_6,x_1,delta_max_temp);
        break;
      } 
      
      case '7':
      {
        temp_min_seven_red(temp_min_7,x_1,delta_max_temp);
        break;
      } 
      
      case '8':
      {
        temp_min_eight_red(temp_min_8,x_1,delta_max_temp);
        break;
      } 
      
      case '9':
      {
        temp_min_nine_red(temp_min_9,x_1,delta_max_temp);
        break;
      }     
    }
  }

	//dual temp
  else if(category == dis_min_h)
  {
    switch(value)
    {
      case '.':
      {
        temp_min_dot(temp_min_dot_1,x_1,delta_min_humi);
        break;
      }
            
      case '-':
      {
        temp_min_minus(temp_minus_1,x_1,delta_min_humi);
        break;
      }
      
      case '0':
      {
        temp_min_zero(temp_min_0,x_1,delta_min_humi);
        break;
      }  
      
      case '1':
      {
        temp_min_one(temp_min_1,x_1,delta_min_humi);
        break;
      } 
      
      case '2':
      {
        temp_min_two(temp_min_2,x_1,delta_min_humi);
        break;
      } 
      
      case '3':
      {
        temp_min_three(temp_min_3,x_1,delta_min_humi);
        break;
      } 
      
      case '4':
      {
        temp_min_four(temp_min_4,x_1,delta_min_humi);
        break;
      } 
      
      case '5':
      {
        temp_min_five(temp_min_5,x_1,delta_min_humi);
        break;
      } 
      
      case '6':
      {
        temp_min_six(temp_min_6,x_1,delta_min_humi);
        break;
      } 
      
      case '7':
      {
        temp_min_seven(temp_min_7,x_1,delta_min_humi);
        break;
      } 
      
      case '8':
      {
        temp_min_eight(temp_min_8,x_1,delta_min_humi);
        break;
      } 
      
      case '9':
      {
        temp_min_nine(temp_min_9,x_1,delta_min_humi);
        break;
      }     
    }
  }
	
	//single temp
  else if(category == dis_min_singleh)
  {
    switch(value)
    {
      case '.':
      {
        single_temp_min_dot(temp_single_min_dot_1,x_1,delta_single_min_humi);
        break;
      }
            
      case '-':
      {
        single_temp_min_minus(temp_single_minus_1,x_1,delta_single_min_humi);
        break;
      }
      
      case '0':
      {
        single_temp_min_zero(temp_single_min_0,x_1,delta_single_min_humi);
        break;
      }  
      
      case '1':
      {
        single_temp_min_one(temp_single_min_1,x_1,delta_single_min_humi);
        break;
      } 
      
      case '2':
      {
        single_temp_min_two(temp_single_min_2,x_1,delta_single_min_humi);
        break;
      } 
      
      case '3':
      {
        single_temp_min_three(temp_single_min_3,x_1,delta_single_min_humi);
        break;
      } 
      
      case '4':
      {
        single_temp_min_four(temp_single_min_4,x_1,delta_single_min_humi);
        break;
      } 
      
      case '5':
      {
        single_temp_min_five(temp_single_min_5,x_1,delta_single_min_humi);
        break;
      } 
      
      case '6':
      {
        single_temp_min_six(temp_single_min_6,x_1,delta_single_min_humi);
        break;
      } 
      
      case '7':
      {
        single_temp_min_seven(temp_single_min_7,x_1,delta_single_min_humi);
        break;
      } 
      
      case '8':
      {
        single_temp_min_eight(temp_single_min_8,x_1,delta_single_min_humi);
        break;
      } 
      
      case '9':
      {
        single_temp_min_nine(temp_single_min_9,x_1,delta_single_min_humi);
        break;
      }     
    }
  }

  else if(category == dis_min_h_red)
  {
    switch(value)
    {
      case '.':
      {
        temp_min_dot_red(temp_min_dot_1,x_1,delta_min_humi);
        break;
      }
            
      case '-':
      {
        temp_min_minus_red(temp_minus_1,x_1,delta_min_humi);
        break;
      }
      
      case '0':
      {
        temp_min_zero_red(temp_min_0,x_1,delta_min_humi);
        break;
      }  
      
      case '1':
      {
        temp_min_one_red(temp_min_1,x_1,delta_min_humi);
        break;
      } 
      
      case '2':
      {
        temp_min_two_red(temp_min_2,x_1,delta_min_humi);
        break;
      } 
      
      case '3':
      {
        temp_min_three_red(temp_min_3,x_1,delta_min_humi);
        break;
      } 
      
      case '4':
      {
        temp_min_four_red(temp_min_4,x_1,delta_min_humi);
        break;
      } 
      
      case '5':
      {
        temp_min_five_red(temp_min_5,x_1,delta_min_humi);
        break;
      } 
      
      case '6':
      {
        temp_min_six_red(temp_min_6,x_1,delta_min_humi);
        break;
      } 
      
      case '7':
      {
        temp_min_seven_red(temp_min_7,x_1,delta_min_humi);
        break;
      } 
      
      case '8':
      {
        temp_min_eight_red(temp_min_8,x_1,delta_min_humi);
        break;
      } 
      
      case '9':
      {
        temp_min_nine_red(temp_min_9,x_1,delta_min_humi);
        break;
      }     
    }
  }

	//dual temp
  else if(category == dis_max_h)
  {
    switch(value)
    {
      case '.':
      {
        temp_min_dot(temp_min_dot_1,x_1,delta_max_humi);
        break;
      }  
          
      case '-':
      {
        temp_min_minus(temp_minus_1,x_1,delta_max_humi);
        break;
      }
      
      case '0':
      {
        temp_min_zero(temp_min_0,x_1,delta_max_humi);
        break;
      }  
      
      case '1':
      {
        temp_min_one(temp_min_1,x_1,delta_max_humi);
        break;
      } 
      
      case '2':
      {
        temp_min_two(temp_min_2,x_1,delta_max_humi);
        break;
      } 
      
      case '3':
      {
        temp_min_three(temp_min_3,x_1,delta_max_humi);
        break;
      } 
      
      case '4':
      {
        temp_min_four(temp_min_4,x_1,delta_max_humi);
        break;
      } 
      
      case '5':
      {
        temp_min_five(temp_min_5,x_1,delta_max_humi);
        break;
      } 
      
      case '6':
      {
        temp_min_six(temp_min_6,x_1,delta_max_humi);
        break;
      } 
      
      case '7':
      {
        temp_min_seven(temp_min_7,x_1,delta_max_humi);
        break;
      } 
      
      case '8':
      {
        temp_min_eight(temp_min_8,x_1,delta_max_humi);
        break;
      } 
      
      case '9':
      {
        temp_min_nine(temp_min_9,x_1,delta_max_humi);
        break;
      }     
    }
  }
	
	
	//single temp
  else if(category == dis_max_singleh)
  {
    switch(value)
    {
      case '.':
      {
        single_temp_min_dot(temp_single_min_dot_1,x_1,delta_single_max_humi);
        break;
      }  
          
      case '-':
      {
        single_temp_min_minus(temp_single_minus_1,x_1,delta_single_max_humi);
        break;
      }
      
      case '0':
      {
        single_temp_min_zero(temp_single_min_0,x_1,delta_single_max_humi);
        break;
      }  
      
      case '1':
      {
        single_temp_min_one(temp_single_min_1,x_1,delta_single_max_humi);
        break;
      } 
      
      case '2':
      {
        single_temp_min_two(temp_single_min_2,x_1,delta_single_max_humi);
        break;
      } 
      
      case '3':
      {
        single_temp_min_three(temp_single_min_3,x_1,delta_single_max_humi);
        break;
      } 
      
      case '4':
      {
        single_temp_min_four(temp_single_min_4,x_1,delta_single_max_humi);
        break;
      } 
      
      case '5':
      {
        single_temp_min_five(temp_single_min_5,x_1,delta_single_max_humi);
        break;
      } 
      
      case '6':
      {
        single_temp_min_six(temp_single_min_6,x_1,delta_single_max_humi);
        break;
      } 
      
      case '7':
      {
        single_temp_min_seven(temp_single_min_7,x_1,delta_single_max_humi);
        break;
      } 
      
      case '8':
      {
        single_temp_min_eight(temp_single_min_8,x_1,delta_single_max_humi);
        break;
      } 
      
      case '9':
      {
        single_temp_min_nine(temp_single_min_9,x_1,delta_single_max_humi);
        break;
      }     
    }
  }
	

  else if(category == dis_max_h_red)
  {
    switch(value)
    {
      case '.':
      {
        temp_min_dot_red(temp_min_dot_1,x_1,delta_max_humi);
        break;
      }  
          
      case '-':
      {
        temp_min_minus_red(temp_minus_1,x_1,delta_max_humi);
        break;
      }
      
      case '0':
      {
        temp_min_zero_red(temp_min_0,x_1,delta_max_humi);
        break;
      }  
      
      case '1':
      {
        temp_min_one_red(temp_min_1,x_1,delta_max_humi);
        break;
      } 
      
      case '2':
      {
        temp_min_two_red(temp_min_2,x_1,delta_max_humi);
        break;
      } 
      
      case '3':
      {
        temp_min_three_red(temp_min_3,x_1,delta_max_humi);
        break;
      } 
      
      case '4':
      {
        temp_min_four_red(temp_min_4,x_1,delta_max_humi);
        break;
      } 
      
      case '5':
      {
        temp_min_five_red(temp_min_5,x_1,delta_max_humi);
        break;
      } 
      
      case '6':
      {
        temp_min_six_red(temp_min_6,x_1,delta_max_humi);
        break;
      } 
      
      case '7':
      {
        temp_min_seven_red(temp_min_7,x_1,delta_max_humi);
        break;
      } 
      
      case '8':
      {
        temp_min_eight_red(temp_min_8,x_1,delta_max_humi);
        break;
      } 
      
      case '9':
      {
        temp_min_nine_red(temp_min_9,x_1,delta_max_humi);
        break;
      }     
    }
  }
}








void display_status()
{
unsigned char busy;
	do
	{
		EPD_W21_WriteCMD(0x71);
		busy = isEPD_W21_BUSY;
		busy =!(busy & 0x01);        
	}
	while(busy);   
	driver_delay_xms(100);

//  //unsigned int time_diff,time_keep;
//  int i;
//  i=0;
//  //time_keep = millis();
//  while(i==0)
//  {
//  writeCMD(0x71);
//  //time_diff = millis() - time_keep;
//    //if((0 == digitalRead(EPD_READY)) || (time_diff>5000))
//    if(0 == digitalRead(EPD_READY))
//    {
//      i=1;
//    }
//  }  
}


int double_to_string(double value,char *string_1)
{
  //unsigned int i,temp,temp_2;
	int i,temp,temp_v3_2;
	
  char string[5];
  value *= 10;
  
  //flushing out old values
  for(i=0;i<6;i++)
  {
    string[i]='a';
  }

  if(value>0)
  {

    if(value<9)
    {
      string[0] = (char)((((long)value/1)%10)+48);
      string[1] = '.';
      string[2] = '0';
    }    

    else if(value<99)
    {
      string[0] = (char)((((long)value/1)%10)+48);
      string[1] = '.';
      string[2] = (char)((((long)value/10)%10)+48);
    }  

    else if(value<999)
    {
      string[0] = (char)((((long)value/1)%10)+48);
      string[1] = '.';
      string[2] = (char)((((long)value/10)%10)+48);
      string[3] = (char)((((long)value/100)%10)+48);
    }

    else if(value<9999)
    {
      string[0] = (char)((((long)value/1)%10)+48);
      string[1] = '.';
      string[2] = (char)((((long)value/10)%10)+48);
      string[3] = (char)((((long)value/100)%10)+48);
      string[4] = (char)((((long)value/1000)%10)+48);
    }           
  }
  else
  {
    value = value*-1;

    if((value<1000) && (value>=100))
    {
      string[0] = (char)((((long)value/1)%10)+48);
      string[1] = '.';
      string[2] = (char)((((long)value/10)%10)+48);
      string[3] = (char)((((long)value/100)%10)+48);
      string[4] = '-';
    }
    else if((value<100))
    {
      string[0] = (char)((((long)value/1)%10)+48);
      string[1] = '.';
      string[2] = (char)((((long)value/10)%10)+48);
      string[3] = '-';
    }
  }

  //Now finding size of string i.e actual number of elememt in string

  for(i=0;i<6;i++)
  {
    if(string[i] == 'a')
    {
      temp = i;
      temp_v3_2 = i;
      i=6;
    }
  }

   for(i=0;temp>0;temp--,i++)
   {
      string_1[i] = string[temp-1];
   }

   for(;i!=6;i++)
   {
    string_1[i] = 'a';
   }

   return temp_v3_2;
}
